
Assignment2-AY2526S1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008278  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  08008438  08008438  00009438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bf4  08008bf4  0000a2c4  2**0
                  CONTENTS
  4 .ARM          00000008  08008bf4  08008bf4  00009bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bfc  08008bfc  0000a2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bfc  08008bfc  00009bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c00  08008c00  00009c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  08008c04  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  200002c4  08008ec8  0000a2c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000694  08008ec8  0000a694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a2c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010868  00000000  00000000  0000a2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d4  00000000  00000000  0001ab5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  0001d430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a68  00000000  00000000  0001e1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e1e3  00000000  00000000  0001ec40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014629  00000000  00000000  0004ce23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001162db  00000000  00000000  0006144c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b9c  00000000  00000000  0017776c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0017c308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200002c4 	.word	0x200002c4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008420 	.word	0x08008420

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200002c8 	.word	0x200002c8
 80001fc:	08008420 	.word	0x08008420

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b988 	b.w	8000fa0 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	468e      	mov	lr, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d962      	bls.n	8000d84 <__udivmoddi4+0xdc>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	b14e      	cbz	r6, 8000cd8 <__udivmoddi4+0x30>
 8000cc4:	f1c6 0320 	rsb	r3, r6, #32
 8000cc8:	fa01 f806 	lsl.w	r8, r1, r6
 8000ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd0:	40b7      	lsls	r7, r6
 8000cd2:	ea43 0808 	orr.w	r8, r3, r8
 8000cd6:	40b4      	lsls	r4, r6
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	fa1f fc87 	uxth.w	ip, r7
 8000ce0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ce4:	0c23      	lsrs	r3, r4, #16
 8000ce6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cee:	fb01 f20c 	mul.w	r2, r1, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cfc:	f080 80ea 	bcs.w	8000ed4 <__udivmoddi4+0x22c>
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f240 80e7 	bls.w	8000ed4 <__udivmoddi4+0x22c>
 8000d06:	3902      	subs	r1, #2
 8000d08:	443b      	add	r3, r7
 8000d0a:	1a9a      	subs	r2, r3, r2
 8000d0c:	b2a3      	uxth	r3, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1e:	459c      	cmp	ip, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x8e>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	f080 80d6 	bcs.w	8000ed8 <__udivmoddi4+0x230>
 8000d2c:	459c      	cmp	ip, r3
 8000d2e:	f240 80d3 	bls.w	8000ed8 <__udivmoddi4+0x230>
 8000d32:	443b      	add	r3, r7
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3a:	eba3 030c 	sub.w	r3, r3, ip
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11d      	cbz	r5, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40f3      	lsrs	r3, r6
 8000d44:	2200      	movs	r2, #0
 8000d46:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d905      	bls.n	8000d5e <__udivmoddi4+0xb6>
 8000d52:	b10d      	cbz	r5, 8000d58 <__udivmoddi4+0xb0>
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e7f5      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d146      	bne.n	8000df4 <__udivmoddi4+0x14c>
 8000d66:	4573      	cmp	r3, lr
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xc8>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 8105 	bhi.w	8000f7a <__udivmoddi4+0x2d2>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	4690      	mov	r8, r2
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e5      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d7e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d82:	e7e2      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f000 8090 	beq.w	8000eaa <__udivmoddi4+0x202>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f040 80a4 	bne.w	8000edc <__udivmoddi4+0x234>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9c:	b280      	uxth	r0, r0
 8000d9e:	b2bc      	uxth	r4, r7
 8000da0:	2101      	movs	r1, #1
 8000da2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000da6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dae:	fb04 f20c 	mul.w	r2, r4, ip
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x11e>
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x11c>
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	f200 80e0 	bhi.w	8000f84 <__udivmoddi4+0x2dc>
 8000dc4:	46c4      	mov	ip, r8
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dcc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dd0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dd4:	fb02 f404 	mul.w	r4, r2, r4
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x144>
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	f102 30ff 	add.w	r0, r2, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x142>
 8000de4:	429c      	cmp	r4, r3
 8000de6:	f200 80ca 	bhi.w	8000f7e <__udivmoddi4+0x2d6>
 8000dea:	4602      	mov	r2, r0
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000df2:	e7a5      	b.n	8000d40 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	fa0e f401 	lsl.w	r4, lr, r1
 8000e04:	fa20 f306 	lsr.w	r3, r0, r6
 8000e08:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e0c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e10:	4323      	orrs	r3, r4
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	fa1f fc87 	uxth.w	ip, r7
 8000e1a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e1e:	0c1c      	lsrs	r4, r3, #16
 8000e20:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e24:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e28:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	d909      	bls.n	8000e48 <__udivmoddi4+0x1a0>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	f080 809c 	bcs.w	8000f76 <__udivmoddi4+0x2ce>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f240 8099 	bls.w	8000f76 <__udivmoddi4+0x2ce>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	eba4 040e 	sub.w	r4, r4, lr
 8000e4c:	fa1f fe83 	uxth.w	lr, r3
 8000e50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e54:	fb09 4413 	mls	r4, r9, r3, r4
 8000e58:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e5c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e60:	45a4      	cmp	ip, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1ce>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e6a:	f080 8082 	bcs.w	8000f72 <__udivmoddi4+0x2ca>
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d97f      	bls.n	8000f72 <__udivmoddi4+0x2ca>
 8000e72:	3b02      	subs	r3, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e7a:	eba4 040c 	sub.w	r4, r4, ip
 8000e7e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e82:	4564      	cmp	r4, ip
 8000e84:	4673      	mov	r3, lr
 8000e86:	46e1      	mov	r9, ip
 8000e88:	d362      	bcc.n	8000f50 <__udivmoddi4+0x2a8>
 8000e8a:	d05f      	beq.n	8000f4c <__udivmoddi4+0x2a4>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x1fe>
 8000e8e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e92:	eb64 0409 	sbc.w	r4, r4, r9
 8000e96:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9e:	431e      	orrs	r6, r3
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	e74f      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000eaa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eae:	0c01      	lsrs	r1, r0, #16
 8000eb0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eb4:	b280      	uxth	r0, r0
 8000eb6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	463c      	mov	r4, r7
 8000ec0:	46b8      	mov	r8, r7
 8000ec2:	46be      	mov	lr, r7
 8000ec4:	2620      	movs	r6, #32
 8000ec6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eca:	eba2 0208 	sub.w	r2, r2, r8
 8000ece:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ed2:	e766      	b.n	8000da2 <__udivmoddi4+0xfa>
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	e718      	b.n	8000d0a <__udivmoddi4+0x62>
 8000ed8:	4610      	mov	r0, r2
 8000eda:	e72c      	b.n	8000d36 <__udivmoddi4+0x8e>
 8000edc:	f1c6 0220 	rsb	r2, r6, #32
 8000ee0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ee4:	40b7      	lsls	r7, r6
 8000ee6:	40b1      	lsls	r1, r6
 8000ee8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ef6:	b2bc      	uxth	r4, r7
 8000ef8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb08 f904 	mul.w	r9, r8, r4
 8000f06:	40b0      	lsls	r0, r6
 8000f08:	4589      	cmp	r9, r1
 8000f0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f0e:	b280      	uxth	r0, r0
 8000f10:	d93e      	bls.n	8000f90 <__udivmoddi4+0x2e8>
 8000f12:	1879      	adds	r1, r7, r1
 8000f14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f18:	d201      	bcs.n	8000f1e <__udivmoddi4+0x276>
 8000f1a:	4589      	cmp	r9, r1
 8000f1c:	d81f      	bhi.n	8000f5e <__udivmoddi4+0x2b6>
 8000f1e:	eba1 0109 	sub.w	r1, r1, r9
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fb09 f804 	mul.w	r8, r9, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	4542      	cmp	r2, r8
 8000f36:	d229      	bcs.n	8000f8c <__udivmoddi4+0x2e4>
 8000f38:	18ba      	adds	r2, r7, r2
 8000f3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f3e:	d2c4      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f40:	4542      	cmp	r2, r8
 8000f42:	d2c2      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f44:	f1a9 0102 	sub.w	r1, r9, #2
 8000f48:	443a      	add	r2, r7
 8000f4a:	e7be      	b.n	8000eca <__udivmoddi4+0x222>
 8000f4c:	45f0      	cmp	r8, lr
 8000f4e:	d29d      	bcs.n	8000e8c <__udivmoddi4+0x1e4>
 8000f50:	ebbe 0302 	subs.w	r3, lr, r2
 8000f54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f58:	3801      	subs	r0, #1
 8000f5a:	46e1      	mov	r9, ip
 8000f5c:	e796      	b.n	8000e8c <__udivmoddi4+0x1e4>
 8000f5e:	eba7 0909 	sub.w	r9, r7, r9
 8000f62:	4449      	add	r1, r9
 8000f64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6c:	fb09 f804 	mul.w	r8, r9, r4
 8000f70:	e7db      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f72:	4673      	mov	r3, lr
 8000f74:	e77f      	b.n	8000e76 <__udivmoddi4+0x1ce>
 8000f76:	4650      	mov	r0, sl
 8000f78:	e766      	b.n	8000e48 <__udivmoddi4+0x1a0>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e6fd      	b.n	8000d7a <__udivmoddi4+0xd2>
 8000f7e:	443b      	add	r3, r7
 8000f80:	3a02      	subs	r2, #2
 8000f82:	e733      	b.n	8000dec <__udivmoddi4+0x144>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	443b      	add	r3, r7
 8000f8a:	e71c      	b.n	8000dc6 <__udivmoddi4+0x11e>
 8000f8c:	4649      	mov	r1, r9
 8000f8e:	e79c      	b.n	8000eca <__udivmoddi4+0x222>
 8000f90:	eba1 0109 	sub.w	r1, r1, r9
 8000f94:	46c4      	mov	ip, r8
 8000f96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9a:	fb09 f804 	mul.w	r8, r9, r4
 8000f9e:	e7c4      	b.n	8000f2a <__udivmoddi4+0x282>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <UART1_Init>:
static bool isPlayer = true;
static int buttonPressTime;
static bool nearbyFlag = false;
static int nearbyStartTime;

static void UART1_Init(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
	/* Pin configuration for UART. BSP_COM_Init() can do
	this automatically */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b2d      	ldr	r3, [pc, #180]	@ (8001060 <UART1_Init+0xbc>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fae:	4a2c      	ldr	r2, [pc, #176]	@ (8001060 <UART1_Init+0xbc>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001060 <UART1_Init+0xbc>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART1_CLK_ENABLE();
 8000fc2:	4b27      	ldr	r3, [pc, #156]	@ (8001060 <UART1_Init+0xbc>)
 8000fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc6:	4a26      	ldr	r2, [pc, #152]	@ (8001060 <UART1_Init+0xbc>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fce:	4b24      	ldr	r3, [pc, #144]	@ (8001060 <UART1_Init+0xbc>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fea:	2307      	movs	r3, #7
 8000fec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000fee:	23c0      	movs	r3, #192	@ 0xc0
 8000ff0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	4619      	mov	r1, r3
 8001004:	4817      	ldr	r0, [pc, #92]	@ (8001064 <UART1_Init+0xc0>)
 8001006:	f002 fba1 	bl	800374c <HAL_GPIO_Init>
	/* Configuring UART1 */
	huart1.Instance = USART1;
 800100a:	4b17      	ldr	r3, [pc, #92]	@ (8001068 <UART1_Init+0xc4>)
 800100c:	4a17      	ldr	r2, [pc, #92]	@ (800106c <UART1_Init+0xc8>)
 800100e:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001010:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <UART1_Init+0xc4>)
 8001012:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001016:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001018:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <UART1_Init+0xc4>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800101e:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <UART1_Init+0xc4>)
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001024:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <UART1_Init+0xc4>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800102a:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <UART1_Init+0xc4>)
 800102c:	220c      	movs	r2, #12
 800102e:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001030:	4b0d      	ldr	r3, [pc, #52]	@ (8001068 <UART1_Init+0xc4>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001036:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <UART1_Init+0xc4>)
 8001038:	2200      	movs	r2, #0
 800103a:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800103c:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <UART1_Init+0xc4>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <UART1_Init+0xc4>)
 8001044:	2200      	movs	r2, #0
 8001046:	629a      	str	r2, [r3, #40]	@ 0x28

	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001048:	4807      	ldr	r0, [pc, #28]	@ (8001068 <UART1_Init+0xc4>)
 800104a:	f003 fc2f 	bl	80048ac <HAL_UART_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <UART1_Init+0xb4>
		while(1);
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <UART1_Init+0xb0>
	}
}
 8001058:	bf00      	nop
 800105a:	3720      	adds	r7, #32
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	48000400 	.word	0x48000400
 8001068:	200002e0 	.word	0x200002e0
 800106c:	40013800 	.word	0x40013800

08001070 <TemperatureSensorHelper>:


// Helper Methods
float TemperatureSensorHelper(bool output) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	@ 0x30
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	float tempData = BSP_TSENSOR_ReadTemp();
 800107a:	f001 fc5b 	bl	8002934 <BSP_TSENSOR_ReadTemp>
 800107e:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

	if (output) {
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d017      	beq.n	80010b8 <TemperatureSensorHelper+0x48>
		char tempMessage[32];
		sprintf(tempMessage, "Temp = %.2f deg C \r\n" , tempData);
 8001088:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800108a:	f7ff fa75 	bl	8000578 <__aeabi_f2d>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	f107 000c 	add.w	r0, r7, #12
 8001096:	490c      	ldr	r1, [pc, #48]	@ (80010c8 <TemperatureSensorHelper+0x58>)
 8001098:	f005 f864 	bl	8006164 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)tempMessage, strlen(tempMessage), 0xFFFF);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f8fd 	bl	80002a0 <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	f107 010c 	add.w	r1, r7, #12
 80010ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010b2:	4806      	ldr	r0, [pc, #24]	@ (80010cc <TemperatureSensorHelper+0x5c>)
 80010b4:	f003 fc54 	bl	8004960 <HAL_UART_Transmit>
	}

	return tempData;
 80010b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ba:	ee07 3a90 	vmov	s15, r3
}
 80010be:	eeb0 0a67 	vmov.f32	s0, s15
 80010c2:	3730      	adds	r7, #48	@ 0x30
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	08008438 	.word	0x08008438
 80010cc:	200002e0 	.word	0x200002e0

080010d0 <PressureSensorHelper>:

float PressureSensorHelper(bool output) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08c      	sub	sp, #48	@ 0x30
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	float pressureData = BSP_PSENSOR_ReadPressure();
 80010da:	f001 fc01 	bl	80028e0 <BSP_PSENSOR_ReadPressure>
 80010de:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

	if (output) {
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d017      	beq.n	8001118 <PressureSensorHelper+0x48>
		char pressureMessage[32];
		sprintf(pressureMessage, "Pressure = %.2f \r\n" , pressureData);
 80010e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80010ea:	f7ff fa45 	bl	8000578 <__aeabi_f2d>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	f107 000c 	add.w	r0, r7, #12
 80010f6:	490c      	ldr	r1, [pc, #48]	@ (8001128 <PressureSensorHelper+0x58>)
 80010f8:	f005 f834 	bl	8006164 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)pressureMessage, strlen(pressureMessage), 0xFFFF);
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f8cd 	bl	80002a0 <strlen>
 8001106:	4603      	mov	r3, r0
 8001108:	b29a      	uxth	r2, r3
 800110a:	f107 010c 	add.w	r1, r7, #12
 800110e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001112:	4806      	ldr	r0, [pc, #24]	@ (800112c <PressureSensorHelper+0x5c>)
 8001114:	f003 fc24 	bl	8004960 <HAL_UART_Transmit>
	}

	return pressureData;
 8001118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800111a:	ee07 3a90 	vmov	s15, r3
}
 800111e:	eeb0 0a67 	vmov.f32	s0, s15
 8001122:	3730      	adds	r7, #48	@ 0x30
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	08008450 	.word	0x08008450
 800112c:	200002e0 	.word	0x200002e0

08001130 <HumiditySensorHelper>:

float HumiditySensorHelper(bool output) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	@ 0x30
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
	float humidityData = BSP_HSENSOR_ReadHumidity();
 800113a:	f001 fb5f 	bl	80027fc <BSP_HSENSOR_ReadHumidity>
 800113e:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

	if (output) {
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d017      	beq.n	8001178 <HumiditySensorHelper+0x48>
		char humidityMessage[32];
		sprintf(humidityMessage, "Humidity = %.2f \r\n" , humidityData);
 8001148:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800114a:	f7ff fa15 	bl	8000578 <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	f107 000c 	add.w	r0, r7, #12
 8001156:	490c      	ldr	r1, [pc, #48]	@ (8001188 <HumiditySensorHelper+0x58>)
 8001158:	f005 f804 	bl	8006164 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)humidityMessage, strlen(humidityMessage), 0xFFFF);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f89d 	bl	80002a0 <strlen>
 8001166:	4603      	mov	r3, r0
 8001168:	b29a      	uxth	r2, r3
 800116a:	f107 010c 	add.w	r1, r7, #12
 800116e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001172:	4806      	ldr	r0, [pc, #24]	@ (800118c <HumiditySensorHelper+0x5c>)
 8001174:	f003 fbf4 	bl	8004960 <HAL_UART_Transmit>
	}

	return humidityData;
 8001178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800117a:	ee07 3a90 	vmov	s15, r3
}
 800117e:	eeb0 0a67 	vmov.f32	s0, s15
 8001182:	3730      	adds	r7, #48	@ 0x30
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	08008464 	.word	0x08008464
 800118c:	200002e0 	.word	0x200002e0

08001190 <AccelerometerHelper>:

float AccelerometerHelper(float* buffer) {
 8001190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001194:	b09c      	sub	sp, #112	@ 0x70
 8001196:	af06      	add	r7, sp, #24
 8001198:	6078      	str	r0, [r7, #4]
	int16_t accel_data_i16[3] = {0}; // create array of size [3] with values {0} to store xyz reading
 800119a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	809a      	strh	r2, [r3, #4]
	BSP_ACCELERO_AccGetXYZ(accel_data_i16); // returns 16 bit integers which are acceleration in mg (9.8/1000 m/s^2).
 80011a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 fa93 	bl	80026d4 <BSP_ACCELERO_AccGetXYZ>

	for (int i = 0; i < 3; i++) {
 80011ae:	2300      	movs	r3, #0
 80011b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80011b2:	e021      	b.n	80011f8 <AccelerometerHelper+0x68>
		buffer[i] = (float)accel_data_i16[i] * (9.8/1000.0f); // mg -> m/s²
 80011b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	3358      	adds	r3, #88	@ 0x58
 80011ba:	443b      	add	r3, r7
 80011bc:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c8:	ee17 0a90 	vmov	r0, s15
 80011cc:	f7ff f9d4 	bl	8000578 <__aeabi_f2d>
 80011d0:	a345      	add	r3, pc, #276	@ (adr r3, 80012e8 <AccelerometerHelper+0x158>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff fa27 	bl	8000628 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	18d4      	adds	r4, r2, r3
 80011ea:	f7ff fcf5 	bl	8000bd8 <__aeabi_d2f>
 80011ee:	4603      	mov	r3, r0
 80011f0:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3; i++) {
 80011f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011f4:	3301      	adds	r3, #1
 80011f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80011f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	ddda      	ble.n	80011b4 <AccelerometerHelper+0x24>
	}
	buffer[3] = sqrtf(buffer[0]*buffer[0] + buffer[1]*buffer[1] + buffer[2]*buffer[2]);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	ed93 7a00 	vldr	s14, [r3]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3304      	adds	r3, #4
 8001212:	edd3 6a00 	vldr	s13, [r3]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3304      	adds	r3, #4
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001222:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3308      	adds	r3, #8
 800122a:	edd3 6a00 	vldr	s13, [r3]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3308      	adds	r3, #8
 8001232:	edd3 7a00 	vldr	s15, [r3]
 8001236:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800123a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f103 040c 	add.w	r4, r3, #12
 8001244:	eeb0 0a67 	vmov.f32	s0, s15
 8001248:	f007 f8be 	bl	80083c8 <sqrtf>
 800124c:	eef0 7a40 	vmov.f32	s15, s0
 8001250:	edc4 7a00 	vstr	s15, [r4]

	char message_print[64];
	sprintf(message_print, "Accel: X: %.2f m/s², Y: %.2f m/s², Z: %.2f m/s², aggregated= %.2f m/s²\r\n", buffer[0], buffer[1], buffer[2], buffer[3]);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f98d 	bl	8000578 <__aeabi_f2d>
 800125e:	4682      	mov	sl, r0
 8001260:	468b      	mov	fp, r1
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3304      	adds	r3, #4
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f985 	bl	8000578 <__aeabi_f2d>
 800126e:	4604      	mov	r4, r0
 8001270:	460d      	mov	r5, r1
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3308      	adds	r3, #8
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f97d 	bl	8000578 <__aeabi_f2d>
 800127e:	4680      	mov	r8, r0
 8001280:	4689      	mov	r9, r1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	330c      	adds	r3, #12
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f975 	bl	8000578 <__aeabi_f2d>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	f107 000c 	add.w	r0, r7, #12
 8001296:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800129a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800129e:	e9cd 4500 	strd	r4, r5, [sp]
 80012a2:	4652      	mov	r2, sl
 80012a4:	465b      	mov	r3, fp
 80012a6:	490e      	ldr	r1, [pc, #56]	@ (80012e0 <AccelerometerHelper+0x150>)
 80012a8:	f004 ff5c 	bl	8006164 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)message_print, strlen(message_print),0xFFFF);
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7fe fff5 	bl	80002a0 <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f107 010c 	add.w	r1, r7, #12
 80012be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012c2:	4808      	ldr	r0, [pc, #32]	@ (80012e4 <AccelerometerHelper+0x154>)
 80012c4:	f003 fb4c 	bl	8004960 <HAL_UART_Transmit>

	return buffer[3];
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	ee07 3a90 	vmov	s15, r3
}
 80012d0:	eeb0 0a67 	vmov.f32	s0, s15
 80012d4:	3758      	adds	r7, #88	@ 0x58
 80012d6:	46bd      	mov	sp, r7
 80012d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012dc:	f3af 8000 	nop.w
 80012e0:	08008478 	.word	0x08008478
 80012e4:	200002e0 	.word	0x200002e0
 80012e8:	bc01a36f 	.word	0xbc01a36f
 80012ec:	3f841205 	.word	0x3f841205

080012f0 <GyroscopeHelper>:

#define MOVING_AVG_SIZE 10  // number of samples for smoothing
float GyroscopeHelper(float* buffer) {
 80012f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012f4:	b0b5      	sub	sp, #212	@ 0xd4
 80012f6:	af08      	add	r7, sp, #32
 80012f8:	6078      	str	r0, [r7, #4]
	static float gyroBuffer[3][MOVING_AVG_SIZE] = {0}; // buffers for X, Y, Z
	static int index = 0;                              // circular buffer index
	static int count = 0;                              // number of valid samples
	int16_t gyro_data_i16[3] = {0};
 80012fa:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	809a      	strh	r2, [r3, #4]
	float gyroData[3];

	BSP_GYRO_GetXYZ(gyro_data_i16);
 8001304:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001308:	4618      	mov	r0, r3
 800130a:	f001 fa3f 	bl	800278c <BSP_GYRO_GetXYZ>

	// Convert to deg/s
	for (int i = 0; i < 3; i++) {
 800130e:	2300      	movs	r3, #0
 8001310:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001314:	e02f      	b.n	8001376 <GyroscopeHelper+0x86>
		gyroData[i] = (float)gyro_data_i16[i] / 1000.0f;
 8001316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	33b0      	adds	r3, #176	@ 0xb0
 800131e:	443b      	add	r3, r7
 8001320:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800132c:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8001520 <GyroscopeHelper+0x230>
 8001330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	33b0      	adds	r3, #176	@ 0xb0
 800133c:	443b      	add	r3, r7
 800133e:	3b24      	subs	r3, #36	@ 0x24
 8001340:	edc3 7a00 	vstr	s15, [r3]
		gyroBuffer[i][index] = gyroData[i];
 8001344:	4b77      	ldr	r3, [pc, #476]	@ (8001524 <GyroscopeHelper+0x234>)
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	33b0      	adds	r3, #176	@ 0xb0
 8001350:	443b      	add	r3, r7
 8001352:	3b24      	subs	r3, #36	@ 0x24
 8001354:	6819      	ldr	r1, [r3, #0]
 8001356:	4c74      	ldr	r4, [pc, #464]	@ (8001528 <GyroscopeHelper+0x238>)
 8001358:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4403      	add	r3, r0
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4423      	add	r3, r4
 800136a:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < 3; i++) {
 800136c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001370:	3301      	adds	r3, #1
 8001372:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001376:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800137a:	2b02      	cmp	r3, #2
 800137c:	ddcb      	ble.n	8001316 <GyroscopeHelper+0x26>
	}

	// Update circular buffer
	index = (index + 1) % MOVING_AVG_SIZE;
 800137e:	4b69      	ldr	r3, [pc, #420]	@ (8001524 <GyroscopeHelper+0x234>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	1c59      	adds	r1, r3, #1
 8001384:	4b69      	ldr	r3, [pc, #420]	@ (800152c <GyroscopeHelper+0x23c>)
 8001386:	fb83 2301 	smull	r2, r3, r3, r1
 800138a:	109a      	asrs	r2, r3, #2
 800138c:	17cb      	asrs	r3, r1, #31
 800138e:	1ad2      	subs	r2, r2, r3
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	1aca      	subs	r2, r1, r3
 800139a:	4b62      	ldr	r3, [pc, #392]	@ (8001524 <GyroscopeHelper+0x234>)
 800139c:	601a      	str	r2, [r3, #0]
	if (count < MOVING_AVG_SIZE) count++;
 800139e:	4b64      	ldr	r3, [pc, #400]	@ (8001530 <GyroscopeHelper+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b09      	cmp	r3, #9
 80013a4:	dc04      	bgt.n	80013b0 <GyroscopeHelper+0xc0>
 80013a6:	4b62      	ldr	r3, [pc, #392]	@ (8001530 <GyroscopeHelper+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	4a60      	ldr	r2, [pc, #384]	@ (8001530 <GyroscopeHelper+0x240>)
 80013ae:	6013      	str	r3, [r2, #0]

	// Compute moving average
	for (int i = 0; i < 3; i++) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80013b6:	e03c      	b.n	8001432 <GyroscopeHelper+0x142>
		float sum = 0.0f;
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		for (int j = 0; j < count; j++) {
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80013c6:	e018      	b.n	80013fa <GyroscopeHelper+0x10a>
			sum += gyroBuffer[i][j];
 80013c8:	4957      	ldr	r1, [pc, #348]	@ (8001528 <GyroscopeHelper+0x238>)
 80013ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80013da:	4413      	add	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	440b      	add	r3, r1
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80013e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ec:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
		for (int j = 0; j < count; j++) {
 80013f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80013f4:	3301      	adds	r3, #1
 80013f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80013fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001530 <GyroscopeHelper+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001402:	429a      	cmp	r2, r3
 8001404:	dbe0      	blt.n	80013c8 <GyroscopeHelper+0xd8>
		}
		buffer[i] = sum / count;
 8001406:	4b4a      	ldr	r3, [pc, #296]	@ (8001530 <GyroscopeHelper+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001412:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	edd7 6a29 	vldr	s13, [r7, #164]	@ 0xa4
 8001420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001424:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++) {
 8001428:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800142c:	3301      	adds	r3, #1
 800142e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001432:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001436:	2b02      	cmp	r3, #2
 8001438:	ddbe      	ble.n	80013b8 <GyroscopeHelper+0xc8>
	}

	// Compute smoothed magnitude
	buffer[3] = sqrtf(buffer[0]*buffer[0] + buffer[1]*buffer[1] + buffer[2]*buffer[2]);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	ed93 7a00 	vldr	s14, [r3]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	ee27 7a27 	vmul.f32	s14, s14, s15
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3304      	adds	r3, #4
 800144e:	edd3 6a00 	vldr	s13, [r3]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3304      	adds	r3, #4
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3308      	adds	r3, #8
 8001466:	edd3 6a00 	vldr	s13, [r3]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3308      	adds	r3, #8
 800146e:	edd3 7a00 	vldr	s15, [r3]
 8001472:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f103 040c 	add.w	r4, r3, #12
 8001480:	eeb0 0a67 	vmov.f32	s0, s15
 8001484:	f006 ffa0 	bl	80083c8 <sqrtf>
 8001488:	eef0 7a40 	vmov.f32	s15, s0
 800148c:	edc4 7a00 	vstr	s15, [r4]

	// Print smoothed data
	char message_print[128];
	sprintf(message_print,
 8001490:	4b27      	ldr	r3, [pc, #156]	@ (8001530 <GyroscopeHelper+0x240>)
 8001492:	681e      	ldr	r6, [r3, #0]
			"Gyro (avg %d): X: %.2f deg/s, Y: %.2f deg/s, Z: %.2f deg/s, magnitude= %.2f deg/s\r\n",
			count, buffer[0], buffer[1], buffer[2], buffer[3]);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
	sprintf(message_print,
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f86d 	bl	8000578 <__aeabi_f2d>
 800149e:	4604      	mov	r4, r0
 80014a0:	460d      	mov	r5, r1
			count, buffer[0], buffer[1], buffer[2], buffer[3]);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3304      	adds	r3, #4
 80014a6:	681b      	ldr	r3, [r3, #0]
	sprintf(message_print,
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f865 	bl	8000578 <__aeabi_f2d>
 80014ae:	4680      	mov	r8, r0
 80014b0:	4689      	mov	r9, r1
			count, buffer[0], buffer[1], buffer[2], buffer[3]);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3308      	adds	r3, #8
 80014b6:	681b      	ldr	r3, [r3, #0]
	sprintf(message_print,
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	4682      	mov	sl, r0
 80014c0:	468b      	mov	fp, r1
			count, buffer[0], buffer[1], buffer[2], buffer[3]);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	330c      	adds	r3, #12
 80014c6:	681b      	ldr	r3, [r3, #0]
	sprintf(message_print,
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f855 	bl	8000578 <__aeabi_f2d>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	f107 000c 	add.w	r0, r7, #12
 80014d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80014da:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80014de:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80014e2:	e9cd 4500 	strd	r4, r5, [sp]
 80014e6:	4632      	mov	r2, r6
 80014e8:	4912      	ldr	r1, [pc, #72]	@ (8001534 <GyroscopeHelper+0x244>)
 80014ea:	f004 fe3b 	bl	8006164 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print), 0xFFFF);
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7fe fed4 	bl	80002a0 <strlen>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	f107 010c 	add.w	r1, r7, #12
 8001500:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001504:	480c      	ldr	r0, [pc, #48]	@ (8001538 <GyroscopeHelper+0x248>)
 8001506:	f003 fa2b 	bl	8004960 <HAL_UART_Transmit>

	return buffer[3];
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	ee07 3a90 	vmov	s15, r3
}
 8001512:	eeb0 0a67 	vmov.f32	s0, s15
 8001516:	37b4      	adds	r7, #180	@ 0xb4
 8001518:	46bd      	mov	sp, r7
 800151a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800151e:	bf00      	nop
 8001520:	447a0000 	.word	0x447a0000
 8001524:	20000388 	.word	0x20000388
 8001528:	2000038c 	.word	0x2000038c
 800152c:	66666667 	.word	0x66666667
 8001530:	20000404 	.word	0x20000404
 8001534:	080084c8 	.word	0x080084c8
 8001538:	200002e0 	.word	0x200002e0

0800153c <MagnetometerHelper>:

float MagnetometerHelper(float* buffer) {
 800153c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001540:	b0a0      	sub	sp, #128	@ 0x80
 8001542:	af06      	add	r7, sp, #24
 8001544:	6078      	str	r0, [r7, #4]
    int16_t magRaw[3] = {0};
 8001546:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	809a      	strh	r2, [r3, #4]
    BSP_MAGNETO_GetXYZ(magRaw);   // raw LSB data from sensor
 8001550:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001554:	4618      	mov	r0, r3
 8001556:	f001 f98b 	bl	8002870 <BSP_MAGNETO_GetXYZ>

    const float MAG_SENSITIVITY = 0.15f;  // µT/LSB for LIS3MDL at ±4 gauss
 800155a:	4b40      	ldr	r3, [pc, #256]	@ (800165c <MagnetometerHelper+0x120>)
 800155c:	663b      	str	r3, [r7, #96]	@ 0x60
    for (int i = 0; i < 3; i++) {
 800155e:	2300      	movs	r3, #0
 8001560:	667b      	str	r3, [r7, #100]	@ 0x64
 8001562:	e016      	b.n	8001592 <MagnetometerHelper+0x56>
        buffer[i] = (float)magRaw[i] * MAG_SENSITIVITY;
 8001564:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	3368      	adds	r3, #104	@ 0x68
 800156a:	443b      	add	r3, r7
 800156c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001570:	ee07 3a90 	vmov	s15, r3
 8001574:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001578:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001588:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 800158c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800158e:	3301      	adds	r3, #1
 8001590:	667b      	str	r3, [r7, #100]	@ 0x64
 8001592:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001594:	2b02      	cmp	r3, #2
 8001596:	dde5      	ble.n	8001564 <MagnetometerHelper+0x28>
    }

    // Compute magnitude (total field strength)
    buffer[3] = sqrtf(buffer[0]*buffer[0] + buffer[1]*buffer[1] + buffer[2]*buffer[2]);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	ed93 7a00 	vldr	s14, [r3]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3304      	adds	r3, #4
 80015ac:	edd3 6a00 	vldr	s13, [r3]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3304      	adds	r3, #4
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3308      	adds	r3, #8
 80015c4:	edd3 6a00 	vldr	s13, [r3]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3308      	adds	r3, #8
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f103 040c 	add.w	r4, r3, #12
 80015de:	eeb0 0a67 	vmov.f32	s0, s15
 80015e2:	f006 fef1 	bl	80083c8 <sqrtf>
 80015e6:	eef0 7a40 	vmov.f32	s15, s0
 80015ea:	edc4 7a00 	vstr	s15, [r4]

    char message_print[80];
    sprintf(message_print, "Magnetic Field (µT): X=%.2f, Y=%.2f, Z=%.2f, |B|=%.2f\r\n", buffer[0], buffer[1], buffer[2], buffer[3]);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ffc0 	bl	8000578 <__aeabi_f2d>
 80015f8:	4682      	mov	sl, r0
 80015fa:	468b      	mov	fp, r1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3304      	adds	r3, #4
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ffb8 	bl	8000578 <__aeabi_f2d>
 8001608:	4604      	mov	r4, r0
 800160a:	460d      	mov	r5, r1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3308      	adds	r3, #8
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ffb0 	bl	8000578 <__aeabi_f2d>
 8001618:	4680      	mov	r8, r0
 800161a:	4689      	mov	r9, r1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	330c      	adds	r3, #12
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ffa8 	bl	8000578 <__aeabi_f2d>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	f107 0008 	add.w	r0, r7, #8
 8001630:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001634:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001638:	e9cd 4500 	strd	r4, r5, [sp]
 800163c:	4652      	mov	r2, sl
 800163e:	465b      	mov	r3, fp
 8001640:	4907      	ldr	r1, [pc, #28]	@ (8001660 <MagnetometerHelper+0x124>)
 8001642:	f004 fd8f 	bl	8006164 <siprintf>
    //HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print), 0xFFFF);

    return buffer[3];
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	ee07 3a90 	vmov	s15, r3
}
 800164e:	eeb0 0a67 	vmov.f32	s0, s15
 8001652:	3768      	adds	r7, #104	@ 0x68
 8001654:	46bd      	mov	sp, r7
 8001656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800165a:	bf00      	nop
 800165c:	3e19999a 	.word	0x3e19999a
 8001660:	0800851c 	.word	0x0800851c

08001664 <EnforcerOutput>:

void EnforcerOutput(void) {
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b089      	sub	sp, #36	@ 0x24
 8001668:	af00      	add	r7, sp, #0
	char message_print[16];
	char message[] = "Player Out!\r\n";
 800166a:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <EnforcerOutput+0x44>)
 800166c:	463c      	mov	r4, r7
 800166e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001670:	c407      	stmia	r4!, {r0, r1, r2}
 8001672:	8023      	strh	r3, [r4, #0]
	sprintf(message_print, "%s", message);
 8001674:	463a      	mov	r2, r7
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	490c      	ldr	r1, [pc, #48]	@ (80016ac <EnforcerOutput+0x48>)
 800167c:	4618      	mov	r0, r3
 800167e:	f004 fd71 	bl	8006164 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)message_print, strlen(message_print),0xFFFF);
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe fe0a 	bl	80002a0 <strlen>
 800168c:	4603      	mov	r3, r0
 800168e:	b29a      	uxth	r2, r3
 8001690:	f107 0110 	add.w	r1, r7, #16
 8001694:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001698:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <EnforcerOutput+0x4c>)
 800169a:	f003 f961 	bl	8004960 <HAL_UART_Transmit>
}
 800169e:	bf00      	nop
 80016a0:	3724      	adds	r7, #36	@ 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd90      	pop	{r4, r7, pc}
 80016a6:	bf00      	nop
 80016a8:	0800855c 	.word	0x0800855c
 80016ac:	08008558 	.word	0x08008558
 80016b0:	200002e0 	.word	0x200002e0

080016b4 <LEDBlinkHelper>:

void LEDBlinkHelper(int modulo) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() % modulo <= 10) {
 80016bc:	f001 ff28 	bl	8003510 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b0a      	cmp	r3, #10
 80016d0:	d804      	bhi.n	80016dc <LEDBlinkHelper+0x28>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80016d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016d6:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <LEDBlinkHelper+0x30>)
 80016d8:	f002 f9e2 	bl	8003aa0 <HAL_GPIO_TogglePin>
	}
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	48000400 	.word	0x48000400

080016e8 <MX_GPIO_Init>:

// GPIO
static void MX_GPIO_Init(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08c      	sub	sp, #48	@ 0x30
 80016ec:	af00      	add	r7, sp, #0
	// LED
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	4b29      	ldr	r3, [pc, #164]	@ (8001794 <MX_GPIO_Init+0xac>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f2:	4a28      	ldr	r2, [pc, #160]	@ (8001794 <MX_GPIO_Init+0xac>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016fa:	4b26      	ldr	r3, [pc, #152]	@ (8001794 <MX_GPIO_Init+0xac>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructLED = {0};
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
 8001714:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800171c:	481e      	ldr	r0, [pc, #120]	@ (8001798 <MX_GPIO_Init+0xb0>)
 800171e:	f002 f9a7 	bl	8003a70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin LED2_Pin */
	GPIO_InitStructLED.Pin = LED2_Pin;
 8001722:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001726:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructLED.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	623b      	str	r3, [r7, #32]
	GPIO_InitStructLED.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStructLED.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructLED);
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	4619      	mov	r1, r3
 800173a:	4817      	ldr	r0, [pc, #92]	@ (8001798 <MX_GPIO_Init+0xb0>)
 800173c:	f002 f806 	bl	800374c <HAL_GPIO_Init>


	// BUTTON
	__HAL_RCC_GPIOC_CLK_ENABLE();	// Enable AHB2 Bus for GPIOC
 8001740:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <MX_GPIO_Init+0xac>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001744:	4a13      	ldr	r2, [pc, #76]	@ (8001794 <MX_GPIO_Init+0xac>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <MX_GPIO_Init+0xac>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStructButton = {0};
 8001758:	f107 0308 	add.w	r3, r7, #8
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]

	// Configuration of BUTTON_EXTI13_Pin (GPIO-C Pin-13) as AF,
	GPIO_InitStructButton.Pin = BUTTON_EXTI13_Pin;
 8001768:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800176c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructButton.Mode = GPIO_MODE_IT_FALLING;
 800176e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001772:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructButton.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructButton);
 8001778:	f107 0308 	add.w	r3, r7, #8
 800177c:	4619      	mov	r1, r3
 800177e:	4807      	ldr	r0, [pc, #28]	@ (800179c <MX_GPIO_Init+0xb4>)
 8001780:	f001 ffe4 	bl	800374c <HAL_GPIO_Init>

	// Enable NVIC EXTI line 13
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001784:	2028      	movs	r0, #40	@ 0x28
 8001786:	f001 ffc6 	bl	8003716 <HAL_NVIC_EnableIRQ>
}
 800178a:	bf00      	nop
 800178c:	3730      	adds	r7, #48	@ 0x30
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	48000400 	.word	0x48000400
 800179c:	48000800 	.word	0x48000800

080017a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b0a0      	sub	sp, #128	@ 0x80
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_EXTI13_Pin) {
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017b0:	f040 8090 	bne.w	80018d4 <HAL_GPIO_EXTI_Callback+0x134>
		char message_print[32];

		char message[] = "Blue button is pressed\r\n"; // Fixed message
 80017b4:	4b49      	ldr	r3, [pc, #292]	@ (80018dc <HAL_GPIO_EXTI_Callback+0x13c>)
 80017b6:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 80017ba:	461d      	mov	r5, r3
 80017bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017c4:	c403      	stmia	r4!, {r0, r1}
 80017c6:	7022      	strb	r2, [r4, #0]
		sprintf(message_print, "%s", message);
 80017c8:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80017cc:	f107 0308 	add.w	r3, r7, #8
 80017d0:	4943      	ldr	r1, [pc, #268]	@ (80018e0 <HAL_GPIO_EXTI_Callback+0x140>)
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 fcc6 	bl	8006164 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)message_print, strlen(message_print),0xFFFF);
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fd5f 	bl	80002a0 <strlen>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	f107 0108 	add.w	r1, r7, #8
 80017ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017ee:	483d      	ldr	r0, [pc, #244]	@ (80018e4 <HAL_GPIO_EXTI_Callback+0x144>)
 80017f0:	f003 f8b6 	bl	8004960 <HAL_UART_Transmit>

		if (buttonActive == false) {
 80017f4:	4b3c      	ldr	r3, [pc, #240]	@ (80018e8 <HAL_GPIO_EXTI_Callback+0x148>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	f083 0301 	eor.w	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d009      	beq.n	8001816 <HAL_GPIO_EXTI_Callback+0x76>
			buttonActive = true;
 8001802:	4b39      	ldr	r3, [pc, #228]	@ (80018e8 <HAL_GPIO_EXTI_Callback+0x148>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
			buttonPressTime = HAL_GetTick();
 8001808:	f001 fe82 	bl	8003510 <HAL_GetTick>
 800180c:	4603      	mov	r3, r0
 800180e:	461a      	mov	r2, r3
 8001810:	4b36      	ldr	r3, [pc, #216]	@ (80018ec <HAL_GPIO_EXTI_Callback+0x14c>)
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e012      	b.n	800183c <HAL_GPIO_EXTI_Callback+0x9c>
		} else if (HAL_GetTick()-buttonPressTime > BUTTON_DURATION) {
 8001816:	f001 fe7b 	bl	8003510 <HAL_GetTick>
 800181a:	4603      	mov	r3, r0
 800181c:	4a33      	ldr	r2, [pc, #204]	@ (80018ec <HAL_GPIO_EXTI_Callback+0x14c>)
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	4a33      	ldr	r2, [pc, #204]	@ (80018f0 <HAL_GPIO_EXTI_Callback+0x150>)
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	4293      	cmp	r3, r2
 8001828:	d903      	bls.n	8001832 <HAL_GPIO_EXTI_Callback+0x92>
			buttonActive = false;
 800182a:	4b2f      	ldr	r3, [pc, #188]	@ (80018e8 <HAL_GPIO_EXTI_Callback+0x148>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	e004      	b.n	800183c <HAL_GPIO_EXTI_Callback+0x9c>
		} else {
			buttonActive = false;
 8001832:	4b2d      	ldr	r3, [pc, #180]	@ (80018e8 <HAL_GPIO_EXTI_Callback+0x148>)
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
			toggleState();
 8001838:	f000 fc36 	bl	80020a8 <toggleState>
		}


		if (nearbyFlag) {
 800183c:	4b2d      	ldr	r3, [pc, #180]	@ (80018f4 <HAL_GPIO_EXTI_Callback+0x154>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d047      	beq.n	80018d4 <HAL_GPIO_EXTI_Callback+0x134>
			if (isPlayer) {
 8001844:	4b2c      	ldr	r3, [pc, #176]	@ (80018f8 <HAL_GPIO_EXTI_Callback+0x158>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d020      	beq.n	800188e <HAL_GPIO_EXTI_Callback+0xee>
				char message[] = "Player escaped, good job!\r\n"; // Fixed message
 800184c:	4b2b      	ldr	r3, [pc, #172]	@ (80018fc <HAL_GPIO_EXTI_Callback+0x15c>)
 800184e:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8001852:	461d      	mov	r5, r3
 8001854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001858:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800185c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				sprintf(message_print, "%s", message);
 8001860:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001864:	f107 0308 	add.w	r3, r7, #8
 8001868:	491d      	ldr	r1, [pc, #116]	@ (80018e0 <HAL_GPIO_EXTI_Callback+0x140>)
 800186a:	4618      	mov	r0, r3
 800186c:	f004 fc7a 	bl	8006164 <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t*)message_print, strlen(message_print),0xFFFF);
 8001870:	f107 0308 	add.w	r3, r7, #8
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fd13 	bl	80002a0 <strlen>
 800187a:	4603      	mov	r3, r0
 800187c:	b29a      	uxth	r2, r3
 800187e:	f107 0108 	add.w	r1, r7, #8
 8001882:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001886:	4817      	ldr	r0, [pc, #92]	@ (80018e4 <HAL_GPIO_EXTI_Callback+0x144>)
 8001888:	f003 f86a 	bl	8004960 <HAL_UART_Transmit>
 800188c:	e01f      	b.n	80018ce <HAL_GPIO_EXTI_Callback+0x12e>
			} else {
				char message[] = "Player captured, good job!\r\n"; // Fixed message
 800188e:	4b1c      	ldr	r3, [pc, #112]	@ (8001900 <HAL_GPIO_EXTI_Callback+0x160>)
 8001890:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001894:	461d      	mov	r5, r3
 8001896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800189a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800189e:	c407      	stmia	r4!, {r0, r1, r2}
 80018a0:	7023      	strb	r3, [r4, #0]
				sprintf(message_print, "%s", message);
 80018a2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	490d      	ldr	r1, [pc, #52]	@ (80018e0 <HAL_GPIO_EXTI_Callback+0x140>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f004 fc59 	bl	8006164 <siprintf>
				HAL_UART_Transmit(&huart1,(uint8_t*)message_print, strlen(message_print),0xFFFF);
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fcf2 	bl	80002a0 <strlen>
 80018bc:	4603      	mov	r3, r0
 80018be:	b29a      	uxth	r2, r3
 80018c0:	f107 0108 	add.w	r1, r7, #8
 80018c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018c8:	4806      	ldr	r0, [pc, #24]	@ (80018e4 <HAL_GPIO_EXTI_Callback+0x144>)
 80018ca:	f003 f849 	bl	8004960 <HAL_UART_Transmit>
			}
			nearbyFlag = false;
 80018ce:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <HAL_GPIO_EXTI_Callback+0x154>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80018d4:	bf00      	nop
 80018d6:	3780      	adds	r7, #128	@ 0x80
 80018d8:	46bd      	mov	sp, r7
 80018da:	bdb0      	pop	{r4, r5, r7, pc}
 80018dc:	0800856c 	.word	0x0800856c
 80018e0:	08008558 	.word	0x08008558
 80018e4:	200002e0 	.word	0x200002e0
 80018e8:	20000374 	.word	0x20000374
 80018ec:	20000378 	.word	0x20000378
 80018f0:	20000000 	.word	0x20000000
 80018f4:	2000037c 	.word	0x2000037c
 80018f8:	20000004 	.word	0x20000004
 80018fc:	08008588 	.word	0x08008588
 8001900:	080085a4 	.word	0x080085a4

08001904 <RedLightGreenLight_initialise>:
void CatchAndRun_initialise(void);
void CatchAndRun_update(void);
void CatchAndRun_exit(void);

// Implementation for RedLightGreenLight State
void RedLightGreenLight_initialise(void) {
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b09c      	sub	sp, #112	@ 0x70
 8001908:	af00      	add	r7, sp, #0
	if (isPlayer) {
 800190a:	4b24      	ldr	r3, [pc, #144]	@ (800199c <RedLightGreenLight_initialise+0x98>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d020      	beq.n	8001954 <RedLightGreenLight_initialise+0x50>
		char message[] = "Entering Red Light, Green Light as Player\r\n"; // Fixed message
 8001912:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <RedLightGreenLight_initialise+0x9c>)
 8001914:	463c      	mov	r4, r7
 8001916:	461d      	mov	r5, r3
 8001918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001920:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001924:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		char message_print[64];
		sprintf(message_print, "%s", message);
 8001928:	463a      	mov	r2, r7
 800192a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800192e:	491d      	ldr	r1, [pc, #116]	@ (80019a4 <RedLightGreenLight_initialise+0xa0>)
 8001930:	4618      	mov	r0, r3
 8001932:	f004 fc17 	bl	8006164 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)message_print, strlen(message_print),0xFFFF);
 8001936:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fcb0 	bl	80002a0 <strlen>
 8001940:	4603      	mov	r3, r0
 8001942:	b29a      	uxth	r2, r3
 8001944:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001948:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800194c:	4816      	ldr	r0, [pc, #88]	@ (80019a8 <RedLightGreenLight_initialise+0xa4>)
 800194e:	f003 f807 	bl	8004960 <HAL_UART_Transmit>

		char message_print[64];
		sprintf(message_print, "%s", message);
		HAL_UART_Transmit(&huart1,(uint8_t*)message_print, strlen(message_print),0xFFFF);
	}
}
 8001952:	e01f      	b.n	8001994 <RedLightGreenLight_initialise+0x90>
		char message[] = "Entering Red Light, Green Light as Enforcer\r\n"; // Fixed message
 8001954:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <RedLightGreenLight_initialise+0xa8>)
 8001956:	463c      	mov	r4, r7
 8001958:	461d      	mov	r5, r3
 800195a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800195c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800195e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001962:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001966:	c407      	stmia	r4!, {r0, r1, r2}
 8001968:	8023      	strh	r3, [r4, #0]
		sprintf(message_print, "%s", message);
 800196a:	463a      	mov	r2, r7
 800196c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001970:	490c      	ldr	r1, [pc, #48]	@ (80019a4 <RedLightGreenLight_initialise+0xa0>)
 8001972:	4618      	mov	r0, r3
 8001974:	f004 fbf6 	bl	8006164 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)message_print, strlen(message_print),0xFFFF);
 8001978:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fc8f 	bl	80002a0 <strlen>
 8001982:	4603      	mov	r3, r0
 8001984:	b29a      	uxth	r2, r3
 8001986:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800198a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800198e:	4806      	ldr	r0, [pc, #24]	@ (80019a8 <RedLightGreenLight_initialise+0xa4>)
 8001990:	f002 ffe6 	bl	8004960 <HAL_UART_Transmit>
}
 8001994:	bf00      	nop
 8001996:	3770      	adds	r7, #112	@ 0x70
 8001998:	46bd      	mov	sp, r7
 800199a:	bdb0      	pop	{r4, r5, r7, pc}
 800199c:	20000004 	.word	0x20000004
 80019a0:	080085c4 	.word	0x080085c4
 80019a4:	08008558 	.word	0x08008558
 80019a8:	200002e0 	.word	0x200002e0
 80019ac:	080085f0 	.word	0x080085f0

080019b0 <RedLightGreenLight_update>:
void RedLightGreenLight_update(void) {
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b09d      	sub	sp, #116	@ 0x74
 80019b4:	af00      	add	r7, sp, #0
	// compare movement
	static float lastAccel[4] = {0};
	static float lastGyro[4]  = {0};
	static bool lastCaptured = false;

	if (HAL_GetTick() - lastToggle >= 10000) {
 80019b6:	f001 fdab 	bl	8003510 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	4b8d      	ldr	r3, [pc, #564]	@ (8001bf4 <RedLightGreenLight_update+0x244>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d93e      	bls.n	8001a48 <RedLightGreenLight_update+0x98>
        lastToggle = HAL_GetTick();
 80019ca:	f001 fda1 	bl	8003510 <HAL_GetTick>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4a88      	ldr	r2, [pc, #544]	@ (8001bf4 <RedLightGreenLight_update+0x244>)
 80019d2:	6013      	str	r3, [r2, #0]

		char message_print[32]; // UART	transmit buffer.
		if (!isGreen) { // if isGreen =/= true, at the start is false -> true
 80019d4:	4b88      	ldr	r3, [pc, #544]	@ (8001bf8 <RedLightGreenLight_update+0x248>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	f083 0301 	eor.w	r3, r3, #1
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d016      	beq.n	8001a10 <RedLightGreenLight_update+0x60>
			char message[] = "Green Light!\r\n";
 80019e2:	4b86      	ldr	r3, [pc, #536]	@ (8001bfc <RedLightGreenLight_update+0x24c>)
 80019e4:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80019e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ea:	c407      	stmia	r4!, {r0, r1, r2}
 80019ec:	8023      	strh	r3, [r4, #0]
 80019ee:	3402      	adds	r4, #2
 80019f0:	0c1b      	lsrs	r3, r3, #16
 80019f2:	7023      	strb	r3, [r4, #0]
			sprintf(message_print, "%s", message);
 80019f4:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	4981      	ldr	r1, [pc, #516]	@ (8001c00 <RedLightGreenLight_update+0x250>)
 80019fc:	4618      	mov	r0, r3
 80019fe:	f004 fbb1 	bl	8006164 <siprintf>
			isGreen = true;
 8001a02:	4b7d      	ldr	r3, [pc, #500]	@ (8001bf8 <RedLightGreenLight_update+0x248>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]

			lastCaptured = false;
 8001a08:	4b7e      	ldr	r3, [pc, #504]	@ (8001c04 <RedLightGreenLight_update+0x254>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	e00f      	b.n	8001a30 <RedLightGreenLight_update+0x80>
		} else {
			char message[] = "Red Light!\r\n";
 8001a10:	4b7d      	ldr	r3, [pc, #500]	@ (8001c08 <RedLightGreenLight_update+0x258>)
 8001a12:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8001a16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a18:	c407      	stmia	r4!, {r0, r1, r2}
 8001a1a:	7023      	strb	r3, [r4, #0]
			sprintf(message_print, "%s", message);
 8001a1c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	4977      	ldr	r1, [pc, #476]	@ (8001c00 <RedLightGreenLight_update+0x250>)
 8001a24:	4618      	mov	r0, r3
 8001a26:	f004 fb9d 	bl	8006164 <siprintf>
			isGreen = false;
 8001a2a:	4b73      	ldr	r3, [pc, #460]	@ (8001bf8 <RedLightGreenLight_update+0x248>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Transmit(&huart1,(uint8_t*)message_print, strlen(message_print),0xFFFF);
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fc34 	bl	80002a0 <strlen>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	1d39      	adds	r1, r7, #4
 8001a3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a42:	4872      	ldr	r0, [pc, #456]	@ (8001c0c <RedLightGreenLight_update+0x25c>)
 8001a44:	f002 ff8c 	bl	8004960 <HAL_UART_Transmit>
	}


	if (isGreen) {
 8001a48:	4b6b      	ldr	r3, [pc, #428]	@ (8001bf8 <RedLightGreenLight_update+0x248>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d021      	beq.n	8001a94 <RedLightGreenLight_update+0xe4>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // constant HIGH
 8001a50:	2201      	movs	r2, #1
 8001a52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a56:	486e      	ldr	r0, [pc, #440]	@ (8001c10 <RedLightGreenLight_update+0x260>)
 8001a58:	f002 f80a 	bl	8003a70 <HAL_GPIO_WritePin>
		lastCaptured = false;
 8001a5c:	4b69      	ldr	r3, [pc, #420]	@ (8001c04 <RedLightGreenLight_update+0x254>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]

		if (HAL_GetTick() % 2000 < 10) {
 8001a62:	f001 fd55 	bl	8003510 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	4b6a      	ldr	r3, [pc, #424]	@ (8001c14 <RedLightGreenLight_update+0x264>)
 8001a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8001a6e:	09db      	lsrs	r3, r3, #7
 8001a70:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b09      	cmp	r3, #9
 8001a7c:	f200 80b7 	bhi.w	8001bee <RedLightGreenLight_update+0x23e>
			TemperatureSensorHelper(true);
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7ff faf5 	bl	8001070 <TemperatureSensorHelper>
			PressureSensorHelper(true);
 8001a86:	2001      	movs	r0, #1
 8001a88:	f7ff fb22 	bl	80010d0 <PressureSensorHelper>
			HumiditySensorHelper(true);
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f7ff fb4f 	bl	8001130 <HumiditySensorHelper>
 8001a92:	e0ac      	b.n	8001bee <RedLightGreenLight_update+0x23e>
		}
	} else {
		if (!lastCaptured) {
 8001a94:	4b5b      	ldr	r3, [pc, #364]	@ (8001c04 <RedLightGreenLight_update+0x254>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	f083 0301 	eor.w	r3, r3, #1
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d008      	beq.n	8001ab4 <RedLightGreenLight_update+0x104>
			AccelerometerHelper(lastAccel);
 8001aa2:	485d      	ldr	r0, [pc, #372]	@ (8001c18 <RedLightGreenLight_update+0x268>)
 8001aa4:	f7ff fb74 	bl	8001190 <AccelerometerHelper>
			GyroscopeHelper(lastGyro);
 8001aa8:	485c      	ldr	r0, [pc, #368]	@ (8001c1c <RedLightGreenLight_update+0x26c>)
 8001aaa:	f7ff fc21 	bl	80012f0 <GyroscopeHelper>
			lastCaptured = true;
 8001aae:	4b55      	ldr	r3, [pc, #340]	@ (8001c04 <RedLightGreenLight_update+0x254>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - lastLEDToggle >= 500) {
 8001ab4:	f001 fd2c 	bl	8003510 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	4b59      	ldr	r3, [pc, #356]	@ (8001c20 <RedLightGreenLight_update+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ac4:	d309      	bcc.n	8001ada <RedLightGreenLight_update+0x12a>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001ac6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001aca:	4851      	ldr	r0, [pc, #324]	@ (8001c10 <RedLightGreenLight_update+0x260>)
 8001acc:	f001 ffe8 	bl	8003aa0 <HAL_GPIO_TogglePin>
		    lastLEDToggle = HAL_GetTick();
 8001ad0:	f001 fd1e 	bl	8003510 <HAL_GetTick>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4a52      	ldr	r2, [pc, #328]	@ (8001c20 <RedLightGreenLight_update+0x270>)
 8001ad8:	6013      	str	r3, [r2, #0]
		}

		if (HAL_GetTick() % 2000 < 10) {
 8001ada:	f001 fd19 	bl	8003510 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	4b4c      	ldr	r3, [pc, #304]	@ (8001c14 <RedLightGreenLight_update+0x264>)
 8001ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ae6:	09db      	lsrs	r3, r3, #7
 8001ae8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001aec:	fb01 f303 	mul.w	r3, r1, r3
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b09      	cmp	r3, #9
 8001af4:	d87b      	bhi.n	8001bee <RedLightGreenLight_update+0x23e>
			float accelThreshold = 0.8f; // m/s², mild movement
 8001af6:	4b4b      	ldr	r3, [pc, #300]	@ (8001c24 <RedLightGreenLight_update+0x274>)
 8001af8:	66bb      	str	r3, [r7, #104]	@ 0x68
			float gyroThreshold  = 1.5f; // deg/s, mild rotation -> this sensor noise is way too high
 8001afa:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8001afe:	667b      	str	r3, [r7, #100]	@ 0x64

			float accelData[4], gyroData[4];
			AccelerometerHelper(accelData);
 8001b00:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fb43 	bl	8001190 <AccelerometerHelper>
			GyroscopeHelper(gyroData);
 8001b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fbee 	bl	80012f0 <GyroscopeHelper>

			for (int i; i<4; i++) {
 8001b14:	e018      	b.n	8001b48 <RedLightGreenLight_update+0x198>
				lastGyro[i] = gyroData[i];
 8001b16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	3370      	adds	r3, #112	@ 0x70
 8001b1c:	443b      	add	r3, r7
 8001b1e:	3b4c      	subs	r3, #76	@ 0x4c
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	493e      	ldr	r1, [pc, #248]	@ (8001c1c <RedLightGreenLight_update+0x26c>)
 8001b24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	601a      	str	r2, [r3, #0]
				lastAccel[i] = accelData[i];
 8001b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	3370      	adds	r3, #112	@ 0x70
 8001b32:	443b      	add	r3, r7
 8001b34:	3b3c      	subs	r3, #60	@ 0x3c
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4937      	ldr	r1, [pc, #220]	@ (8001c18 <RedLightGreenLight_update+0x268>)
 8001b3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	601a      	str	r2, [r3, #0]
			for (int i; i<4; i++) {
 8001b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b44:	3301      	adds	r3, #1
 8001b46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	dde3      	ble.n	8001b16 <RedLightGreenLight_update+0x166>
			}

			if (isPlayer && (fabs(accelData[3] - lastAccel[3]) > accelThreshold) && (fabs(gyroData[3]  - lastGyro[3]) > gyroThreshold)) {
 8001b4e:	4b36      	ldr	r3, [pc, #216]	@ (8001c28 <RedLightGreenLight_update+0x278>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d022      	beq.n	8001b9c <RedLightGreenLight_update+0x1ec>
 8001b56:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c18 <RedLightGreenLight_update+0x268>)
 8001b5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b64:	eef0 7ae7 	vabs.f32	s15, s15
 8001b68:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001b6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b74:	d512      	bpl.n	8001b9c <RedLightGreenLight_update+0x1ec>
 8001b76:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001b7a:	4b28      	ldr	r3, [pc, #160]	@ (8001c1c <RedLightGreenLight_update+0x26c>)
 8001b7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b84:	eef0 7ae7 	vabs.f32	s15, s15
 8001b88:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001b8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b94:	d502      	bpl.n	8001b9c <RedLightGreenLight_update+0x1ec>
				endState();
 8001b96:	f000 faaf 	bl	80020f8 <endState>
 8001b9a:	e028      	b.n	8001bee <RedLightGreenLight_update+0x23e>
				return;
			} else if (!isPlayer && (fabs(accelData[3] - lastAccel[3]) > accelThreshold) && (fabs(gyroData[3]  - lastGyro[3]) > gyroThreshold)) {
 8001b9c:	4b22      	ldr	r3, [pc, #136]	@ (8001c28 <RedLightGreenLight_update+0x278>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	f083 0301 	eor.w	r3, r3, #1
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d021      	beq.n	8001bee <RedLightGreenLight_update+0x23e>
 8001baa:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001bae:	4b1a      	ldr	r3, [pc, #104]	@ (8001c18 <RedLightGreenLight_update+0x268>)
 8001bb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb8:	eef0 7ae7 	vabs.f32	s15, s15
 8001bbc:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc8:	d511      	bpl.n	8001bee <RedLightGreenLight_update+0x23e>
 8001bca:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001bce:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <RedLightGreenLight_update+0x26c>)
 8001bd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd8:	eef0 7ae7 	vabs.f32	s15, s15
 8001bdc:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be8:	d501      	bpl.n	8001bee <RedLightGreenLight_update+0x23e>
				EnforcerOutput();
 8001bea:	f7ff fd3b 	bl	8001664 <EnforcerOutput>
			}
		}
	}
}
 8001bee:	3774      	adds	r7, #116	@ 0x74
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd90      	pop	{r4, r7, pc}
 8001bf4:	20000408 	.word	0x20000408
 8001bf8:	2000040c 	.word	0x2000040c
 8001bfc:	08008620 	.word	0x08008620
 8001c00:	08008558 	.word	0x08008558
 8001c04:	2000040d 	.word	0x2000040d
 8001c08:	08008630 	.word	0x08008630
 8001c0c:	200002e0 	.word	0x200002e0
 8001c10:	48000400 	.word	0x48000400
 8001c14:	10624dd3 	.word	0x10624dd3
 8001c18:	20000410 	.word	0x20000410
 8001c1c:	20000420 	.word	0x20000420
 8001c20:	20000430 	.word	0x20000430
 8001c24:	3f4ccccd 	.word	0x3f4ccccd
 8001c28:	20000004 	.word	0x20000004

08001c2c <RedLightGreenLight_exit>:
void RedLightGreenLight_exit(void) {
 8001c2c:	b5b0      	push	{r4, r5, r7, lr}
 8001c2e:	b09c      	sub	sp, #112	@ 0x70
 8001c30:	af00      	add	r7, sp, #0
    char message[] = "--- State Exiting: RedLightGreenLight ---\r\n"; // Fixed message
 8001c32:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <RedLightGreenLight_exit+0x4c>)
 8001c34:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8001c38:	461d      	mov	r5, r3
 8001c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	char message_print[64];
	sprintf(message_print, "%s", message);
 8001c4a:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	490a      	ldr	r1, [pc, #40]	@ (8001c7c <RedLightGreenLight_exit+0x50>)
 8001c52:	4618      	mov	r0, r3
 8001c54:	f004 fa86 	bl	8006164 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)message_print, strlen(message_print),0xFFFF);
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fb20 	bl	80002a0 <strlen>
 8001c60:	4603      	mov	r3, r0
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	1d39      	adds	r1, r7, #4
 8001c66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c6a:	4805      	ldr	r0, [pc, #20]	@ (8001c80 <RedLightGreenLight_exit+0x54>)
 8001c6c:	f002 fe78 	bl	8004960 <HAL_UART_Transmit>
}
 8001c70:	bf00      	nop
 8001c72:	3770      	adds	r7, #112	@ 0x70
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bdb0      	pop	{r4, r5, r7, pc}
 8001c78:	08008640 	.word	0x08008640
 8001c7c:	08008558 	.word	0x08008558
 8001c80:	200002e0 	.word	0x200002e0

08001c84 <CatchAndRun_initialise>:

// Implementation for CatchAndRun State
void CatchAndRun_initialise(void) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b094      	sub	sp, #80	@ 0x50
 8001c88:	af00      	add	r7, sp, #0
    char message_print[80];

    if (isPlayer) {
 8001c8a:	4b12      	ldr	r3, [pc, #72]	@ (8001cd4 <CatchAndRun_initialise+0x50>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <CatchAndRun_initialise+0x1a>
        sprintf(message_print, "Entering Catch And Run as Player\r\n");
 8001c92:	463b      	mov	r3, r7
 8001c94:	4910      	ldr	r1, [pc, #64]	@ (8001cd8 <CatchAndRun_initialise+0x54>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f004 fa64 	bl	8006164 <siprintf>
 8001c9c:	e004      	b.n	8001ca8 <CatchAndRun_initialise+0x24>
    } else {
        sprintf(message_print, "Entering Catch And Run as Enforcer\r\n");
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	490e      	ldr	r1, [pc, #56]	@ (8001cdc <CatchAndRun_initialise+0x58>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 fa5e 	bl	8006164 <siprintf>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print), 0xFFFF);
 8001ca8:	463b      	mov	r3, r7
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe faf8 	bl	80002a0 <strlen>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4639      	mov	r1, r7
 8001cb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cba:	4809      	ldr	r0, [pc, #36]	@ (8001ce0 <CatchAndRun_initialise+0x5c>)
 8001cbc:	f002 fe50 	bl	8004960 <HAL_UART_Transmit>

	// Ensure LED starts OFF for controlled blinking
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cc6:	4807      	ldr	r0, [pc, #28]	@ (8001ce4 <CatchAndRun_initialise+0x60>)
 8001cc8:	f001 fed2 	bl	8003a70 <HAL_GPIO_WritePin>
}
 8001ccc:	bf00      	nop
 8001cce:	3750      	adds	r7, #80	@ 0x50
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000004 	.word	0x20000004
 8001cd8:	0800866c 	.word	0x0800866c
 8001cdc:	08008690 	.word	0x08008690
 8001ce0:	200002e0 	.word	0x200002e0
 8001ce4:	48000400 	.word	0x48000400

08001ce8 <CatchAndRun_update>:
void CatchAndRun_update(void) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b0a0      	sub	sp, #128	@ 0x80
 8001cec:	af00      	add	r7, sp, #0
	if (HAL_GetTick() % 1000 < 10) {
 8001cee:	f001 fc0f 	bl	8003510 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4bc2      	ldr	r3, [pc, #776]	@ (8002000 <CatchAndRun_update+0x318>)
 8001cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8001cfa:	099b      	lsrs	r3, r3, #6
 8001cfc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d00:	fb01 f303 	mul.w	r3, r1, r3
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b09      	cmp	r3, #9
 8001d08:	d86e      	bhi.n	8001de8 <CatchAndRun_update+0x100>
		// Tested in dorm room
//		Temp = 33.67 deg C
//		Pressure = 1008.35
//		Humidity = 63.11

		float tempThreshold = 35.0f; // m/s², mild movement
 8001d0a:	4bbe      	ldr	r3, [pc, #760]	@ (8002004 <CatchAndRun_update+0x31c>)
 8001d0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
		float pressureThreshold  = 1030.0f;
 8001d0e:	4bbe      	ldr	r3, [pc, #760]	@ (8002008 <CatchAndRun_update+0x320>)
 8001d10:	67bb      	str	r3, [r7, #120]	@ 0x78
		float humidityThreshold = 80.0;
 8001d12:	4bbe      	ldr	r3, [pc, #760]	@ (800200c <CatchAndRun_update+0x324>)
 8001d14:	677b      	str	r3, [r7, #116]	@ 0x74

		float temp = TemperatureSensorHelper(false);
 8001d16:	2000      	movs	r0, #0
 8001d18:	f7ff f9aa 	bl	8001070 <TemperatureSensorHelper>
 8001d1c:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
		if (temp > tempThreshold) {
 8001d20:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001d24:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001d28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d30:	dd14      	ble.n	8001d5c <CatchAndRun_update+0x74>
			char tempMessage[80];
			sprintf(tempMessage, "Temperature spike detected! T: %.2fC. Dangerous environment!\r\n" , temp);
 8001d32:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001d34:	f7fe fc20 	bl	8000578 <__aeabi_f2d>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	1d38      	adds	r0, r7, #4
 8001d3e:	49b4      	ldr	r1, [pc, #720]	@ (8002010 <CatchAndRun_update+0x328>)
 8001d40:	f004 fa10 	bl	8006164 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)tempMessage, strlen(tempMessage), 0xFFFF);
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe faaa 	bl	80002a0 <strlen>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	1d39      	adds	r1, r7, #4
 8001d52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d56:	48af      	ldr	r0, [pc, #700]	@ (8002014 <CatchAndRun_update+0x32c>)
 8001d58:	f002 fe02 	bl	8004960 <HAL_UART_Transmit>
		}

		float pressure = PressureSensorHelper(false);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff f9b7 	bl	80010d0 <PressureSensorHelper>
 8001d62:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
		if (pressure > pressureThreshold) {
 8001d66:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001d6a:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001d6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d76:	dd14      	ble.n	8001da2 <CatchAndRun_update+0xba>
			char pressureMessage[80];
			sprintf(pressureMessage, "Pressure spike detected! P: %.1fhPa. Dangerous environment!\r\n" , pressure);
 8001d78:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001d7a:	f7fe fbfd 	bl	8000578 <__aeabi_f2d>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	1d38      	adds	r0, r7, #4
 8001d84:	49a4      	ldr	r1, [pc, #656]	@ (8002018 <CatchAndRun_update+0x330>)
 8001d86:	f004 f9ed 	bl	8006164 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)pressureMessage, strlen(pressureMessage), 0xFFFF);
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fa87 	bl	80002a0 <strlen>
 8001d92:	4603      	mov	r3, r0
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	1d39      	adds	r1, r7, #4
 8001d98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d9c:	489d      	ldr	r0, [pc, #628]	@ (8002014 <CatchAndRun_update+0x32c>)
 8001d9e:	f002 fddf 	bl	8004960 <HAL_UART_Transmit>
		}

		float humidity = HumiditySensorHelper(false);
 8001da2:	2000      	movs	r0, #0
 8001da4:	f7ff f9c4 	bl	8001130 <HumiditySensorHelper>
 8001da8:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
		if (humidity > humidityThreshold) {
 8001dac:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001db0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	dd14      	ble.n	8001de8 <CatchAndRun_update+0x100>
			char humidityMessage[80];
			sprintf(humidityMessage, "Humidity spike detected! H: %.1f%%. Dangerous environment!\r\n" , humidity);
 8001dbe:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001dc0:	f7fe fbda 	bl	8000578 <__aeabi_f2d>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	1d38      	adds	r0, r7, #4
 8001dca:	4994      	ldr	r1, [pc, #592]	@ (800201c <CatchAndRun_update+0x334>)
 8001dcc:	f004 f9ca 	bl	8006164 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)humidityMessage, strlen(humidityMessage), 0xFFFF);
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fa64 	bl	80002a0 <strlen>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	1d39      	adds	r1, r7, #4
 8001dde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001de2:	488c      	ldr	r0, [pc, #560]	@ (8002014 <CatchAndRun_update+0x32c>)
 8001de4:	f002 fdbc 	bl	8004960 <HAL_UART_Transmit>
		}
	}

	float magnetData[4];
	MagnetometerHelper(magnetData); // constant continuous
 8001de8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fba5 	bl	800153c <MagnetometerHelper>
	float magnetoThreshold = 400.0f;
 8001df2:	4b8b      	ldr	r3, [pc, #556]	@ (8002020 <CatchAndRun_update+0x338>)
 8001df4:	667b      	str	r3, [r7, #100]	@ 0x64

	if (isPlayer && magnetData[3] > magnetoThreshold) {
 8001df6:	4b8b      	ldr	r3, [pc, #556]	@ (8002024 <CatchAndRun_update+0x33c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d038      	beq.n	8001e70 <CatchAndRun_update+0x188>
 8001dfe:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e02:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	d52f      	bpl.n	8001e70 <CatchAndRun_update+0x188>
		if (nearbyFlag == false) {
 8001e10:	4b85      	ldr	r3, [pc, #532]	@ (8002028 <CatchAndRun_update+0x340>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	f083 0301 	eor.w	r3, r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d008      	beq.n	8001e30 <CatchAndRun_update+0x148>
			nearbyStartTime = HAL_GetTick();
 8001e1e:	f001 fb77 	bl	8003510 <HAL_GetTick>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b81      	ldr	r3, [pc, #516]	@ (800202c <CatchAndRun_update+0x344>)
 8001e28:	601a      	str	r2, [r3, #0]
			nearbyFlag = true;
 8001e2a:	4b7f      	ldr	r3, [pc, #508]	@ (8002028 <CatchAndRun_update+0x340>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() % 500 < 10) {
 8001e30:	f001 fb6e 	bl	8003510 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b72      	ldr	r3, [pc, #456]	@ (8002000 <CatchAndRun_update+0x318>)
 8001e38:	fba3 1302 	umull	r1, r3, r3, r2
 8001e3c:	095b      	lsrs	r3, r3, #5
 8001e3e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001e42:	fb01 f303 	mul.w	r3, r1, r3
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b09      	cmp	r3, #9
 8001e4a:	d850      	bhi.n	8001eee <CatchAndRun_update+0x206>
			char magnetoMessage[80];
			sprintf(magnetoMessage, "Enforcer nearby! Be careful.\r\n");
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4978      	ldr	r1, [pc, #480]	@ (8002030 <CatchAndRun_update+0x348>)
 8001e50:	4618      	mov	r0, r3
 8001e52:	f004 f987 	bl	8006164 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)magnetoMessage, strlen(magnetoMessage), 0xFFFF);
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fa21 	bl	80002a0 <strlen>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	1d39      	adds	r1, r7, #4
 8001e64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e68:	486a      	ldr	r0, [pc, #424]	@ (8002014 <CatchAndRun_update+0x32c>)
 8001e6a:	f002 fd79 	bl	8004960 <HAL_UART_Transmit>
		if (HAL_GetTick() % 500 < 10) {
 8001e6e:	e03e      	b.n	8001eee <CatchAndRun_update+0x206>
		}

	} else if (!isPlayer && magnetData[3] > magnetoThreshold){
 8001e70:	4b6c      	ldr	r3, [pc, #432]	@ (8002024 <CatchAndRun_update+0x33c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	f083 0301 	eor.w	r3, r3, #1
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d037      	beq.n	8001eee <CatchAndRun_update+0x206>
 8001e7e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e82:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001e86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8e:	d52e      	bpl.n	8001eee <CatchAndRun_update+0x206>
		if (nearbyFlag == false) {
 8001e90:	4b65      	ldr	r3, [pc, #404]	@ (8002028 <CatchAndRun_update+0x340>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	f083 0301 	eor.w	r3, r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <CatchAndRun_update+0x1c8>
			nearbyStartTime = HAL_GetTick();
 8001e9e:	f001 fb37 	bl	8003510 <HAL_GetTick>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b61      	ldr	r3, [pc, #388]	@ (800202c <CatchAndRun_update+0x344>)
 8001ea8:	601a      	str	r2, [r3, #0]
			nearbyFlag = true;
 8001eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8002028 <CatchAndRun_update+0x340>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() % 500 < 10) {
 8001eb0:	f001 fb2e 	bl	8003510 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b52      	ldr	r3, [pc, #328]	@ (8002000 <CatchAndRun_update+0x318>)
 8001eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8001ebc:	095b      	lsrs	r3, r3, #5
 8001ebe:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001ec2:	fb01 f303 	mul.w	r3, r1, r3
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b09      	cmp	r3, #9
 8001eca:	d810      	bhi.n	8001eee <CatchAndRun_update+0x206>
			char magnetoMessage[80];
			sprintf(magnetoMessage, "Player is Nearby! Move faster.\r\n");
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	4959      	ldr	r1, [pc, #356]	@ (8002034 <CatchAndRun_update+0x34c>)
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f004 f947 	bl	8006164 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)magnetoMessage, strlen(magnetoMessage), 0xFFFF);
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe f9e1 	bl	80002a0 <strlen>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	1d39      	adds	r1, r7, #4
 8001ee4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ee8:	484a      	ldr	r0, [pc, #296]	@ (8002014 <CatchAndRun_update+0x32c>)
 8001eea:	f002 fd39 	bl	8004960 <HAL_UART_Transmit>
		}
	}

	if (HAL_GetTick() - nearbyStartTime > 3000 && isPlayer && nearbyFlag) {
 8001eee:	f001 fb0f 	bl	8003510 <HAL_GetTick>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a4d      	ldr	r2, [pc, #308]	@ (800202c <CatchAndRun_update+0x344>)
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d90a      	bls.n	8001f18 <CatchAndRun_update+0x230>
 8001f02:	4b48      	ldr	r3, [pc, #288]	@ (8002024 <CatchAndRun_update+0x33c>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d006      	beq.n	8001f18 <CatchAndRun_update+0x230>
 8001f0a:	4b47      	ldr	r3, [pc, #284]	@ (8002028 <CatchAndRun_update+0x340>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <CatchAndRun_update+0x230>
		endState();
 8001f12:	f000 f8f1 	bl	80020f8 <endState>
	if (HAL_GetTick() - nearbyStartTime > 3000 && isPlayer && nearbyFlag) {
 8001f16:	e028      	b.n	8001f6a <CatchAndRun_update+0x282>
	} else if (HAL_GetTick() - nearbyStartTime > 3000 && !isPlayer && nearbyFlag) {
 8001f18:	f001 fafa 	bl	8003510 <HAL_GetTick>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4a43      	ldr	r2, [pc, #268]	@ (800202c <CatchAndRun_update+0x344>)
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	1a9b      	subs	r3, r3, r2
 8001f24:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d91e      	bls.n	8001f6a <CatchAndRun_update+0x282>
 8001f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8002024 <CatchAndRun_update+0x33c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	f083 0301 	eor.w	r3, r3, #1
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d017      	beq.n	8001f6a <CatchAndRun_update+0x282>
 8001f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002028 <CatchAndRun_update+0x340>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d013      	beq.n	8001f6a <CatchAndRun_update+0x282>
		nearbyFlag = false;
 8001f42:	4b39      	ldr	r3, [pc, #228]	@ (8002028 <CatchAndRun_update+0x340>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
		char chaseMessage[64];
		sprintf(chaseMessage, "Player escaped! Keep trying.\r\n");
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	493b      	ldr	r1, [pc, #236]	@ (8002038 <CatchAndRun_update+0x350>)
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f004 f909 	bl	8006164 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)chaseMessage, strlen(chaseMessage), 0xFFFF);
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe f9a3 	bl	80002a0 <strlen>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	1d39      	adds	r1, r7, #4
 8001f60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f64:	482b      	ldr	r0, [pc, #172]	@ (8002014 <CatchAndRun_update+0x32c>)
 8001f66:	f002 fcfb 	bl	8004960 <HAL_UART_Transmit>
	}

	// LED Blinking
	if (magnetData[3] > magnetoThreshold && magnetData[3] < (magnetoThreshold + 100)) {
 8001f6a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001f6e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001f72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7a:	d511      	bpl.n	8001fa0 <CatchAndRun_update+0x2b8>
 8001f7c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001f80:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001f84:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 800203c <CatchAndRun_update+0x354>
 8001f88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f94:	d504      	bpl.n	8001fa0 <CatchAndRun_update+0x2b8>
		LEDBlinkHelper(600);
 8001f96:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001f9a:	f7ff fb8b 	bl	80016b4 <LEDBlinkHelper>
 8001f9e:	e051      	b.n	8002044 <CatchAndRun_update+0x35c>
	} else if (magnetData[3] > (magnetoThreshold + 100) && magnetData[3] < (magnetoThreshold + 200)) {
 8001fa0:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001fa4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001fa8:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800203c <CatchAndRun_update+0x354>
 8001fac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb8:	dd10      	ble.n	8001fdc <CatchAndRun_update+0x2f4>
 8001fba:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001fbe:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001fc2:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8002040 <CatchAndRun_update+0x358>
 8001fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd2:	d503      	bpl.n	8001fdc <CatchAndRun_update+0x2f4>
		LEDBlinkHelper(200);
 8001fd4:	20c8      	movs	r0, #200	@ 0xc8
 8001fd6:	f7ff fb6d 	bl	80016b4 <LEDBlinkHelper>
 8001fda:	e033      	b.n	8002044 <CatchAndRun_update+0x35c>
	} else if (magnetData[3] > (magnetoThreshold + 200)) {
 8001fdc:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001fe0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001fe4:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8002040 <CatchAndRun_update+0x358>
 8001fe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff4:	dc00      	bgt.n	8001ff8 <CatchAndRun_update+0x310>
		LEDBlinkHelper(50);
	}
}
 8001ff6:	e025      	b.n	8002044 <CatchAndRun_update+0x35c>
		LEDBlinkHelper(50);
 8001ff8:	2032      	movs	r0, #50	@ 0x32
 8001ffa:	f7ff fb5b 	bl	80016b4 <LEDBlinkHelper>
}
 8001ffe:	e021      	b.n	8002044 <CatchAndRun_update+0x35c>
 8002000:	10624dd3 	.word	0x10624dd3
 8002004:	420c0000 	.word	0x420c0000
 8002008:	4480c000 	.word	0x4480c000
 800200c:	42a00000 	.word	0x42a00000
 8002010:	080086b8 	.word	0x080086b8
 8002014:	200002e0 	.word	0x200002e0
 8002018:	080086f8 	.word	0x080086f8
 800201c:	08008738 	.word	0x08008738
 8002020:	43c80000 	.word	0x43c80000
 8002024:	20000004 	.word	0x20000004
 8002028:	2000037c 	.word	0x2000037c
 800202c:	20000380 	.word	0x20000380
 8002030:	08008778 	.word	0x08008778
 8002034:	08008798 	.word	0x08008798
 8002038:	080087bc 	.word	0x080087bc
 800203c:	42c80000 	.word	0x42c80000
 8002040:	43480000 	.word	0x43480000
 8002044:	bf00      	nop
 8002046:	3780      	adds	r7, #128	@ 0x80
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <CatchAndRun_exit>:
void CatchAndRun_exit(void) {
 800204c:	b5b0      	push	{r4, r5, r7, lr}
 800204e:	b09a      	sub	sp, #104	@ 0x68
 8002050:	af00      	add	r7, sp, #0
    char message[] = "--- State Exiting: CatchAndRun ---\r\n"; // Fixed message
 8002052:	4b12      	ldr	r3, [pc, #72]	@ (800209c <CatchAndRun_exit+0x50>)
 8002054:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002058:	461d      	mov	r5, r3
 800205a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800205c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800205e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002062:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002066:	6020      	str	r0, [r4, #0]
 8002068:	3404      	adds	r4, #4
 800206a:	7021      	strb	r1, [r4, #0]
	char message_print[64];
	sprintf(message_print, "%s", message);
 800206c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002070:	463b      	mov	r3, r7
 8002072:	490b      	ldr	r1, [pc, #44]	@ (80020a0 <CatchAndRun_exit+0x54>)
 8002074:	4618      	mov	r0, r3
 8002076:	f004 f875 	bl	8006164 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)message_print, strlen(message_print),0xFFFF);
 800207a:	463b      	mov	r3, r7
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe f90f 	bl	80002a0 <strlen>
 8002082:	4603      	mov	r3, r0
 8002084:	b29a      	uxth	r2, r3
 8002086:	4639      	mov	r1, r7
 8002088:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800208c:	4805      	ldr	r0, [pc, #20]	@ (80020a4 <CatchAndRun_exit+0x58>)
 800208e:	f002 fc67 	bl	8004960 <HAL_UART_Transmit>
}
 8002092:	bf00      	nop
 8002094:	3768      	adds	r7, #104	@ 0x68
 8002096:	46bd      	mov	sp, r7
 8002098:	bdb0      	pop	{r4, r5, r7, pc}
 800209a:	bf00      	nop
 800209c:	080087dc 	.word	0x080087dc
 80020a0:	08008558 	.word	0x08008558
 80020a4:	200002e0 	.word	0x200002e0

080020a8 <toggleState>:
};

// Running flag
volatile bool programRunning = true;

void toggleState(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	if (currentState == &RedLightGreenLightState) {
 80020ac:	4b0f      	ldr	r3, [pc, #60]	@ (80020ec <toggleState+0x44>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0f      	ldr	r2, [pc, #60]	@ (80020f0 <toggleState+0x48>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d107      	bne.n	80020c6 <toggleState+0x1e>
		currentState->exit();
 80020b6:	4b0d      	ldr	r3, [pc, #52]	@ (80020ec <toggleState+0x44>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4798      	blx	r3
		currentState = &CatchAndRunState;
 80020be:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <toggleState+0x44>)
 80020c0:	4a0c      	ldr	r2, [pc, #48]	@ (80020f4 <toggleState+0x4c>)
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e00b      	b.n	80020de <toggleState+0x36>
	} else if (currentState == &CatchAndRunState) {
 80020c6:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <toggleState+0x44>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a0a      	ldr	r2, [pc, #40]	@ (80020f4 <toggleState+0x4c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d106      	bne.n	80020de <toggleState+0x36>
		currentState->exit();
 80020d0:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <toggleState+0x44>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	4798      	blx	r3
		currentState = &RedLightGreenLightState;
 80020d8:	4b04      	ldr	r3, [pc, #16]	@ (80020ec <toggleState+0x44>)
 80020da:	4a05      	ldr	r2, [pc, #20]	@ (80020f0 <toggleState+0x48>)
 80020dc:	601a      	str	r2, [r3, #0]
	}

	currentState->initialise();
 80020de:	4b03      	ldr	r3, [pc, #12]	@ (80020ec <toggleState+0x44>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4798      	blx	r3
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000384 	.word	0x20000384
 80020f0:	20000008 	.word	0x20000008
 80020f4:	20000018 	.word	0x20000018

080020f8 <endState>:

void endState(void) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
	char message_print[16];
	char message[] = "Game Over\r\n";
 80020fe:	4a10      	ldr	r2, [pc, #64]	@ (8002140 <endState+0x48>)
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	ca07      	ldmia	r2, {r0, r1, r2}
 8002104:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	sprintf(message_print, "%s", message);
 8002108:	1d3a      	adds	r2, r7, #4
 800210a:	f107 0310 	add.w	r3, r7, #16
 800210e:	490d      	ldr	r1, [pc, #52]	@ (8002144 <endState+0x4c>)
 8002110:	4618      	mov	r0, r3
 8002112:	f004 f827 	bl	8006164 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)message_print, strlen(message_print),0xFFFF);
 8002116:	f107 0310 	add.w	r3, r7, #16
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe f8c0 	bl	80002a0 <strlen>
 8002120:	4603      	mov	r3, r0
 8002122:	b29a      	uxth	r2, r3
 8002124:	f107 0110 	add.w	r1, r7, #16
 8002128:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800212c:	4806      	ldr	r0, [pc, #24]	@ (8002148 <endState+0x50>)
 800212e:	f002 fc17 	bl	8004960 <HAL_UART_Transmit>
	programRunning = false;
 8002132:	4b06      	ldr	r3, [pc, #24]	@ (800214c <endState+0x54>)
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
}
 8002138:	bf00      	nop
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	08008824 	.word	0x08008824
 8002144:	08008558 	.word	0x08008558
 8002148:	200002e0 	.word	0x200002e0
 800214c:	20000028 	.word	0x20000028

08002150 <setup>:


void setup(void) {
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	// initialise_monitor_handles(); // for semi-hosting support (printf)

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002154:	f001 f974 	bl	8003440 <HAL_Init>

	// GPIO Pins
	MX_GPIO_Init();
 8002158:	f7ff fac6 	bl	80016e8 <MX_GPIO_Init>

	/* UART initialization */
	UART1_Init();
 800215c:	f7fe ff22 	bl	8000fa4 <UART1_Init>

	/* Peripheral initializations using BSP functions */
	BSP_TSENSOR_Init();
 8002160:	f000 fbcc 	bl	80028fc <BSP_TSENSOR_Init>
	BSP_PSENSOR_Init();
 8002164:	f000 fb9c 	bl	80028a0 <BSP_PSENSOR_Init>
	BSP_HSENSOR_Init();
 8002168:	f000 fb28 	bl	80027bc <BSP_HSENSOR_Init>
	BSP_ACCELERO_Init();
 800216c:	f000 fa72 	bl	8002654 <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 8002170:	f000 fac8 	bl	8002704 <BSP_GYRO_Init>
	BSP_MAGNETO_Init();
 8002174:	f000 fb50 	bl	8002818 <BSP_MAGNETO_Init>

	// My state machine
	currentState = &RedLightGreenLightState;
 8002178:	4b04      	ldr	r3, [pc, #16]	@ (800218c <setup+0x3c>)
 800217a:	4a05      	ldr	r2, [pc, #20]	@ (8002190 <setup+0x40>)
 800217c:	601a      	str	r2, [r3, #0]
	currentState->initialise();
 800217e:	4b03      	ldr	r3, [pc, #12]	@ (800218c <setup+0x3c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4798      	blx	r3
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000384 	.word	0x20000384
 8002190:	20000008 	.word	0x20000008

08002194 <main>:


// Main Program Code
int main(void) {
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
	setup();
 8002198:	f7ff ffda 	bl	8002150 <setup>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // constant HIGH
 800219c:	2200      	movs	r2, #0
 800219e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021a2:	4808      	ldr	r0, [pc, #32]	@ (80021c4 <main+0x30>)
 80021a4:	f001 fc64 	bl	8003a70 <HAL_GPIO_WritePin>
	while (programRunning) {
 80021a8:	e003      	b.n	80021b2 <main+0x1e>
		currentState->update();
 80021aa:	4b07      	ldr	r3, [pc, #28]	@ (80021c8 <main+0x34>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4798      	blx	r3
	while (programRunning) {
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <main+0x38>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f6      	bne.n	80021aa <main+0x16>
 80021bc:	2300      	movs	r3, #0
	}
}
 80021be:	4618      	mov	r0, r3
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	48000400 	.word	0x48000400
 80021c8:	20000384 	.word	0x20000384
 80021cc:	20000028 	.word	0x20000028

080021d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002214 <HAL_MspInit+0x44>)
 80021d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021da:	4a0e      	ldr	r2, [pc, #56]	@ (8002214 <HAL_MspInit+0x44>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80021e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <HAL_MspInit+0x44>)
 80021e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <HAL_MspInit+0x44>)
 80021f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f2:	4a08      	ldr	r2, [pc, #32]	@ (8002214 <HAL_MspInit+0x44>)
 80021f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_MspInit+0x44>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000

08002218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <NMI_Handler+0x4>

08002220 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <MemManage_Handler+0x4>

08002230 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <BusFault_Handler+0x4>

08002238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <UsageFault_Handler+0x4>

08002240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800226e:	f001 f93b 	bl	80034e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}

08002276 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800227a:	2020      	movs	r0, #32
 800227c:	f001 fc2a 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002280:	2040      	movs	r0, #64	@ 0x40
 8002282:	f001 fc27 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002286:	2080      	movs	r0, #128	@ 0x80
 8002288:	f001 fc24 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800228c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002290:	f001 fc20 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}

08002298 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 800229c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80022a0:	f001 fc18 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80022a4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80022a8:	f001 fc14 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 80022ac:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80022b0:	f001 fc10 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80022b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80022b8:	f001 fc0c 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80022bc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80022c0:	f001 fc08 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80022c4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80022c8:	f001 fc04 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d8:	4a14      	ldr	r2, [pc, #80]	@ (800232c <_sbrk+0x5c>)
 80022da:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <_sbrk+0x60>)
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e4:	4b13      	ldr	r3, [pc, #76]	@ (8002334 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d102      	bne.n	80022f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <_sbrk+0x64>)
 80022ee:	4a12      	ldr	r2, [pc, #72]	@ (8002338 <_sbrk+0x68>)
 80022f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f2:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <_sbrk+0x64>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d207      	bcs.n	8002310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002300:	f004 f87c 	bl	80063fc <__errno>
 8002304:	4603      	mov	r3, r0
 8002306:	220c      	movs	r2, #12
 8002308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
 800230e:	e009      	b.n	8002324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002310:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002316:	4b07      	ldr	r3, [pc, #28]	@ (8002334 <_sbrk+0x64>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	4a05      	ldr	r2, [pc, #20]	@ (8002334 <_sbrk+0x64>)
 8002320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002322:	68fb      	ldr	r3, [r7, #12]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	200a0000 	.word	0x200a0000
 8002330:	00000400 	.word	0x00000400
 8002334:	20000434 	.word	0x20000434
 8002338:	20000698 	.word	0x20000698

0800233c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002340:	4b06      	ldr	r3, [pc, #24]	@ (800235c <SystemInit+0x20>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002346:	4a05      	ldr	r2, [pc, #20]	@ (800235c <SystemInit+0x20>)
 8002348:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800234c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002360:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002398 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002364:	f7ff ffea 	bl	800233c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002368:	480c      	ldr	r0, [pc, #48]	@ (800239c <LoopForever+0x6>)
  ldr r1, =_edata
 800236a:	490d      	ldr	r1, [pc, #52]	@ (80023a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800236c:	4a0d      	ldr	r2, [pc, #52]	@ (80023a4 <LoopForever+0xe>)
  movs r3, #0
 800236e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002370:	e002      	b.n	8002378 <LoopCopyDataInit>

08002372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002376:	3304      	adds	r3, #4

08002378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800237c:	d3f9      	bcc.n	8002372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800237e:	4a0a      	ldr	r2, [pc, #40]	@ (80023a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002380:	4c0a      	ldr	r4, [pc, #40]	@ (80023ac <LoopForever+0x16>)
  movs r3, #0
 8002382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002384:	e001      	b.n	800238a <LoopFillZerobss>

08002386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002388:	3204      	adds	r2, #4

0800238a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800238c:	d3fb      	bcc.n	8002386 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800238e:	f004 f83b 	bl	8006408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002392:	f7ff feff 	bl	8002194 <main>

08002396 <LoopForever>:

LoopForever:
    b LoopForever
 8002396:	e7fe      	b.n	8002396 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002398:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800239c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a0:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 80023a4:	08008c04 	.word	0x08008c04
  ldr r2, =_sbss
 80023a8:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 80023ac:	20000694 	.word	0x20000694

080023b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023b0:	e7fe      	b.n	80023b0 <ADC1_IRQHandler>
	...

080023b4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	@ 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80023bc:	4b27      	ldr	r3, [pc, #156]	@ (800245c <I2Cx_MspInit+0xa8>)
 80023be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c0:	4a26      	ldr	r2, [pc, #152]	@ (800245c <I2Cx_MspInit+0xa8>)
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c8:	4b24      	ldr	r3, [pc, #144]	@ (800245c <I2Cx_MspInit+0xa8>)
 80023ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80023d4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80023d8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80023da:	2312      	movs	r3, #18
 80023dc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80023de:	2301      	movs	r3, #1
 80023e0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e2:	2303      	movs	r3, #3
 80023e4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80023e6:	2304      	movs	r3, #4
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	4619      	mov	r1, r3
 80023f0:	481b      	ldr	r0, [pc, #108]	@ (8002460 <I2Cx_MspInit+0xac>)
 80023f2:	f001 f9ab 	bl	800374c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	4818      	ldr	r0, [pc, #96]	@ (8002460 <I2Cx_MspInit+0xac>)
 80023fe:	f001 f9a5 	bl	800374c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002402:	4b16      	ldr	r3, [pc, #88]	@ (800245c <I2Cx_MspInit+0xa8>)
 8002404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002406:	4a15      	ldr	r2, [pc, #84]	@ (800245c <I2Cx_MspInit+0xa8>)
 8002408:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800240c:	6593      	str	r3, [r2, #88]	@ 0x58
 800240e:	4b13      	ldr	r3, [pc, #76]	@ (800245c <I2Cx_MspInit+0xa8>)
 8002410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800241a:	4b10      	ldr	r3, [pc, #64]	@ (800245c <I2Cx_MspInit+0xa8>)
 800241c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800241e:	4a0f      	ldr	r2, [pc, #60]	@ (800245c <I2Cx_MspInit+0xa8>)
 8002420:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002424:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002426:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <I2Cx_MspInit+0xa8>)
 8002428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800242a:	4a0c      	ldr	r2, [pc, #48]	@ (800245c <I2Cx_MspInit+0xa8>)
 800242c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002430:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	210f      	movs	r1, #15
 8002436:	2021      	movs	r0, #33	@ 0x21
 8002438:	f001 f951 	bl	80036de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800243c:	2021      	movs	r0, #33	@ 0x21
 800243e:	f001 f96a 	bl	8003716 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002442:	2200      	movs	r2, #0
 8002444:	210f      	movs	r1, #15
 8002446:	2022      	movs	r0, #34	@ 0x22
 8002448:	f001 f949 	bl	80036de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800244c:	2022      	movs	r0, #34	@ 0x22
 800244e:	f001 f962 	bl	8003716 <HAL_NVIC_EnableIRQ>
}
 8002452:	bf00      	nop
 8002454:	3728      	adds	r7, #40	@ 0x28
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000
 8002460:	48000400 	.word	0x48000400

08002464 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a12      	ldr	r2, [pc, #72]	@ (80024b8 <I2Cx_Init+0x54>)
 8002470:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a11      	ldr	r2, [pc, #68]	@ (80024bc <I2Cx_Init+0x58>)
 8002476:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff89 	bl	80023b4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f001 fb2e 	bl	8003b04 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80024a8:	2100      	movs	r1, #0
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f002 f8ee 	bl	800468c <HAL_I2CEx_ConfigAnalogFilter>
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40005800 	.word	0x40005800
 80024bc:	00702681 	.word	0x00702681

080024c0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	@ 0x28
 80024c4:	af04      	add	r7, sp, #16
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	4608      	mov	r0, r1
 80024ca:	4611      	mov	r1, r2
 80024cc:	461a      	mov	r2, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	72fb      	strb	r3, [r7, #11]
 80024d2:	460b      	mov	r3, r1
 80024d4:	813b      	strh	r3, [r7, #8]
 80024d6:	4613      	mov	r3, r2
 80024d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80024de:	7afb      	ldrb	r3, [r7, #11]
 80024e0:	b299      	uxth	r1, r3
 80024e2:	88f8      	ldrh	r0, [r7, #6]
 80024e4:	893a      	ldrh	r2, [r7, #8]
 80024e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024ea:	9302      	str	r3, [sp, #8]
 80024ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	4603      	mov	r3, r0
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f001 fcf6 	bl	8003ee8 <HAL_I2C_Mem_Read>
 80024fc:	4603      	mov	r3, r0
 80024fe:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002500:	7dfb      	ldrb	r3, [r7, #23]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002506:	7afb      	ldrb	r3, [r7, #11]
 8002508:	4619      	mov	r1, r3
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f832 	bl	8002574 <I2Cx_Error>
  }
  return status;
 8002510:	7dfb      	ldrb	r3, [r7, #23]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b08a      	sub	sp, #40	@ 0x28
 800251e:	af04      	add	r7, sp, #16
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	4608      	mov	r0, r1
 8002524:	4611      	mov	r1, r2
 8002526:	461a      	mov	r2, r3
 8002528:	4603      	mov	r3, r0
 800252a:	72fb      	strb	r3, [r7, #11]
 800252c:	460b      	mov	r3, r1
 800252e:	813b      	strh	r3, [r7, #8]
 8002530:	4613      	mov	r3, r2
 8002532:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002538:	7afb      	ldrb	r3, [r7, #11]
 800253a:	b299      	uxth	r1, r3
 800253c:	88f8      	ldrh	r0, [r7, #6]
 800253e:	893a      	ldrh	r2, [r7, #8]
 8002540:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002544:	9302      	str	r3, [sp, #8]
 8002546:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	4603      	mov	r3, r0
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f001 fbb5 	bl	8003cc0 <HAL_I2C_Mem_Write>
 8002556:	4603      	mov	r3, r0
 8002558:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800255a:	7dfb      	ldrb	r3, [r7, #23]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d004      	beq.n	800256a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002560:	7afb      	ldrb	r3, [r7, #11]
 8002562:	4619      	mov	r1, r3
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f805 	bl	8002574 <I2Cx_Error>
  }
  return status;
 800256a:	7dfb      	ldrb	r3, [r7, #23]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f001 fb5a 	bl	8003c3a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ff6c 	bl	8002464 <I2Cx_Init>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002598:	4802      	ldr	r0, [pc, #8]	@ (80025a4 <SENSOR_IO_Init+0x10>)
 800259a:	f7ff ff63 	bl	8002464 <I2Cx_Init>
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000438 	.word	0x20000438

080025a8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
 80025b2:	460b      	mov	r3, r1
 80025b4:	71bb      	strb	r3, [r7, #6]
 80025b6:	4613      	mov	r3, r2
 80025b8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80025ba:	79bb      	ldrb	r3, [r7, #6]
 80025bc:	b29a      	uxth	r2, r3
 80025be:	79f9      	ldrb	r1, [r7, #7]
 80025c0:	2301      	movs	r3, #1
 80025c2:	9301      	str	r3, [sp, #4]
 80025c4:	1d7b      	adds	r3, r7, #5
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2301      	movs	r3, #1
 80025ca:	4803      	ldr	r0, [pc, #12]	@ (80025d8 <SENSOR_IO_Write+0x30>)
 80025cc:	f7ff ffa5 	bl	800251a <I2Cx_WriteMultiple>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000438 	.word	0x20000438

080025dc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	4603      	mov	r3, r0
 80025e4:	460a      	mov	r2, r1
 80025e6:	71fb      	strb	r3, [r7, #7]
 80025e8:	4613      	mov	r3, r2
 80025ea:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80025f0:	79bb      	ldrb	r3, [r7, #6]
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	79f9      	ldrb	r1, [r7, #7]
 80025f6:	2301      	movs	r3, #1
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	f107 030f 	add.w	r3, r7, #15
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	4804      	ldr	r0, [pc, #16]	@ (8002614 <SENSOR_IO_Read+0x38>)
 8002604:	f7ff ff5c 	bl	80024c0 <I2Cx_ReadMultiple>

  return read_value;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000438 	.word	0x20000438

08002618 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af02      	add	r7, sp, #8
 800261e:	603a      	str	r2, [r7, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
 8002626:	460b      	mov	r3, r1
 8002628:	71bb      	strb	r3, [r7, #6]
 800262a:	4613      	mov	r3, r2
 800262c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800262e:	79bb      	ldrb	r3, [r7, #6]
 8002630:	b29a      	uxth	r2, r3
 8002632:	79f9      	ldrb	r1, [r7, #7]
 8002634:	88bb      	ldrh	r3, [r7, #4]
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	2301      	movs	r3, #1
 800263e:	4804      	ldr	r0, [pc, #16]	@ (8002650 <SENSOR_IO_ReadMultiple+0x38>)
 8002640:	f7ff ff3e 	bl	80024c0 <I2Cx_ReadMultiple>
 8002644:	4603      	mov	r3, r0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000438 	.word	0x20000438

08002654 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800265e:	2300      	movs	r3, #0
 8002660:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002662:	4b1a      	ldr	r3, [pc, #104]	@ (80026cc <BSP_ACCELERO_Init+0x78>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	4798      	blx	r3
 8002668:	4603      	mov	r3, r0
 800266a:	2b6a      	cmp	r3, #106	@ 0x6a
 800266c:	d002      	beq.n	8002674 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	73fb      	strb	r3, [r7, #15]
 8002672:	e025      	b.n	80026c0 <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002674:	4b16      	ldr	r3, [pc, #88]	@ (80026d0 <BSP_ACCELERO_Init+0x7c>)
 8002676:	4a15      	ldr	r2, [pc, #84]	@ (80026cc <BSP_ACCELERO_Init+0x78>)
 8002678:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800267a:	2330      	movs	r3, #48	@ 0x30
 800267c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8002682:	2300      	movs	r3, #0
 8002684:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002686:	2340      	movs	r3, #64	@ 0x40
 8002688:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8002692:	797a      	ldrb	r2, [r7, #5]
 8002694:	7abb      	ldrb	r3, [r7, #10]
 8002696:	4313      	orrs	r3, r2
 8002698:	b2db      	uxtb	r3, r3
 800269a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800269c:	7a3b      	ldrb	r3, [r7, #8]
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	b21b      	sxth	r3, r3
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	b21a      	sxth	r2, r3
 80026aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	b21b      	sxth	r3, r3
 80026b2:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80026b4:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <BSP_ACCELERO_Init+0x7c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	89ba      	ldrh	r2, [r7, #12]
 80026bc:	4610      	mov	r0, r2
 80026be:	4798      	blx	r3
  }  

  return ret;
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	2000008c 	.word	0x2000008c
 80026d0:	2000048c 	.word	0x2000048c

080026d4 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80026dc:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80026e4:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d004      	beq.n	80026f8 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80026ee:	4b04      	ldr	r3, [pc, #16]	@ (8002700 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	4798      	blx	r3
    }
  }
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	2000048c 	.word	0x2000048c

08002704 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800270e:	2300      	movs	r3, #0
 8002710:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002712:	4b1c      	ldr	r3, [pc, #112]	@ (8002784 <BSP_GYRO_Init+0x80>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	4798      	blx	r3
 8002718:	4603      	mov	r3, r0
 800271a:	2b6a      	cmp	r3, #106	@ 0x6a
 800271c:	d002      	beq.n	8002724 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
 8002722:	e029      	b.n	8002778 <BSP_GYRO_Init+0x74>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002724:	4b18      	ldr	r3, [pc, #96]	@ (8002788 <BSP_GYRO_Init+0x84>)
 8002726:	4a17      	ldr	r2, [pc, #92]	@ (8002784 <BSP_GYRO_Init+0x80>)
 8002728:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800272e:	2330      	movs	r3, #48	@ 0x30
 8002730:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800273a:	2340      	movs	r3, #64	@ 0x40
 800273c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_500;
 8002742:	2304      	movs	r3, #4
 8002744:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8002746:	7aba      	ldrb	r2, [r7, #10]
 8002748:	797b      	ldrb	r3, [r7, #5]
 800274a:	4313      	orrs	r3, r2
 800274c:	b2db      	uxtb	r3, r3
 800274e:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002750:	7a3b      	ldrb	r3, [r7, #8]
 8002752:	f043 0304 	orr.w	r3, r3, #4
 8002756:	b2db      	uxtb	r3, r3
 8002758:	b21b      	sxth	r3, r3
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	b21a      	sxth	r2, r3
 800275e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	b21b      	sxth	r3, r3
 8002766:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002768:	4b07      	ldr	r3, [pc, #28]	@ (8002788 <BSP_GYRO_Init+0x84>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	89ba      	ldrh	r2, [r7, #12]
 8002770:	4610      	mov	r0, r2
 8002772:	4798      	blx	r3

    ret = GYRO_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002778:	7bfb      	ldrb	r3, [r7, #15]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	200000c0 	.word	0x200000c0
 8002788:	20000490 	.word	0x20000490

0800278c <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8002794:	4b08      	ldr	r3, [pc, #32]	@ (80027b8 <BSP_GYRO_GetXYZ+0x2c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d009      	beq.n	80027b0 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 800279c:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <BSP_GYRO_GetXYZ+0x2c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d004      	beq.n	80027b0 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80027a6:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <BSP_GYRO_GetXYZ+0x2c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	4798      	blx	r3
    }
  }
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000490 	.word	0x20000490

080027bc <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80027c2:	4b0c      	ldr	r3, [pc, #48]	@ (80027f4 <BSP_HSENSOR_Init+0x38>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	20be      	movs	r0, #190	@ 0xbe
 80027c8:	4798      	blx	r3
 80027ca:	4603      	mov	r3, r0
 80027cc:	2bbc      	cmp	r3, #188	@ 0xbc
 80027ce:	d002      	beq.n	80027d6 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	e009      	b.n	80027ea <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80027d6:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <BSP_HSENSOR_Init+0x3c>)
 80027d8:	4a06      	ldr	r2, [pc, #24]	@ (80027f4 <BSP_HSENSOR_Init+0x38>)
 80027da:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <BSP_HSENSOR_Init+0x3c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	20be      	movs	r0, #190	@ 0xbe
 80027e4:	4798      	blx	r3
    ret = HSENSOR_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80027ea:	687b      	ldr	r3, [r7, #4]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000030 	.word	0x20000030
 80027f8:	20000494 	.word	0x20000494

080027fc <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002800:	4b04      	ldr	r3, [pc, #16]	@ (8002814 <BSP_HSENSOR_ReadHumidity+0x18>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	20be      	movs	r0, #190	@ 0xbe
 8002808:	4798      	blx	r3
 800280a:	eef0 7a40 	vmov.f32	s15, s0
}
 800280e:	eeb0 0a67 	vmov.f32	s0, s15
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000494 	.word	0x20000494

08002818 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8002822:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <BSP_MAGNETO_Init+0x50>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	4798      	blx	r3
 8002828:	4603      	mov	r3, r0
 800282a:	2b3d      	cmp	r3, #61	@ 0x3d
 800282c:	d002      	beq.n	8002834 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	71fb      	strb	r3, [r7, #7]
 8002832:	e013      	b.n	800285c <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8002834:	4b0d      	ldr	r3, [pc, #52]	@ (800286c <BSP_MAGNETO_Init+0x54>)
 8002836:	4a0c      	ldr	r2, [pc, #48]	@ (8002868 <BSP_MAGNETO_Init+0x50>)
 8002838:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800283a:	2358      	movs	r3, #88	@ 0x58
 800283c:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800283e:	2300      	movs	r3, #0
 8002840:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8002842:	2300      	movs	r3, #0
 8002844:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8002846:	2308      	movs	r3, #8
 8002848:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800284a:	2340      	movs	r3, #64	@ 0x40
 800284c:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800284e:	4b07      	ldr	r3, [pc, #28]	@ (800286c <BSP_MAGNETO_Init+0x54>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	463a      	mov	r2, r7
 8002856:	e892 0003 	ldmia.w	r2, {r0, r1}
 800285a:	4798      	blx	r3
  } 

  return ret;  
 800285c:	79fb      	ldrb	r3, [r7, #7]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	2000004c 	.word	0x2000004c
 800286c:	20000498 	.word	0x20000498

08002870 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8002878:	4b08      	ldr	r3, [pc, #32]	@ (800289c <BSP_MAGNETO_GetXYZ+0x2c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d009      	beq.n	8002894 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8002880:	4b06      	ldr	r3, [pc, #24]	@ (800289c <BSP_MAGNETO_GetXYZ+0x2c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	2b00      	cmp	r3, #0
 8002888:	d004      	beq.n	8002894 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800288a:	4b04      	ldr	r3, [pc, #16]	@ (800289c <BSP_MAGNETO_GetXYZ+0x2c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	4798      	blx	r3
    }
  }
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000498 	.word	0x20000498

080028a0 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80028a6:	4b0c      	ldr	r3, [pc, #48]	@ (80028d8 <BSP_PSENSOR_Init+0x38>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	20ba      	movs	r0, #186	@ 0xba
 80028ac:	4798      	blx	r3
 80028ae:	4603      	mov	r3, r0
 80028b0:	2bb1      	cmp	r3, #177	@ 0xb1
 80028b2:	d002      	beq.n	80028ba <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	e009      	b.n	80028ce <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80028ba:	4b08      	ldr	r3, [pc, #32]	@ (80028dc <BSP_PSENSOR_Init+0x3c>)
 80028bc:	4a06      	ldr	r2, [pc, #24]	@ (80028d8 <BSP_PSENSOR_Init+0x38>)
 80028be:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80028c0:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <BSP_PSENSOR_Init+0x3c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	20ba      	movs	r0, #186	@ 0xba
 80028c8:	4798      	blx	r3
    ret = PSENSOR_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80028ce:	687b      	ldr	r3, [r7, #4]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000080 	.word	0x20000080
 80028dc:	2000049c 	.word	0x2000049c

080028e0 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80028e4:	4b04      	ldr	r3, [pc, #16]	@ (80028f8 <BSP_PSENSOR_ReadPressure+0x18>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	20ba      	movs	r0, #186	@ 0xba
 80028ec:	4798      	blx	r3
 80028ee:	eef0 7a40 	vmov.f32	s15, s0
}
 80028f2:	eeb0 0a67 	vmov.f32	s0, s15
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	2000049c 	.word	0x2000049c

080028fc <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002906:	4b09      	ldr	r3, [pc, #36]	@ (800292c <BSP_TSENSOR_Init+0x30>)
 8002908:	4a09      	ldr	r2, [pc, #36]	@ (8002930 <BSP_TSENSOR_Init+0x34>)
 800290a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800290c:	f7ff fe42 	bl	8002594 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002910:	4b06      	ldr	r3, [pc, #24]	@ (800292c <BSP_TSENSOR_Init+0x30>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2100      	movs	r1, #0
 8002918:	20be      	movs	r0, #190	@ 0xbe
 800291a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002920:	79fb      	ldrb	r3, [r7, #7]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	200004a0 	.word	0x200004a0
 8002930:	2000003c 	.word	0x2000003c

08002934 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002938:	4b04      	ldr	r3, [pc, #16]	@ (800294c <BSP_TSENSOR_ReadTemp+0x18>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	20be      	movs	r0, #190	@ 0xbe
 8002940:	4798      	blx	r3
 8002942:	eef0 7a40 	vmov.f32	s15, s0
}
 8002946:	eeb0 0a67 	vmov.f32	s0, s15
 800294a:	bd80      	pop	{r7, pc}
 800294c:	200004a0 	.word	0x200004a0

08002950 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800295a:	88fb      	ldrh	r3, [r7, #6]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2120      	movs	r1, #32
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fe3b 	bl	80025dc <SENSOR_IO_Read>
 8002966:	4603      	mov	r3, r0
 8002968:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	f023 0304 	bic.w	r3, r3, #4
 8002970:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	f023 0303 	bic.w	r3, r3, #3
 8002980:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002990:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	2120      	movs	r1, #32
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fe04 	bl	80025a8 <SENSOR_IO_Write>
}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80029b2:	2300      	movs	r3, #0
 80029b4:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80029b6:	f7ff fded 	bl	8002594 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	210f      	movs	r1, #15
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fe0b 	bl	80025dc <SENSOR_IO_Read>
 80029c6:	4603      	mov	r3, r0
 80029c8:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	b2d8      	uxtb	r0, r3
 80029e2:	f107 020c 	add.w	r2, r7, #12
 80029e6:	2302      	movs	r3, #2
 80029e8:	21b0      	movs	r1, #176	@ 0xb0
 80029ea:	f7ff fe15 	bl	8002618 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80029ee:	7b3b      	ldrb	r3, [r7, #12]
 80029f0:	085b      	lsrs	r3, r3, #1
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80029f6:	7b7b      	ldrb	r3, [r7, #13]
 80029f8:	085b      	lsrs	r3, r3, #1
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	b2d8      	uxtb	r0, r3
 8002a02:	f107 020c 	add.w	r2, r7, #12
 8002a06:	2302      	movs	r3, #2
 8002a08:	21b6      	movs	r1, #182	@ 0xb6
 8002a0a:	f7ff fe05 	bl	8002618 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a0e:	7b7b      	ldrb	r3, [r7, #13]
 8002a10:	b21b      	sxth	r3, r3
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	b21a      	sxth	r2, r3
 8002a16:	7b3b      	ldrb	r3, [r7, #12]
 8002a18:	b21b      	sxth	r3, r3
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	b2d8      	uxtb	r0, r3
 8002a22:	f107 020c 	add.w	r2, r7, #12
 8002a26:	2302      	movs	r3, #2
 8002a28:	21ba      	movs	r1, #186	@ 0xba
 8002a2a:	f7ff fdf5 	bl	8002618 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a2e:	7b7b      	ldrb	r3, [r7, #13]
 8002a30:	b21b      	sxth	r3, r3
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	b21a      	sxth	r2, r3
 8002a36:	7b3b      	ldrb	r3, [r7, #12]
 8002a38:	b21b      	sxth	r3, r3
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	b2d8      	uxtb	r0, r3
 8002a42:	f107 020c 	add.w	r2, r7, #12
 8002a46:	2302      	movs	r3, #2
 8002a48:	21a8      	movs	r1, #168	@ 0xa8
 8002a4a:	f7ff fde5 	bl	8002618 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a4e:	7b7b      	ldrb	r3, [r7, #13]
 8002a50:	b21b      	sxth	r3, r3
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	b21a      	sxth	r2, r3
 8002a56:	7b3b      	ldrb	r3, [r7, #12]
 8002a58:	b21b      	sxth	r3, r3
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002a5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002a62:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	ee07 3a90 	vmov	s15, r3
 8002a6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a70:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002a74:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a82:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002a86:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002a8a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	ee07 3a90 	vmov	s15, r3
 8002a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a9c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002aa0:	ee07 3a90 	vmov	s15, r3
 8002aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aac:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8002ab0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ab4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002abc:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8002ac0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ac4:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002b08 <HTS221_H_ReadHumidity+0x134>
 8002ac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad0:	dd01      	ble.n	8002ad6 <HTS221_H_ReadHumidity+0x102>
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <HTS221_H_ReadHumidity+0x138>)
 8002ad4:	e00a      	b.n	8002aec <HTS221_H_ReadHumidity+0x118>
        : tmp_f;
 8002ad6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ada:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae2:	d502      	bpl.n	8002aea <HTS221_H_ReadHumidity+0x116>
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	e000      	b.n	8002aec <HTS221_H_ReadHumidity+0x118>
 8002aea:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002aec:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002aee:	edd7 7a04 	vldr	s15, [r7, #16]
 8002af2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002af6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002afa:	eef0 7a66 	vmov.f32	s15, s13
}
 8002afe:	eeb0 0a67 	vmov.f32	s0, s15
 8002b02:	3720      	adds	r7, #32
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	447a0000 	.word	0x447a0000
 8002b0c:	447a0000 	.word	0x447a0000

08002b10 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2120      	movs	r1, #32
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fd5a 	bl	80025dc <SENSOR_IO_Read>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	f023 0304 	bic.w	r3, r3, #4
 8002b32:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	f043 0304 	orr.w	r3, r3, #4
 8002b3a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	f023 0303 	bic.w	r3, r3, #3
 8002b42:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b52:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	2120      	movs	r1, #32
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fd23 	bl	80025a8 <SENSOR_IO_Write>
}
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b088      	sub	sp, #32
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	b2d8      	uxtb	r0, r3
 8002b78:	f107 0208 	add.w	r2, r7, #8
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	21b2      	movs	r1, #178	@ 0xb2
 8002b80:	f7ff fd4a 	bl	8002618 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2135      	movs	r1, #53	@ 0x35
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fd26 	bl	80025dc <SENSOR_IO_Read>
 8002b90:	4603      	mov	r3, r0
 8002b92:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002b94:	7ffb      	ldrb	r3, [r7, #31]
 8002b96:	b21b      	sxth	r3, r3
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	b21b      	sxth	r3, r3
 8002b9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ba0:	b21a      	sxth	r2, r3
 8002ba2:	7a3b      	ldrb	r3, [r7, #8]
 8002ba4:	b21b      	sxth	r3, r3
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002baa:	7ffb      	ldrb	r3, [r7, #31]
 8002bac:	b21b      	sxth	r3, r3
 8002bae:	019b      	lsls	r3, r3, #6
 8002bb0:	b21b      	sxth	r3, r3
 8002bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bb6:	b21a      	sxth	r2, r3
 8002bb8:	7a7b      	ldrb	r3, [r7, #9]
 8002bba:	b21b      	sxth	r3, r3
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002bc0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002bc4:	10db      	asrs	r3, r3, #3
 8002bc6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002bc8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002bcc:	10db      	asrs	r3, r3, #3
 8002bce:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	b2d8      	uxtb	r0, r3
 8002bd4:	f107 0208 	add.w	r2, r7, #8
 8002bd8:	2304      	movs	r3, #4
 8002bda:	21bc      	movs	r1, #188	@ 0xbc
 8002bdc:	f7ff fd1c 	bl	8002618 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002be0:	7a7b      	ldrb	r3, [r7, #9]
 8002be2:	b21b      	sxth	r3, r3
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	b21a      	sxth	r2, r3
 8002be8:	7a3b      	ldrb	r3, [r7, #8]
 8002bea:	b21b      	sxth	r3, r3
 8002bec:	4313      	orrs	r3, r2
 8002bee:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002bf0:	7afb      	ldrb	r3, [r7, #11]
 8002bf2:	b21b      	sxth	r3, r3
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	b21a      	sxth	r2, r3
 8002bf8:	7abb      	ldrb	r3, [r7, #10]
 8002bfa:	b21b      	sxth	r3, r3
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	b2d8      	uxtb	r0, r3
 8002c04:	f107 0208 	add.w	r2, r7, #8
 8002c08:	2302      	movs	r3, #2
 8002c0a:	21aa      	movs	r1, #170	@ 0xaa
 8002c0c:	f7ff fd04 	bl	8002618 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002c10:	7a7b      	ldrb	r3, [r7, #9]
 8002c12:	b21b      	sxth	r3, r3
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	b21a      	sxth	r2, r3
 8002c18:	7a3b      	ldrb	r3, [r7, #8]
 8002c1a:	b21b      	sxth	r3, r3
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002c20:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002c24:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002c36:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	ee07 3a90 	vmov	s15, r3
 8002c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c44:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c48:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	ee07 3a90 	vmov	s15, r3
 8002c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c5e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6e:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	ee07 3a90 	vmov	s15, r3
}
 8002c78:	eeb0 0a67 	vmov.f32	s0, s15
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	463b      	mov	r3, r7
 8002c8a:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002c8e:	783b      	ldrb	r3, [r7, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	2120      	movs	r1, #32
 8002c94:	203c      	movs	r0, #60	@ 0x3c
 8002c96:	f7ff fc87 	bl	80025a8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002c9a:	787b      	ldrb	r3, [r7, #1]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2121      	movs	r1, #33	@ 0x21
 8002ca0:	203c      	movs	r0, #60	@ 0x3c
 8002ca2:	f7ff fc81 	bl	80025a8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002ca6:	78bb      	ldrb	r3, [r7, #2]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2122      	movs	r1, #34	@ 0x22
 8002cac:	203c      	movs	r0, #60	@ 0x3c
 8002cae:	f7ff fc7b 	bl	80025a8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2123      	movs	r1, #35	@ 0x23
 8002cb8:	203c      	movs	r0, #60	@ 0x3c
 8002cba:	f7ff fc75 	bl	80025a8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002cbe:	793b      	ldrb	r3, [r7, #4]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2124      	movs	r1, #36	@ 0x24
 8002cc4:	203c      	movs	r0, #60	@ 0x3c
 8002cc6:	f7ff fc6f 	bl	80025a8 <SENSOR_IO_Write>
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002cdc:	2122      	movs	r1, #34	@ 0x22
 8002cde:	203c      	movs	r0, #60	@ 0x3c
 8002ce0:	f7ff fc7c 	bl	80025dc <SENSOR_IO_Read>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	f043 0303 	orr.w	r3, r3, #3
 8002cf6:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2122      	movs	r1, #34	@ 0x22
 8002cfe:	203c      	movs	r0, #60	@ 0x3c
 8002d00:	f7ff fc52 	bl	80025a8 <SENSOR_IO_Write>
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002d10:	f7ff fc40 	bl	8002594 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002d14:	210f      	movs	r1, #15
 8002d16:	203c      	movs	r0, #60	@ 0x3c
 8002d18:	f7ff fc60 	bl	80025dc <SENSOR_IO_Read>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	4603      	mov	r3, r0
 8002d2a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002d30:	2122      	movs	r1, #34	@ 0x22
 8002d32:	203c      	movs	r0, #60	@ 0x3c
 8002d34:	f7ff fc52 	bl	80025dc <SENSOR_IO_Read>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	f023 0320 	bic.w	r3, r3, #32
 8002d42:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	f043 0320 	orr.w	r3, r3, #32
 8002d50:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	461a      	mov	r2, r3
 8002d56:	2122      	movs	r1, #34	@ 0x22
 8002d58:	203c      	movs	r0, #60	@ 0x3c
 8002d5a:	f7ff fc25 	bl	80025a8 <SENSOR_IO_Write>
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002d7e:	2121      	movs	r1, #33	@ 0x21
 8002d80:	203c      	movs	r0, #60	@ 0x3c
 8002d82:	f7ff fc2b 	bl	80025dc <SENSOR_IO_Read>
 8002d86:	4603      	mov	r3, r0
 8002d88:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002d8a:	f107 0208 	add.w	r2, r7, #8
 8002d8e:	2306      	movs	r3, #6
 8002d90:	21a8      	movs	r1, #168	@ 0xa8
 8002d92:	203c      	movs	r0, #60	@ 0x3c
 8002d94:	f7ff fc40 	bl	8002618 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002d98:	2300      	movs	r3, #0
 8002d9a:	77fb      	strb	r3, [r7, #31]
 8002d9c:	e01a      	b.n	8002dd4 <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002d9e:	7ffb      	ldrb	r3, [r7, #31]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	3301      	adds	r3, #1
 8002da4:	3320      	adds	r3, #32
 8002da6:	443b      	add	r3, r7
 8002da8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	7ffa      	ldrb	r2, [r7, #31]
 8002db2:	0052      	lsls	r2, r2, #1
 8002db4:	3220      	adds	r2, #32
 8002db6:	443a      	add	r2, r7
 8002db8:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	7ffb      	ldrb	r3, [r7, #31]
 8002dc2:	b212      	sxth	r2, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	3320      	adds	r3, #32
 8002dc8:	443b      	add	r3, r7
 8002dca:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002dce:	7ffb      	ldrb	r3, [r7, #31]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	77fb      	strb	r3, [r7, #31]
 8002dd4:	7ffb      	ldrb	r3, [r7, #31]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d9e1      	bls.n	8002d9e <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002dda:	7dfb      	ldrb	r3, [r7, #23]
 8002ddc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8002de0:	2b60      	cmp	r3, #96	@ 0x60
 8002de2:	d013      	beq.n	8002e0c <LIS3MDL_MagReadXYZ+0xa4>
 8002de4:	2b60      	cmp	r3, #96	@ 0x60
 8002de6:	dc14      	bgt.n	8002e12 <LIS3MDL_MagReadXYZ+0xaa>
 8002de8:	2b40      	cmp	r3, #64	@ 0x40
 8002dea:	d00c      	beq.n	8002e06 <LIS3MDL_MagReadXYZ+0x9e>
 8002dec:	2b40      	cmp	r3, #64	@ 0x40
 8002dee:	dc10      	bgt.n	8002e12 <LIS3MDL_MagReadXYZ+0xaa>
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <LIS3MDL_MagReadXYZ+0x92>
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	d003      	beq.n	8002e00 <LIS3MDL_MagReadXYZ+0x98>
 8002df8:	e00b      	b.n	8002e12 <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002dfa:	4b19      	ldr	r3, [pc, #100]	@ (8002e60 <LIS3MDL_MagReadXYZ+0xf8>)
 8002dfc:	61bb      	str	r3, [r7, #24]
    break;
 8002dfe:	e008      	b.n	8002e12 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002e00:	4b18      	ldr	r3, [pc, #96]	@ (8002e64 <LIS3MDL_MagReadXYZ+0xfc>)
 8002e02:	61bb      	str	r3, [r7, #24]
    break;
 8002e04:	e005      	b.n	8002e12 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002e06:	4b18      	ldr	r3, [pc, #96]	@ (8002e68 <LIS3MDL_MagReadXYZ+0x100>)
 8002e08:	61bb      	str	r3, [r7, #24]
    break;
 8002e0a:	e002      	b.n	8002e12 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002e0c:	4b17      	ldr	r3, [pc, #92]	@ (8002e6c <LIS3MDL_MagReadXYZ+0x104>)
 8002e0e:	61bb      	str	r3, [r7, #24]
    break;    
 8002e10:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	77fb      	strb	r3, [r7, #31]
 8002e16:	e01a      	b.n	8002e4e <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002e18:	7ffb      	ldrb	r3, [r7, #31]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	3320      	adds	r3, #32
 8002e1e:	443b      	add	r3, r7
 8002e20:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002e24:	ee07 3a90 	vmov	s15, r3
 8002e28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e34:	7ffb      	ldrb	r3, [r7, #31]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e40:	ee17 2a90 	vmov	r2, s15
 8002e44:	b212      	sxth	r2, r2
 8002e46:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002e48:	7ffb      	ldrb	r3, [r7, #31]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	77fb      	strb	r3, [r7, #31]
 8002e4e:	7ffb      	ldrb	r3, [r7, #31]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d9e1      	bls.n	8002e18 <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	3e0f5c29 	.word	0x3e0f5c29
 8002e64:	3e947ae1 	.word	0x3e947ae1
 8002e68:	3edc28f6 	.word	0x3edc28f6
 8002e6c:	3f147ae1 	.word	0x3f147ae1

08002e70 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 f879 	bl	8002f74 <LPS22HB_Init>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002e94:	2300      	movs	r3, #0
 8002e96:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002e98:	f7ff fb7c 	bl	8002594 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	210f      	movs	r1, #15
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fb9a 	bl	80025dc <SENSOR_IO_Read>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	74fb      	strb	r3, [r7, #19]
 8002eca:	e013      	b.n	8002ef4 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	3328      	adds	r3, #40	@ 0x28
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	7cfc      	ldrb	r4, [r7, #19]
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4610      	mov	r0, r2
 8002edc:	f7ff fb7e 	bl	80025dc <SENSOR_IO_Read>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f104 0318 	add.w	r3, r4, #24
 8002ee8:	443b      	add	r3, r7
 8002eea:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002eee:	7cfb      	ldrb	r3, [r7, #19]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	74fb      	strb	r3, [r7, #19]
 8002ef4:	7cfb      	ldrb	r3, [r7, #19]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d9e8      	bls.n	8002ecc <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	74fb      	strb	r3, [r7, #19]
 8002efe:	e00f      	b.n	8002f20 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	3318      	adds	r3, #24
 8002f04:	443b      	add	r3, r7
 8002f06:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	7cfb      	ldrb	r3, [r7, #19]
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002f1a:	7cfb      	ldrb	r3, [r7, #19]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	74fb      	strb	r3, [r7, #19]
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d9ec      	bls.n	8002f00 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f36:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2264      	movs	r2, #100	@ 0x64
 8002f40:	fb02 f303 	mul.w	r3, r2, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	da01      	bge.n	8002f4c <LPS22HB_P_ReadPressure+0x94>
 8002f48:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002f4c:	131b      	asrs	r3, r3, #12
 8002f4e:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	ee07 3a90 	vmov	s15, r3
 8002f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f5a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002f70 <LPS22HB_P_ReadPressure+0xb8>
 8002f5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f62:	eef0 7a66 	vmov.f32	s15, s13
}
 8002f66:	eeb0 0a67 	vmov.f32	s0, s15
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd90      	pop	{r4, r7, pc}
 8002f70:	42c80000 	.word	0x42c80000

08002f74 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	211a      	movs	r1, #26
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fb29 	bl	80025dc <SENSOR_IO_Read>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	211a      	movs	r1, #26
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fafe 	bl	80025a8 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2110      	movs	r1, #16
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fb12 	bl	80025dc <SENSOR_IO_Read>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fc2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002fca:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	f023 0302 	bic.w	r3, r3, #2
 8002fd2:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	f043 0302 	orr.w	r3, r3, #2
 8002fda:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	2110      	movs	r1, #16
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fadf 	bl	80025a8 <SENSOR_IO_Write>
}  
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003000:	2110      	movs	r1, #16
 8003002:	20d4      	movs	r0, #212	@ 0xd4
 8003004:	f7ff faea 	bl	80025dc <SENSOR_IO_Read>
 8003008:	4603      	mov	r3, r0
 800300a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003010:	7bbb      	ldrb	r3, [r7, #14]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003018:	7bba      	ldrb	r2, [r7, #14]
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	4313      	orrs	r3, r2
 800301e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003020:	7bbb      	ldrb	r3, [r7, #14]
 8003022:	461a      	mov	r2, r3
 8003024:	2110      	movs	r1, #16
 8003026:	20d4      	movs	r0, #212	@ 0xd4
 8003028:	f7ff fabe 	bl	80025a8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800302c:	2112      	movs	r1, #18
 800302e:	20d4      	movs	r0, #212	@ 0xd4
 8003030:	f7ff fad4 	bl	80025dc <SENSOR_IO_Read>
 8003034:	4603      	mov	r3, r0
 8003036:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	0a1b      	lsrs	r3, r3, #8
 800303c:	b29b      	uxth	r3, r3
 800303e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003040:	7bbb      	ldrb	r3, [r7, #14]
 8003042:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8003046:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003048:	7bba      	ldrb	r2, [r7, #14]
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	4313      	orrs	r3, r2
 800304e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003050:	7bbb      	ldrb	r3, [r7, #14]
 8003052:	461a      	mov	r2, r3
 8003054:	2112      	movs	r1, #18
 8003056:	20d4      	movs	r0, #212	@ 0xd4
 8003058:	f7ff faa6 	bl	80025a8 <SENSOR_IO_Write>
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800306a:	2300      	movs	r3, #0
 800306c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800306e:	2110      	movs	r1, #16
 8003070:	20d4      	movs	r0, #212	@ 0xd4
 8003072:	f7ff fab3 	bl	80025dc <SENSOR_IO_Read>
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	461a      	mov	r2, r3
 8003086:	2110      	movs	r1, #16
 8003088:	20d4      	movs	r0, #212	@ 0xd4
 800308a:	f7ff fa8d 	bl	80025a8 <SENSOR_IO_Write>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8003096:	b580      	push	{r7, lr}
 8003098:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800309a:	f7ff fa7b 	bl	8002594 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800309e:	210f      	movs	r1, #15
 80030a0:	20d4      	movs	r0, #212	@ 0xd4
 80030a2:	f7ff fa9b 	bl	80025dc <SENSOR_IO_Read>
 80030a6:	4603      	mov	r3, r0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	bd80      	pop	{r7, pc}

080030ac <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80030ba:	2115      	movs	r1, #21
 80030bc:	20d4      	movs	r0, #212	@ 0xd4
 80030be:	f7ff fa8d 	bl	80025dc <SENSOR_IO_Read>
 80030c2:	4603      	mov	r3, r0
 80030c4:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
 80030c8:	f023 0310 	bic.w	r3, r3, #16
 80030cc:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	f043 0310 	orr.w	r3, r3, #16
 80030da:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	461a      	mov	r2, r3
 80030e0:	2115      	movs	r1, #21
 80030e2:	20d4      	movs	r0, #212	@ 0xd4
 80030e4:	f7ff fa60 	bl	80025a8 <SENSOR_IO_Write>
}
 80030e8:	bf00      	nop
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003106:	2110      	movs	r1, #16
 8003108:	20d4      	movs	r0, #212	@ 0xd4
 800310a:	f7ff fa67 	bl	80025dc <SENSOR_IO_Read>
 800310e:	4603      	mov	r3, r0
 8003110:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003112:	f107 0208 	add.w	r2, r7, #8
 8003116:	2306      	movs	r3, #6
 8003118:	2128      	movs	r1, #40	@ 0x28
 800311a:	20d4      	movs	r0, #212	@ 0xd4
 800311c:	f7ff fa7c 	bl	8002618 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003120:	2300      	movs	r3, #0
 8003122:	77fb      	strb	r3, [r7, #31]
 8003124:	e01a      	b.n	800315c <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003126:	7ffb      	ldrb	r3, [r7, #31]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	3301      	adds	r3, #1
 800312c:	3320      	adds	r3, #32
 800312e:	443b      	add	r3, r7
 8003130:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	b29b      	uxth	r3, r3
 8003138:	7ffa      	ldrb	r2, [r7, #31]
 800313a:	0052      	lsls	r2, r2, #1
 800313c:	3220      	adds	r2, #32
 800313e:	443a      	add	r2, r7
 8003140:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003144:	4413      	add	r3, r2
 8003146:	b29a      	uxth	r2, r3
 8003148:	7ffb      	ldrb	r3, [r7, #31]
 800314a:	b212      	sxth	r2, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	3320      	adds	r3, #32
 8003150:	443b      	add	r3, r7
 8003152:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003156:	7ffb      	ldrb	r3, [r7, #31]
 8003158:	3301      	adds	r3, #1
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	7ffb      	ldrb	r3, [r7, #31]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d9e1      	bls.n	8003126 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b0c      	cmp	r3, #12
 800316a:	d829      	bhi.n	80031c0 <LSM6DSL_AccReadXYZ+0xd0>
 800316c:	a201      	add	r2, pc, #4	@ (adr r2, 8003174 <LSM6DSL_AccReadXYZ+0x84>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	080031a9 	.word	0x080031a9
 8003178:	080031c1 	.word	0x080031c1
 800317c:	080031c1 	.word	0x080031c1
 8003180:	080031c1 	.word	0x080031c1
 8003184:	080031bb 	.word	0x080031bb
 8003188:	080031c1 	.word	0x080031c1
 800318c:	080031c1 	.word	0x080031c1
 8003190:	080031c1 	.word	0x080031c1
 8003194:	080031af 	.word	0x080031af
 8003198:	080031c1 	.word	0x080031c1
 800319c:	080031c1 	.word	0x080031c1
 80031a0:	080031c1 	.word	0x080031c1
 80031a4:	080031b5 	.word	0x080031b5
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80031a8:	4b18      	ldr	r3, [pc, #96]	@ (800320c <LSM6DSL_AccReadXYZ+0x11c>)
 80031aa:	61bb      	str	r3, [r7, #24]
    break;
 80031ac:	e008      	b.n	80031c0 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80031ae:	4b18      	ldr	r3, [pc, #96]	@ (8003210 <LSM6DSL_AccReadXYZ+0x120>)
 80031b0:	61bb      	str	r3, [r7, #24]
    break;
 80031b2:	e005      	b.n	80031c0 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80031b4:	4b17      	ldr	r3, [pc, #92]	@ (8003214 <LSM6DSL_AccReadXYZ+0x124>)
 80031b6:	61bb      	str	r3, [r7, #24]
    break;
 80031b8:	e002      	b.n	80031c0 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80031ba:	4b17      	ldr	r3, [pc, #92]	@ (8003218 <LSM6DSL_AccReadXYZ+0x128>)
 80031bc:	61bb      	str	r3, [r7, #24]
    break;    
 80031be:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80031c0:	2300      	movs	r3, #0
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e01a      	b.n	80031fc <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80031c6:	7ffb      	ldrb	r3, [r7, #31]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	3320      	adds	r3, #32
 80031cc:	443b      	add	r3, r7
 80031ce:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031da:	edd7 7a06 	vldr	s15, [r7, #24]
 80031de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e2:	7ffb      	ldrb	r3, [r7, #31]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031ee:	ee17 2a90 	vmov	r2, s15
 80031f2:	b212      	sxth	r2, r2
 80031f4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80031f6:	7ffb      	ldrb	r3, [r7, #31]
 80031f8:	3301      	adds	r3, #1
 80031fa:	77fb      	strb	r3, [r7, #31]
 80031fc:	7ffb      	ldrb	r3, [r7, #31]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d9e1      	bls.n	80031c6 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8003202:	bf00      	nop
 8003204:	bf00      	nop
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	3d79db23 	.word	0x3d79db23
 8003210:	3df9db23 	.word	0x3df9db23
 8003214:	3e79db23 	.word	0x3e79db23
 8003218:	3ef9db23 	.word	0x3ef9db23

0800321c <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003226:	2300      	movs	r3, #0
 8003228:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800322a:	2111      	movs	r1, #17
 800322c:	20d4      	movs	r0, #212	@ 0xd4
 800322e:	f7ff f9d5 	bl	80025dc <SENSOR_IO_Read>
 8003232:	4603      	mov	r3, r0
 8003234:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800323a:	7bbb      	ldrb	r3, [r7, #14]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003242:	7bba      	ldrb	r2, [r7, #14]
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	4313      	orrs	r3, r2
 8003248:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800324a:	7bbb      	ldrb	r3, [r7, #14]
 800324c:	461a      	mov	r2, r3
 800324e:	2111      	movs	r1, #17
 8003250:	20d4      	movs	r0, #212	@ 0xd4
 8003252:	f7ff f9a9 	bl	80025a8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003256:	2112      	movs	r1, #18
 8003258:	20d4      	movs	r0, #212	@ 0xd4
 800325a:	f7ff f9bf 	bl	80025dc <SENSOR_IO_Read>
 800325e:	4603      	mov	r3, r0
 8003260:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	b29b      	uxth	r3, r3
 8003268:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800326a:	7bbb      	ldrb	r3, [r7, #14]
 800326c:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8003270:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003272:	7bba      	ldrb	r2, [r7, #14]
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	4313      	orrs	r3, r2
 8003278:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800327a:	7bbb      	ldrb	r3, [r7, #14]
 800327c:	461a      	mov	r2, r3
 800327e:	2112      	movs	r1, #18
 8003280:	20d4      	movs	r0, #212	@ 0xd4
 8003282:	f7ff f991 	bl	80025a8 <SENSOR_IO_Write>
}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003294:	2300      	movs	r3, #0
 8003296:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003298:	2111      	movs	r1, #17
 800329a:	20d4      	movs	r0, #212	@ 0xd4
 800329c:	f7ff f99e 	bl	80025dc <SENSOR_IO_Read>
 80032a0:	4603      	mov	r3, r0
 80032a2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	461a      	mov	r2, r3
 80032b0:	2111      	movs	r1, #17
 80032b2:	20d4      	movs	r0, #212	@ 0xd4
 80032b4:	f7ff f978 	bl	80025a8 <SENSOR_IO_Write>
}
 80032b8:	bf00      	nop
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80032c4:	f7ff f966 	bl	8002594 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80032c8:	210f      	movs	r1, #15
 80032ca:	20d4      	movs	r0, #212	@ 0xd4
 80032cc:	f7ff f986 	bl	80025dc <SENSOR_IO_Read>
 80032d0:	4603      	mov	r3, r0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4603      	mov	r3, r0
 80032de:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80032e0:	2300      	movs	r3, #0
 80032e2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80032e4:	2116      	movs	r1, #22
 80032e6:	20d4      	movs	r0, #212	@ 0xd4
 80032e8:	f7ff f978 	bl	80025dc <SENSOR_IO_Read>
 80032ec:	4603      	mov	r3, r0
 80032ee:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032f6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003304:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	461a      	mov	r2, r3
 800330a:	2116      	movs	r1, #22
 800330c:	20d4      	movs	r0, #212	@ 0xd4
 800330e:	f7ff f94b 	bl	80025a8 <SENSOR_IO_Write>
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8003324:	2300      	movs	r3, #0
 8003326:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003332:	2111      	movs	r1, #17
 8003334:	20d4      	movs	r0, #212	@ 0xd4
 8003336:	f7ff f951 	bl	80025dc <SENSOR_IO_Read>
 800333a:	4603      	mov	r3, r0
 800333c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800333e:	f107 0208 	add.w	r2, r7, #8
 8003342:	2306      	movs	r3, #6
 8003344:	2122      	movs	r1, #34	@ 0x22
 8003346:	20d4      	movs	r0, #212	@ 0xd4
 8003348:	f7ff f966 	bl	8002618 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800334c:	2300      	movs	r3, #0
 800334e:	77fb      	strb	r3, [r7, #31]
 8003350:	e01a      	b.n	8003388 <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003352:	7ffb      	ldrb	r3, [r7, #31]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	3301      	adds	r3, #1
 8003358:	3320      	adds	r3, #32
 800335a:	443b      	add	r3, r7
 800335c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	b29b      	uxth	r3, r3
 8003364:	7ffa      	ldrb	r2, [r7, #31]
 8003366:	0052      	lsls	r2, r2, #1
 8003368:	3220      	adds	r2, #32
 800336a:	443a      	add	r2, r7
 800336c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003370:	4413      	add	r3, r2
 8003372:	b29a      	uxth	r2, r3
 8003374:	7ffb      	ldrb	r3, [r7, #31]
 8003376:	b212      	sxth	r2, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	3320      	adds	r3, #32
 800337c:	443b      	add	r3, r7
 800337e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003382:	7ffb      	ldrb	r3, [r7, #31]
 8003384:	3301      	adds	r3, #1
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	7ffb      	ldrb	r3, [r7, #31]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d9e1      	bls.n	8003352 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	f003 030c 	and.w	r3, r3, #12
 8003394:	2b0c      	cmp	r3, #12
 8003396:	d829      	bhi.n	80033ec <LSM6DSL_GyroReadXYZAngRate+0xd0>
 8003398:	a201      	add	r2, pc, #4	@ (adr r2, 80033a0 <LSM6DSL_GyroReadXYZAngRate+0x84>)
 800339a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339e:	bf00      	nop
 80033a0:	080033d5 	.word	0x080033d5
 80033a4:	080033ed 	.word	0x080033ed
 80033a8:	080033ed 	.word	0x080033ed
 80033ac:	080033ed 	.word	0x080033ed
 80033b0:	080033db 	.word	0x080033db
 80033b4:	080033ed 	.word	0x080033ed
 80033b8:	080033ed 	.word	0x080033ed
 80033bc:	080033ed 	.word	0x080033ed
 80033c0:	080033e1 	.word	0x080033e1
 80033c4:	080033ed 	.word	0x080033ed
 80033c8:	080033ed 	.word	0x080033ed
 80033cc:	080033ed 	.word	0x080033ed
 80033d0:	080033e7 	.word	0x080033e7
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80033d4:	4b16      	ldr	r3, [pc, #88]	@ (8003430 <LSM6DSL_GyroReadXYZAngRate+0x114>)
 80033d6:	61bb      	str	r3, [r7, #24]
    break;
 80033d8:	e008      	b.n	80033ec <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80033da:	4b16      	ldr	r3, [pc, #88]	@ (8003434 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80033dc:	61bb      	str	r3, [r7, #24]
    break;
 80033de:	e005      	b.n	80033ec <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80033e0:	4b15      	ldr	r3, [pc, #84]	@ (8003438 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80033e2:	61bb      	str	r3, [r7, #24]
    break;
 80033e4:	e002      	b.n	80033ec <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80033e6:	4b15      	ldr	r3, [pc, #84]	@ (800343c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80033e8:	61bb      	str	r3, [r7, #24]
    break;    
 80033ea:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80033ec:	2300      	movs	r3, #0
 80033ee:	77fb      	strb	r3, [r7, #31]
 80033f0:	e016      	b.n	8003420 <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80033f2:	7ffb      	ldrb	r3, [r7, #31]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	3320      	adds	r3, #32
 80033f8:	443b      	add	r3, r7
 80033fa:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003406:	7ffb      	ldrb	r3, [r7, #31]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	4413      	add	r3, r2
 800340e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003416:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800341a:	7ffb      	ldrb	r3, [r7, #31]
 800341c:	3301      	adds	r3, #1
 800341e:	77fb      	strb	r3, [r7, #31]
 8003420:	7ffb      	ldrb	r3, [r7, #31]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d9e5      	bls.n	80033f2 <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 8003426:	bf00      	nop
 8003428:	bf00      	nop
 800342a:	3720      	adds	r7, #32
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	410c0000 	.word	0x410c0000
 8003434:	418c0000 	.word	0x418c0000
 8003438:	420c0000 	.word	0x420c0000
 800343c:	428c0000 	.word	0x428c0000

08003440 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800344a:	2003      	movs	r0, #3
 800344c:	f000 f93c 	bl	80036c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003450:	2000      	movs	r0, #0
 8003452:	f000 f80d 	bl	8003470 <HAL_InitTick>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	71fb      	strb	r3, [r7, #7]
 8003460:	e001      	b.n	8003466 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003462:	f7fe feb5 	bl	80021d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003466:	79fb      	ldrb	r3, [r7, #7]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800347c:	4b17      	ldr	r3, [pc, #92]	@ (80034dc <HAL_InitTick+0x6c>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d023      	beq.n	80034cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003484:	4b16      	ldr	r3, [pc, #88]	@ (80034e0 <HAL_InitTick+0x70>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b14      	ldr	r3, [pc, #80]	@ (80034dc <HAL_InitTick+0x6c>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	4619      	mov	r1, r3
 800348e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003492:	fbb3 f3f1 	udiv	r3, r3, r1
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f949 	bl	8003732 <HAL_SYSTICK_Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10f      	bne.n	80034c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b0f      	cmp	r3, #15
 80034aa:	d809      	bhi.n	80034c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034ac:	2200      	movs	r2, #0
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	f04f 30ff 	mov.w	r0, #4294967295
 80034b4:	f000 f913 	bl	80036de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034b8:	4a0a      	ldr	r2, [pc, #40]	@ (80034e4 <HAL_InitTick+0x74>)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e007      	b.n	80034d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
 80034c4:	e004      	b.n	80034d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	73fb      	strb	r3, [r7, #15]
 80034ca:	e001      	b.n	80034d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	200000f8 	.word	0x200000f8
 80034e0:	2000002c 	.word	0x2000002c
 80034e4:	200000f4 	.word	0x200000f4

080034e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034ec:	4b06      	ldr	r3, [pc, #24]	@ (8003508 <HAL_IncTick+0x20>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	4b06      	ldr	r3, [pc, #24]	@ (800350c <HAL_IncTick+0x24>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4413      	add	r3, r2
 80034f8:	4a04      	ldr	r2, [pc, #16]	@ (800350c <HAL_IncTick+0x24>)
 80034fa:	6013      	str	r3, [r2, #0]
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	200000f8 	.word	0x200000f8
 800350c:	200004a4 	.word	0x200004a4

08003510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return uwTick;
 8003514:	4b03      	ldr	r3, [pc, #12]	@ (8003524 <HAL_GetTick+0x14>)
 8003516:	681b      	ldr	r3, [r3, #0]
}
 8003518:	4618      	mov	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	200004a4 	.word	0x200004a4

08003528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003538:	4b0c      	ldr	r3, [pc, #48]	@ (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003544:	4013      	ands	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800355a:	4a04      	ldr	r2, [pc, #16]	@ (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	60d3      	str	r3, [r2, #12]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003574:	4b04      	ldr	r3, [pc, #16]	@ (8003588 <__NVIC_GetPriorityGrouping+0x18>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	0a1b      	lsrs	r3, r3, #8
 800357a:	f003 0307 	and.w	r3, r3, #7
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359a:	2b00      	cmp	r3, #0
 800359c:	db0b      	blt.n	80035b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	f003 021f 	and.w	r2, r3, #31
 80035a4:	4907      	ldr	r1, [pc, #28]	@ (80035c4 <__NVIC_EnableIRQ+0x38>)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	2001      	movs	r0, #1
 80035ae:	fa00 f202 	lsl.w	r2, r0, r2
 80035b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000e100 	.word	0xe000e100

080035c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	6039      	str	r1, [r7, #0]
 80035d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	db0a      	blt.n	80035f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	490c      	ldr	r1, [pc, #48]	@ (8003614 <__NVIC_SetPriority+0x4c>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	0112      	lsls	r2, r2, #4
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	440b      	add	r3, r1
 80035ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f0:	e00a      	b.n	8003608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	4908      	ldr	r1, [pc, #32]	@ (8003618 <__NVIC_SetPriority+0x50>)
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	3b04      	subs	r3, #4
 8003600:	0112      	lsls	r2, r2, #4
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	440b      	add	r3, r1
 8003606:	761a      	strb	r2, [r3, #24]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000e100 	.word	0xe000e100
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361c:	b480      	push	{r7}
 800361e:	b089      	sub	sp, #36	@ 0x24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f1c3 0307 	rsb	r3, r3, #7
 8003636:	2b04      	cmp	r3, #4
 8003638:	bf28      	it	cs
 800363a:	2304      	movcs	r3, #4
 800363c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3304      	adds	r3, #4
 8003642:	2b06      	cmp	r3, #6
 8003644:	d902      	bls.n	800364c <NVIC_EncodePriority+0x30>
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3b03      	subs	r3, #3
 800364a:	e000      	b.n	800364e <NVIC_EncodePriority+0x32>
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	f04f 32ff 	mov.w	r2, #4294967295
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43da      	mvns	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	401a      	ands	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003664:	f04f 31ff 	mov.w	r1, #4294967295
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	43d9      	mvns	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	4313      	orrs	r3, r2
         );
}
 8003676:	4618      	mov	r0, r3
 8003678:	3724      	adds	r7, #36	@ 0x24
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3b01      	subs	r3, #1
 8003690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003694:	d301      	bcc.n	800369a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003696:	2301      	movs	r3, #1
 8003698:	e00f      	b.n	80036ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800369a:	4a0a      	ldr	r2, [pc, #40]	@ (80036c4 <SysTick_Config+0x40>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036a2:	210f      	movs	r1, #15
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	f7ff ff8e 	bl	80035c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ac:	4b05      	ldr	r3, [pc, #20]	@ (80036c4 <SysTick_Config+0x40>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036b2:	4b04      	ldr	r3, [pc, #16]	@ (80036c4 <SysTick_Config+0x40>)
 80036b4:	2207      	movs	r2, #7
 80036b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	e000e010 	.word	0xe000e010

080036c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ff29 	bl	8003528 <__NVIC_SetPriorityGrouping>
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036f0:	f7ff ff3e 	bl	8003570 <__NVIC_GetPriorityGrouping>
 80036f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	6978      	ldr	r0, [r7, #20]
 80036fc:	f7ff ff8e 	bl	800361c <NVIC_EncodePriority>
 8003700:	4602      	mov	r2, r0
 8003702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff5d 	bl	80035c8 <__NVIC_SetPriority>
}
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff31 	bl	800358c <__NVIC_EnableIRQ>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ffa2 	bl	8003684 <SysTick_Config>
 8003740:	4603      	mov	r3, r0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800375a:	e166      	b.n	8003a2a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	2101      	movs	r1, #1
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	fa01 f303 	lsl.w	r3, r1, r3
 8003768:	4013      	ands	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 8158 	beq.w	8003a24 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d005      	beq.n	800378c <HAL_GPIO_Init+0x40>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d130      	bne.n	80037ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	2203      	movs	r2, #3
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4013      	ands	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037c2:	2201      	movs	r2, #1
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4013      	ands	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	f003 0201 	and.w	r2, r3, #1
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d017      	beq.n	800382a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	2203      	movs	r2, #3
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4013      	ands	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d123      	bne.n	800387e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	08da      	lsrs	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3208      	adds	r2, #8
 800383e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	220f      	movs	r2, #15
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	08da      	lsrs	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3208      	adds	r2, #8
 8003878:	6939      	ldr	r1, [r7, #16]
 800387a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 0203 	and.w	r2, r3, #3
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80b2 	beq.w	8003a24 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c0:	4b61      	ldr	r3, [pc, #388]	@ (8003a48 <HAL_GPIO_Init+0x2fc>)
 80038c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c4:	4a60      	ldr	r2, [pc, #384]	@ (8003a48 <HAL_GPIO_Init+0x2fc>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80038cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003a48 <HAL_GPIO_Init+0x2fc>)
 80038ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038d8:	4a5c      	ldr	r2, [pc, #368]	@ (8003a4c <HAL_GPIO_Init+0x300>)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	089b      	lsrs	r3, r3, #2
 80038de:	3302      	adds	r3, #2
 80038e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	220f      	movs	r2, #15
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	43db      	mvns	r3, r3
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003902:	d02b      	beq.n	800395c <HAL_GPIO_Init+0x210>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a52      	ldr	r2, [pc, #328]	@ (8003a50 <HAL_GPIO_Init+0x304>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d025      	beq.n	8003958 <HAL_GPIO_Init+0x20c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a51      	ldr	r2, [pc, #324]	@ (8003a54 <HAL_GPIO_Init+0x308>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d01f      	beq.n	8003954 <HAL_GPIO_Init+0x208>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a50      	ldr	r2, [pc, #320]	@ (8003a58 <HAL_GPIO_Init+0x30c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d019      	beq.n	8003950 <HAL_GPIO_Init+0x204>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a4f      	ldr	r2, [pc, #316]	@ (8003a5c <HAL_GPIO_Init+0x310>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d013      	beq.n	800394c <HAL_GPIO_Init+0x200>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a4e      	ldr	r2, [pc, #312]	@ (8003a60 <HAL_GPIO_Init+0x314>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00d      	beq.n	8003948 <HAL_GPIO_Init+0x1fc>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a4d      	ldr	r2, [pc, #308]	@ (8003a64 <HAL_GPIO_Init+0x318>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d007      	beq.n	8003944 <HAL_GPIO_Init+0x1f8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a4c      	ldr	r2, [pc, #304]	@ (8003a68 <HAL_GPIO_Init+0x31c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <HAL_GPIO_Init+0x1f4>
 800393c:	2307      	movs	r3, #7
 800393e:	e00e      	b.n	800395e <HAL_GPIO_Init+0x212>
 8003940:	2308      	movs	r3, #8
 8003942:	e00c      	b.n	800395e <HAL_GPIO_Init+0x212>
 8003944:	2306      	movs	r3, #6
 8003946:	e00a      	b.n	800395e <HAL_GPIO_Init+0x212>
 8003948:	2305      	movs	r3, #5
 800394a:	e008      	b.n	800395e <HAL_GPIO_Init+0x212>
 800394c:	2304      	movs	r3, #4
 800394e:	e006      	b.n	800395e <HAL_GPIO_Init+0x212>
 8003950:	2303      	movs	r3, #3
 8003952:	e004      	b.n	800395e <HAL_GPIO_Init+0x212>
 8003954:	2302      	movs	r3, #2
 8003956:	e002      	b.n	800395e <HAL_GPIO_Init+0x212>
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <HAL_GPIO_Init+0x212>
 800395c:	2300      	movs	r3, #0
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	f002 0203 	and.w	r2, r2, #3
 8003964:	0092      	lsls	r2, r2, #2
 8003966:	4093      	lsls	r3, r2
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800396e:	4937      	ldr	r1, [pc, #220]	@ (8003a4c <HAL_GPIO_Init+0x300>)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	089b      	lsrs	r3, r3, #2
 8003974:	3302      	adds	r3, #2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800397c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a6c <HAL_GPIO_Init+0x320>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	43db      	mvns	r3, r3
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039a0:	4a32      	ldr	r2, [pc, #200]	@ (8003a6c <HAL_GPIO_Init+0x320>)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039a6:	4b31      	ldr	r3, [pc, #196]	@ (8003a6c <HAL_GPIO_Init+0x320>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	43db      	mvns	r3, r3
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4013      	ands	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039ca:	4a28      	ldr	r2, [pc, #160]	@ (8003a6c <HAL_GPIO_Init+0x320>)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039d0:	4b26      	ldr	r3, [pc, #152]	@ (8003a6c <HAL_GPIO_Init+0x320>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	43db      	mvns	r3, r3
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4013      	ands	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039f4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a6c <HAL_GPIO_Init+0x320>)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039fa:	4b1c      	ldr	r3, [pc, #112]	@ (8003a6c <HAL_GPIO_Init+0x320>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	43db      	mvns	r3, r3
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4013      	ands	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a1e:	4a13      	ldr	r2, [pc, #76]	@ (8003a6c <HAL_GPIO_Init+0x320>)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	3301      	adds	r3, #1
 8003a28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f47f ae91 	bne.w	800375c <HAL_GPIO_Init+0x10>
  }
}
 8003a3a:	bf00      	nop
 8003a3c:	bf00      	nop
 8003a3e:	371c      	adds	r7, #28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40010000 	.word	0x40010000
 8003a50:	48000400 	.word	0x48000400
 8003a54:	48000800 	.word	0x48000800
 8003a58:	48000c00 	.word	0x48000c00
 8003a5c:	48001000 	.word	0x48001000
 8003a60:	48001400 	.word	0x48001400
 8003a64:	48001800 	.word	0x48001800
 8003a68:	48001c00 	.word	0x48001c00
 8003a6c:	40010400 	.word	0x40010400

08003a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	807b      	strh	r3, [r7, #2]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a80:	787b      	ldrb	r3, [r7, #1]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a86:	887a      	ldrh	r2, [r7, #2]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a8c:	e002      	b.n	8003a94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a8e:	887a      	ldrh	r2, [r7, #2]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	041a      	lsls	r2, r3, #16
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	43d9      	mvns	r1, r3
 8003abe:	887b      	ldrh	r3, [r7, #2]
 8003ac0:	400b      	ands	r3, r1
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	619a      	str	r2, [r3, #24]
}
 8003ac8:	bf00      	nop
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ade:	4b08      	ldr	r3, [pc, #32]	@ (8003b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d006      	beq.n	8003af8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aea:	4a05      	ldr	r2, [pc, #20]	@ (8003b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd fe54 	bl	80017a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40010400 	.word	0x40010400

08003b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e08d      	b.n	8003c32 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8b4 	bl	8003c98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2224      	movs	r2, #36	@ 0x24
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0201 	bic.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d107      	bne.n	8003b7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b7a:	609a      	str	r2, [r3, #8]
 8003b7c:	e006      	b.n	8003b8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d108      	bne.n	8003ba6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	e007      	b.n	8003bb6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003bc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69d9      	ldr	r1, [r3, #28]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1a      	ldr	r2, [r3, #32]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d101      	bne.n	8003c4c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e021      	b.n	8003c90 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2224      	movs	r2, #36	@ 0x24
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0201 	bic.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f821 	bl	8003cac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	4608      	mov	r0, r1
 8003cca:	4611      	mov	r1, r2
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4603      	mov	r3, r0
 8003cd0:	817b      	strh	r3, [r7, #10]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	813b      	strh	r3, [r7, #8]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	f040 80f9 	bne.w	8003eda <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_I2C_Mem_Write+0x34>
 8003cee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d105      	bne.n	8003d00 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cfa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0ed      	b.n	8003edc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_I2C_Mem_Write+0x4e>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e0e6      	b.n	8003edc <HAL_I2C_Mem_Write+0x21c>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d16:	f7ff fbfb 	bl	8003510 <HAL_GetTick>
 8003d1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	2319      	movs	r3, #25
 8003d22:	2201      	movs	r2, #1
 8003d24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fac3 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0d1      	b.n	8003edc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2221      	movs	r2, #33	@ 0x21
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2240      	movs	r2, #64	@ 0x40
 8003d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a3a      	ldr	r2, [r7, #32]
 8003d52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d60:	88f8      	ldrh	r0, [r7, #6]
 8003d62:	893a      	ldrh	r2, [r7, #8]
 8003d64:	8979      	ldrh	r1, [r7, #10]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	4603      	mov	r3, r0
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f9d3 	bl	800411c <I2C_RequestMemoryWrite>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0a9      	b.n	8003edc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2bff      	cmp	r3, #255	@ 0xff
 8003d90:	d90e      	bls.n	8003db0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	22ff      	movs	r2, #255	@ 0xff
 8003d96:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	8979      	ldrh	r1, [r7, #10]
 8003da0:	2300      	movs	r3, #0
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fc3d 	bl	8004628 <I2C_TransferConfig>
 8003dae:	e00f      	b.n	8003dd0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	8979      	ldrh	r1, [r7, #10]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fc2c 	bl	8004628 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 fabc 	bl	8004352 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e07b      	b.n	8003edc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	781a      	ldrb	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d034      	beq.n	8003e88 <HAL_I2C_Mem_Write+0x1c8>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d130      	bne.n	8003e88 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2180      	movs	r1, #128	@ 0x80
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 fa3f 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e04d      	b.n	8003edc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2bff      	cmp	r3, #255	@ 0xff
 8003e48:	d90e      	bls.n	8003e68 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	22ff      	movs	r2, #255	@ 0xff
 8003e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	8979      	ldrh	r1, [r7, #10]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fbe1 	bl	8004628 <I2C_TransferConfig>
 8003e66:	e00f      	b.n	8003e88 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	8979      	ldrh	r1, [r7, #10]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fbd0 	bl	8004628 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d19e      	bne.n	8003dd0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 faa2 	bl	80043e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e01a      	b.n	8003edc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6859      	ldr	r1, [r3, #4]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee4 <HAL_I2C_Mem_Write+0x224>)
 8003eba:	400b      	ands	r3, r1
 8003ebc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e000      	b.n	8003edc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003eda:	2302      	movs	r3, #2
  }
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	fe00e800 	.word	0xfe00e800

08003ee8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	817b      	strh	r3, [r7, #10]
 8003efa:	460b      	mov	r3, r1
 8003efc:	813b      	strh	r3, [r7, #8]
 8003efe:	4613      	mov	r3, r2
 8003f00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	f040 80fd 	bne.w	800410a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_I2C_Mem_Read+0x34>
 8003f16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f22:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0f1      	b.n	800410c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_I2C_Mem_Read+0x4e>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e0ea      	b.n	800410c <HAL_I2C_Mem_Read+0x224>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f3e:	f7ff fae7 	bl	8003510 <HAL_GetTick>
 8003f42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	2319      	movs	r3, #25
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f9af 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0d5      	b.n	800410c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2222      	movs	r2, #34	@ 0x22
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2240      	movs	r2, #64	@ 0x40
 8003f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a3a      	ldr	r2, [r7, #32]
 8003f7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f88:	88f8      	ldrh	r0, [r7, #6]
 8003f8a:	893a      	ldrh	r2, [r7, #8]
 8003f8c:	8979      	ldrh	r1, [r7, #10]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	4603      	mov	r3, r0
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f913 	bl	80041c4 <I2C_RequestMemoryRead>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0ad      	b.n	800410c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2bff      	cmp	r3, #255	@ 0xff
 8003fb8:	d90e      	bls.n	8003fd8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	22ff      	movs	r2, #255	@ 0xff
 8003fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	8979      	ldrh	r1, [r7, #10]
 8003fc8:	4b52      	ldr	r3, [pc, #328]	@ (8004114 <HAL_I2C_Mem_Read+0x22c>)
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 fb29 	bl	8004628 <I2C_TransferConfig>
 8003fd6:	e00f      	b.n	8003ff8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	8979      	ldrh	r1, [r7, #10]
 8003fea:	4b4a      	ldr	r3, [pc, #296]	@ (8004114 <HAL_I2C_Mem_Read+0x22c>)
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 fb18 	bl	8004628 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffe:	2200      	movs	r2, #0
 8004000:	2104      	movs	r1, #4
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f956 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e07c      	b.n	800410c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d034      	beq.n	80040b8 <HAL_I2C_Mem_Read+0x1d0>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004052:	2b00      	cmp	r3, #0
 8004054:	d130      	bne.n	80040b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405c:	2200      	movs	r2, #0
 800405e:	2180      	movs	r1, #128	@ 0x80
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f927 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e04d      	b.n	800410c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	2bff      	cmp	r3, #255	@ 0xff
 8004078:	d90e      	bls.n	8004098 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	22ff      	movs	r2, #255	@ 0xff
 800407e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004084:	b2da      	uxtb	r2, r3
 8004086:	8979      	ldrh	r1, [r7, #10]
 8004088:	2300      	movs	r3, #0
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 fac9 	bl	8004628 <I2C_TransferConfig>
 8004096:	e00f      	b.n	80040b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	8979      	ldrh	r1, [r7, #10]
 80040aa:	2300      	movs	r3, #0
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 fab8 	bl	8004628 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d19a      	bne.n	8003ff8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f98a 	bl	80043e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e01a      	b.n	800410c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2220      	movs	r2, #32
 80040dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6859      	ldr	r1, [r3, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <HAL_I2C_Mem_Read+0x230>)
 80040ea:	400b      	ands	r3, r1
 80040ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	e000      	b.n	800410c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
  }
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	80002400 	.word	0x80002400
 8004118:	fe00e800 	.word	0xfe00e800

0800411c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af02      	add	r7, sp, #8
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	4608      	mov	r0, r1
 8004126:	4611      	mov	r1, r2
 8004128:	461a      	mov	r2, r3
 800412a:	4603      	mov	r3, r0
 800412c:	817b      	strh	r3, [r7, #10]
 800412e:	460b      	mov	r3, r1
 8004130:	813b      	strh	r3, [r7, #8]
 8004132:	4613      	mov	r3, r2
 8004134:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	b2da      	uxtb	r2, r3
 800413a:	8979      	ldrh	r1, [r7, #10]
 800413c:	4b20      	ldr	r3, [pc, #128]	@ (80041c0 <I2C_RequestMemoryWrite+0xa4>)
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fa6f 	bl	8004628 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	69b9      	ldr	r1, [r7, #24]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f8ff 	bl	8004352 <I2C_WaitOnTXISFlagUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e02c      	b.n	80041b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d105      	bne.n	8004170 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004164:	893b      	ldrh	r3, [r7, #8]
 8004166:	b2da      	uxtb	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	629a      	str	r2, [r3, #40]	@ 0x28
 800416e:	e015      	b.n	800419c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004170:	893b      	ldrh	r3, [r7, #8]
 8004172:	0a1b      	lsrs	r3, r3, #8
 8004174:	b29b      	uxth	r3, r3
 8004176:	b2da      	uxtb	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	69b9      	ldr	r1, [r7, #24]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f8e5 	bl	8004352 <I2C_WaitOnTXISFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e012      	b.n	80041b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004192:	893b      	ldrh	r3, [r7, #8]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2200      	movs	r2, #0
 80041a4:	2180      	movs	r1, #128	@ 0x80
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f884 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	80002000 	.word	0x80002000

080041c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	4608      	mov	r0, r1
 80041ce:	4611      	mov	r1, r2
 80041d0:	461a      	mov	r2, r3
 80041d2:	4603      	mov	r3, r0
 80041d4:	817b      	strh	r3, [r7, #10]
 80041d6:	460b      	mov	r3, r1
 80041d8:	813b      	strh	r3, [r7, #8]
 80041da:	4613      	mov	r3, r2
 80041dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80041de:	88fb      	ldrh	r3, [r7, #6]
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	8979      	ldrh	r1, [r7, #10]
 80041e4:	4b20      	ldr	r3, [pc, #128]	@ (8004268 <I2C_RequestMemoryRead+0xa4>)
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	2300      	movs	r3, #0
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fa1c 	bl	8004628 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	69b9      	ldr	r1, [r7, #24]
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f8ac 	bl	8004352 <I2C_WaitOnTXISFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e02c      	b.n	800425e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d105      	bne.n	8004216 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800420a:	893b      	ldrh	r3, [r7, #8]
 800420c:	b2da      	uxtb	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	629a      	str	r2, [r3, #40]	@ 0x28
 8004214:	e015      	b.n	8004242 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004216:	893b      	ldrh	r3, [r7, #8]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	b29b      	uxth	r3, r3
 800421c:	b2da      	uxtb	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	69b9      	ldr	r1, [r7, #24]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f892 	bl	8004352 <I2C_WaitOnTXISFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e012      	b.n	800425e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004238:	893b      	ldrh	r3, [r7, #8]
 800423a:	b2da      	uxtb	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	2200      	movs	r2, #0
 800424a:	2140      	movs	r1, #64	@ 0x40
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f831 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	80002000 	.word	0x80002000

0800426c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b02      	cmp	r3, #2
 8004280:	d103      	bne.n	800428a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2200      	movs	r2, #0
 8004288:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b01      	cmp	r3, #1
 8004296:	d007      	beq.n	80042a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	619a      	str	r2, [r3, #24]
  }
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	4613      	mov	r3, r2
 80042c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c4:	e031      	b.n	800432a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042cc:	d02d      	beq.n	800432a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ce:	f7ff f91f 	bl	8003510 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d302      	bcc.n	80042e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d122      	bne.n	800432a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4013      	ands	r3, r2
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	bf0c      	ite	eq
 80042f4:	2301      	moveq	r3, #1
 80042f6:	2300      	movne	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d113      	bne.n	800432a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004306:	f043 0220 	orr.w	r2, r3, #32
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e00f      	b.n	800434a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699a      	ldr	r2, [r3, #24]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4013      	ands	r3, r2
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	429a      	cmp	r2, r3
 8004338:	bf0c      	ite	eq
 800433a:	2301      	moveq	r3, #1
 800433c:	2300      	movne	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	429a      	cmp	r2, r3
 8004346:	d0be      	beq.n	80042c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800435e:	e033      	b.n	80043c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	68b9      	ldr	r1, [r7, #8]
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 f87f 	bl	8004468 <I2C_IsErrorOccurred>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e031      	b.n	80043d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437a:	d025      	beq.n	80043c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800437c:	f7ff f8c8 	bl	8003510 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	429a      	cmp	r2, r3
 800438a:	d302      	bcc.n	8004392 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d11a      	bne.n	80043c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b02      	cmp	r3, #2
 800439e:	d013      	beq.n	80043c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e007      	b.n	80043d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d1c4      	bne.n	8004360 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043ec:	e02f      	b.n	800444e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68b9      	ldr	r1, [r7, #8]
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f838 	bl	8004468 <I2C_IsErrorOccurred>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e02d      	b.n	800445e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004402:	f7ff f885 	bl	8003510 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	429a      	cmp	r2, r3
 8004410:	d302      	bcc.n	8004418 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d11a      	bne.n	800444e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b20      	cmp	r3, #32
 8004424:	d013      	beq.n	800444e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442a:	f043 0220 	orr.w	r2, r3, #32
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e007      	b.n	800445e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b20      	cmp	r3, #32
 800445a:	d1c8      	bne.n	80043ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	@ 0x28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b00      	cmp	r3, #0
 8004492:	d068      	beq.n	8004566 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2210      	movs	r2, #16
 800449a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800449c:	e049      	b.n	8004532 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d045      	beq.n	8004532 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044a6:	f7ff f833 	bl	8003510 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d302      	bcc.n	80044bc <I2C_IsErrorOccurred+0x54>
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d13a      	bne.n	8004532 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044de:	d121      	bne.n	8004524 <I2C_IsErrorOccurred+0xbc>
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044e6:	d01d      	beq.n	8004524 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	d01a      	beq.n	8004524 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80044fe:	f7ff f807 	bl	8003510 <HAL_GetTick>
 8004502:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004504:	e00e      	b.n	8004524 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004506:	f7ff f803 	bl	8003510 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b19      	cmp	r3, #25
 8004512:	d907      	bls.n	8004524 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	f043 0320 	orr.w	r3, r3, #32
 800451a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004522:	e006      	b.n	8004532 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b20      	cmp	r3, #32
 8004530:	d1e9      	bne.n	8004506 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b20      	cmp	r3, #32
 800453e:	d003      	beq.n	8004548 <I2C_IsErrorOccurred+0xe0>
 8004540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0aa      	beq.n	800449e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800454c:	2b00      	cmp	r3, #0
 800454e:	d103      	bne.n	8004558 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2220      	movs	r2, #32
 8004556:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	f043 0304 	orr.w	r3, r3, #4
 800455e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00b      	beq.n	8004590 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004588:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00b      	beq.n	80045b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	f043 0308 	orr.w	r3, r3, #8
 80045a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00b      	beq.n	80045d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	f043 0302 	orr.w	r3, r3, #2
 80045c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80045d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01c      	beq.n	8004616 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f7ff fe45 	bl	800426c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6859      	ldr	r1, [r3, #4]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004624 <I2C_IsErrorOccurred+0x1bc>)
 80045ee:	400b      	ands	r3, r1
 80045f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	431a      	orrs	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004616:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800461a:	4618      	mov	r0, r3
 800461c:	3728      	adds	r7, #40	@ 0x28
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	fe00e800 	.word	0xfe00e800

08004628 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	460b      	mov	r3, r1
 8004634:	817b      	strh	r3, [r7, #10]
 8004636:	4613      	mov	r3, r2
 8004638:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800463a:	897b      	ldrh	r3, [r7, #10]
 800463c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004640:	7a7b      	ldrb	r3, [r7, #9]
 8004642:	041b      	lsls	r3, r3, #16
 8004644:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004648:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	4313      	orrs	r3, r2
 8004652:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004656:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	0d5b      	lsrs	r3, r3, #21
 8004662:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004666:	4b08      	ldr	r3, [pc, #32]	@ (8004688 <I2C_TransferConfig+0x60>)
 8004668:	430b      	orrs	r3, r1
 800466a:	43db      	mvns	r3, r3
 800466c:	ea02 0103 	and.w	r1, r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800467a:	bf00      	nop
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	03ff63ff 	.word	0x03ff63ff

0800468c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d138      	bne.n	8004714 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e032      	b.n	8004716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2224      	movs	r2, #36	@ 0x24
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0201 	bic.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6819      	ldr	r1, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	e000      	b.n	8004716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
  }
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004724:	b480      	push	{r7}
 8004726:	b089      	sub	sp, #36	@ 0x24
 8004728:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	2300      	movs	r3, #0
 8004730:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004732:	4b3e      	ldr	r3, [pc, #248]	@ (800482c <HAL_RCC_GetSysClockFreq+0x108>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800473c:	4b3b      	ldr	r3, [pc, #236]	@ (800482c <HAL_RCC_GetSysClockFreq+0x108>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <HAL_RCC_GetSysClockFreq+0x34>
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b0c      	cmp	r3, #12
 8004750:	d121      	bne.n	8004796 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d11e      	bne.n	8004796 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004758:	4b34      	ldr	r3, [pc, #208]	@ (800482c <HAL_RCC_GetSysClockFreq+0x108>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d107      	bne.n	8004774 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004764:	4b31      	ldr	r3, [pc, #196]	@ (800482c <HAL_RCC_GetSysClockFreq+0x108>)
 8004766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	61fb      	str	r3, [r7, #28]
 8004772:	e005      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004774:	4b2d      	ldr	r3, [pc, #180]	@ (800482c <HAL_RCC_GetSysClockFreq+0x108>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004780:	4a2b      	ldr	r2, [pc, #172]	@ (8004830 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004788:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10d      	bne.n	80047ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004794:	e00a      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b04      	cmp	r3, #4
 800479a:	d102      	bne.n	80047a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800479c:	4b25      	ldr	r3, [pc, #148]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x110>)
 800479e:	61bb      	str	r3, [r7, #24]
 80047a0:	e004      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047a8:	4b23      	ldr	r3, [pc, #140]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x114>)
 80047aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	2b0c      	cmp	r3, #12
 80047b0:	d134      	bne.n	800481c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047b2:	4b1e      	ldr	r3, [pc, #120]	@ (800482c <HAL_RCC_GetSysClockFreq+0x108>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d003      	beq.n	80047ca <HAL_RCC_GetSysClockFreq+0xa6>
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d003      	beq.n	80047d0 <HAL_RCC_GetSysClockFreq+0xac>
 80047c8:	e005      	b.n	80047d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x110>)
 80047cc:	617b      	str	r3, [r7, #20]
      break;
 80047ce:	e005      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047d0:	4b19      	ldr	r3, [pc, #100]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x114>)
 80047d2:	617b      	str	r3, [r7, #20]
      break;
 80047d4:	e002      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	617b      	str	r3, [r7, #20]
      break;
 80047da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047dc:	4b13      	ldr	r3, [pc, #76]	@ (800482c <HAL_RCC_GetSysClockFreq+0x108>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	091b      	lsrs	r3, r3, #4
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	3301      	adds	r3, #1
 80047e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047ea:	4b10      	ldr	r3, [pc, #64]	@ (800482c <HAL_RCC_GetSysClockFreq+0x108>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	fb03 f202 	mul.w	r2, r3, r2
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004802:	4b0a      	ldr	r3, [pc, #40]	@ (800482c <HAL_RCC_GetSysClockFreq+0x108>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	0e5b      	lsrs	r3, r3, #25
 8004808:	f003 0303 	and.w	r3, r3, #3
 800480c:	3301      	adds	r3, #1
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	fbb2 f3f3 	udiv	r3, r2, r3
 800481a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800481c:	69bb      	ldr	r3, [r7, #24]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3724      	adds	r7, #36	@ 0x24
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40021000 	.word	0x40021000
 8004830:	08008838 	.word	0x08008838
 8004834:	00f42400 	.word	0x00f42400
 8004838:	007a1200 	.word	0x007a1200

0800483c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004840:	4b03      	ldr	r3, [pc, #12]	@ (8004850 <HAL_RCC_GetHCLKFreq+0x14>)
 8004842:	681b      	ldr	r3, [r3, #0]
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	2000002c 	.word	0x2000002c

08004854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004858:	f7ff fff0 	bl	800483c <HAL_RCC_GetHCLKFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b06      	ldr	r3, [pc, #24]	@ (8004878 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	0a1b      	lsrs	r3, r3, #8
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	4904      	ldr	r1, [pc, #16]	@ (800487c <HAL_RCC_GetPCLK1Freq+0x28>)
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40021000 	.word	0x40021000
 800487c:	08008830 	.word	0x08008830

08004880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004884:	f7ff ffda 	bl	800483c <HAL_RCC_GetHCLKFreq>
 8004888:	4602      	mov	r2, r0
 800488a:	4b06      	ldr	r3, [pc, #24]	@ (80048a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	0adb      	lsrs	r3, r3, #11
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	4904      	ldr	r1, [pc, #16]	@ (80048a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004896:	5ccb      	ldrb	r3, [r1, r3]
 8004898:	f003 031f 	and.w	r3, r3, #31
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40021000 	.word	0x40021000
 80048a8:	08008830 	.word	0x08008830

080048ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e042      	b.n	8004944 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d106      	bne.n	80048d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f83b 	bl	800494c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2224      	movs	r2, #36	@ 0x24
 80048da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0201 	bic.w	r2, r2, #1
 80048ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fbbc 	bl	8005074 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f8bd 	bl	8004a7c <UART_SetConfig>
 8004902:	4603      	mov	r3, r0
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e01b      	b.n	8004944 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800491a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800492a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fc3b 	bl	80051b8 <UART_CheckIdleState>
 8004942:	4603      	mov	r3, r0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	@ 0x28
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	4613      	mov	r3, r2
 800496e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004976:	2b20      	cmp	r3, #32
 8004978:	d17b      	bne.n	8004a72 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HAL_UART_Transmit+0x26>
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e074      	b.n	8004a74 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2221      	movs	r2, #33	@ 0x21
 8004996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800499a:	f7fe fdb9 	bl	8003510 <HAL_GetTick>
 800499e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	88fa      	ldrh	r2, [r7, #6]
 80049a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	88fa      	ldrh	r2, [r7, #6]
 80049ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b8:	d108      	bne.n	80049cc <HAL_UART_Transmit+0x6c>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d104      	bne.n	80049cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	e003      	b.n	80049d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049d4:	e030      	b.n	8004a38 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2200      	movs	r2, #0
 80049de:	2180      	movs	r1, #128	@ 0x80
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fc93 	bl	800530c <UART_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e03d      	b.n	8004a74 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10b      	bne.n	8004a16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	881a      	ldrh	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a0a:	b292      	uxth	r2, r2
 8004a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	3302      	adds	r3, #2
 8004a12:	61bb      	str	r3, [r7, #24]
 8004a14:	e007      	b.n	8004a26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	781a      	ldrb	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	3301      	adds	r3, #1
 8004a24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1c8      	bne.n	80049d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2140      	movs	r1, #64	@ 0x40
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 fc5c 	bl	800530c <UART_WaitOnFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d005      	beq.n	8004a66 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e006      	b.n	8004a74 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e000      	b.n	8004a74 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004a72:	2302      	movs	r3, #2
  }
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3720      	adds	r7, #32
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a80:	b08c      	sub	sp, #48	@ 0x30
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	431a      	orrs	r2, r3
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	4baa      	ldr	r3, [pc, #680]	@ (8004d54 <UART_SetConfig+0x2d8>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	6812      	ldr	r2, [r2, #0]
 8004ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a9f      	ldr	r2, [pc, #636]	@ (8004d58 <UART_SetConfig+0x2dc>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d004      	beq.n	8004ae8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004af2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004afc:	430b      	orrs	r3, r1
 8004afe:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b06:	f023 010f 	bic.w	r1, r3, #15
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a90      	ldr	r2, [pc, #576]	@ (8004d5c <UART_SetConfig+0x2e0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d125      	bne.n	8004b6c <UART_SetConfig+0xf0>
 8004b20:	4b8f      	ldr	r3, [pc, #572]	@ (8004d60 <UART_SetConfig+0x2e4>)
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d81a      	bhi.n	8004b64 <UART_SetConfig+0xe8>
 8004b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b34 <UART_SetConfig+0xb8>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b45 	.word	0x08004b45
 8004b38:	08004b55 	.word	0x08004b55
 8004b3c:	08004b4d 	.word	0x08004b4d
 8004b40:	08004b5d 	.word	0x08004b5d
 8004b44:	2301      	movs	r3, #1
 8004b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b4a:	e116      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b52:	e112      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004b54:	2304      	movs	r3, #4
 8004b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b5a:	e10e      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b62:	e10a      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004b64:	2310      	movs	r3, #16
 8004b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b6a:	e106      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a7c      	ldr	r2, [pc, #496]	@ (8004d64 <UART_SetConfig+0x2e8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d138      	bne.n	8004be8 <UART_SetConfig+0x16c>
 8004b76:	4b7a      	ldr	r3, [pc, #488]	@ (8004d60 <UART_SetConfig+0x2e4>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7c:	f003 030c 	and.w	r3, r3, #12
 8004b80:	2b0c      	cmp	r3, #12
 8004b82:	d82d      	bhi.n	8004be0 <UART_SetConfig+0x164>
 8004b84:	a201      	add	r2, pc, #4	@ (adr r2, 8004b8c <UART_SetConfig+0x110>)
 8004b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8a:	bf00      	nop
 8004b8c:	08004bc1 	.word	0x08004bc1
 8004b90:	08004be1 	.word	0x08004be1
 8004b94:	08004be1 	.word	0x08004be1
 8004b98:	08004be1 	.word	0x08004be1
 8004b9c:	08004bd1 	.word	0x08004bd1
 8004ba0:	08004be1 	.word	0x08004be1
 8004ba4:	08004be1 	.word	0x08004be1
 8004ba8:	08004be1 	.word	0x08004be1
 8004bac:	08004bc9 	.word	0x08004bc9
 8004bb0:	08004be1 	.word	0x08004be1
 8004bb4:	08004be1 	.word	0x08004be1
 8004bb8:	08004be1 	.word	0x08004be1
 8004bbc:	08004bd9 	.word	0x08004bd9
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bc6:	e0d8      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bce:	e0d4      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004bd0:	2304      	movs	r3, #4
 8004bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bd6:	e0d0      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004bd8:	2308      	movs	r3, #8
 8004bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bde:	e0cc      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004be0:	2310      	movs	r3, #16
 8004be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004be6:	e0c8      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a5e      	ldr	r2, [pc, #376]	@ (8004d68 <UART_SetConfig+0x2ec>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d125      	bne.n	8004c3e <UART_SetConfig+0x1c2>
 8004bf2:	4b5b      	ldr	r3, [pc, #364]	@ (8004d60 <UART_SetConfig+0x2e4>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004bfc:	2b30      	cmp	r3, #48	@ 0x30
 8004bfe:	d016      	beq.n	8004c2e <UART_SetConfig+0x1b2>
 8004c00:	2b30      	cmp	r3, #48	@ 0x30
 8004c02:	d818      	bhi.n	8004c36 <UART_SetConfig+0x1ba>
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d00a      	beq.n	8004c1e <UART_SetConfig+0x1a2>
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d814      	bhi.n	8004c36 <UART_SetConfig+0x1ba>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <UART_SetConfig+0x19a>
 8004c10:	2b10      	cmp	r3, #16
 8004c12:	d008      	beq.n	8004c26 <UART_SetConfig+0x1aa>
 8004c14:	e00f      	b.n	8004c36 <UART_SetConfig+0x1ba>
 8004c16:	2300      	movs	r3, #0
 8004c18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c1c:	e0ad      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c24:	e0a9      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004c26:	2304      	movs	r3, #4
 8004c28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c2c:	e0a5      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004c2e:	2308      	movs	r3, #8
 8004c30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c34:	e0a1      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004c36:	2310      	movs	r3, #16
 8004c38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c3c:	e09d      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a4a      	ldr	r2, [pc, #296]	@ (8004d6c <UART_SetConfig+0x2f0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d125      	bne.n	8004c94 <UART_SetConfig+0x218>
 8004c48:	4b45      	ldr	r3, [pc, #276]	@ (8004d60 <UART_SetConfig+0x2e4>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c52:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c54:	d016      	beq.n	8004c84 <UART_SetConfig+0x208>
 8004c56:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c58:	d818      	bhi.n	8004c8c <UART_SetConfig+0x210>
 8004c5a:	2b80      	cmp	r3, #128	@ 0x80
 8004c5c:	d00a      	beq.n	8004c74 <UART_SetConfig+0x1f8>
 8004c5e:	2b80      	cmp	r3, #128	@ 0x80
 8004c60:	d814      	bhi.n	8004c8c <UART_SetConfig+0x210>
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <UART_SetConfig+0x1f0>
 8004c66:	2b40      	cmp	r3, #64	@ 0x40
 8004c68:	d008      	beq.n	8004c7c <UART_SetConfig+0x200>
 8004c6a:	e00f      	b.n	8004c8c <UART_SetConfig+0x210>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c72:	e082      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004c74:	2302      	movs	r3, #2
 8004c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c7a:	e07e      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004c7c:	2304      	movs	r3, #4
 8004c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c82:	e07a      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004c84:	2308      	movs	r3, #8
 8004c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c8a:	e076      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c92:	e072      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a35      	ldr	r2, [pc, #212]	@ (8004d70 <UART_SetConfig+0x2f4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d12a      	bne.n	8004cf4 <UART_SetConfig+0x278>
 8004c9e:	4b30      	ldr	r3, [pc, #192]	@ (8004d60 <UART_SetConfig+0x2e4>)
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ca8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cac:	d01a      	beq.n	8004ce4 <UART_SetConfig+0x268>
 8004cae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cb2:	d81b      	bhi.n	8004cec <UART_SetConfig+0x270>
 8004cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cb8:	d00c      	beq.n	8004cd4 <UART_SetConfig+0x258>
 8004cba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cbe:	d815      	bhi.n	8004cec <UART_SetConfig+0x270>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <UART_SetConfig+0x250>
 8004cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cc8:	d008      	beq.n	8004cdc <UART_SetConfig+0x260>
 8004cca:	e00f      	b.n	8004cec <UART_SetConfig+0x270>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cd2:	e052      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cda:	e04e      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004cdc:	2304      	movs	r3, #4
 8004cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ce2:	e04a      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004ce4:	2308      	movs	r3, #8
 8004ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cea:	e046      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004cec:	2310      	movs	r3, #16
 8004cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cf2:	e042      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a17      	ldr	r2, [pc, #92]	@ (8004d58 <UART_SetConfig+0x2dc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d13a      	bne.n	8004d74 <UART_SetConfig+0x2f8>
 8004cfe:	4b18      	ldr	r3, [pc, #96]	@ (8004d60 <UART_SetConfig+0x2e4>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d0c:	d01a      	beq.n	8004d44 <UART_SetConfig+0x2c8>
 8004d0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d12:	d81b      	bhi.n	8004d4c <UART_SetConfig+0x2d0>
 8004d14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d18:	d00c      	beq.n	8004d34 <UART_SetConfig+0x2b8>
 8004d1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d1e:	d815      	bhi.n	8004d4c <UART_SetConfig+0x2d0>
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <UART_SetConfig+0x2b0>
 8004d24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d28:	d008      	beq.n	8004d3c <UART_SetConfig+0x2c0>
 8004d2a:	e00f      	b.n	8004d4c <UART_SetConfig+0x2d0>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d32:	e022      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004d34:	2302      	movs	r3, #2
 8004d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d3a:	e01e      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d42:	e01a      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004d44:	2308      	movs	r3, #8
 8004d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d4a:	e016      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d52:	e012      	b.n	8004d7a <UART_SetConfig+0x2fe>
 8004d54:	cfff69f3 	.word	0xcfff69f3
 8004d58:	40008000 	.word	0x40008000
 8004d5c:	40013800 	.word	0x40013800
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40004400 	.word	0x40004400
 8004d68:	40004800 	.word	0x40004800
 8004d6c:	40004c00 	.word	0x40004c00
 8004d70:	40005000 	.word	0x40005000
 8004d74:	2310      	movs	r3, #16
 8004d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4aae      	ldr	r2, [pc, #696]	@ (8005038 <UART_SetConfig+0x5bc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	f040 8097 	bne.w	8004eb4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d823      	bhi.n	8004dd6 <UART_SetConfig+0x35a>
 8004d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d94 <UART_SetConfig+0x318>)
 8004d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d94:	08004db9 	.word	0x08004db9
 8004d98:	08004dd7 	.word	0x08004dd7
 8004d9c:	08004dc1 	.word	0x08004dc1
 8004da0:	08004dd7 	.word	0x08004dd7
 8004da4:	08004dc7 	.word	0x08004dc7
 8004da8:	08004dd7 	.word	0x08004dd7
 8004dac:	08004dd7 	.word	0x08004dd7
 8004db0:	08004dd7 	.word	0x08004dd7
 8004db4:	08004dcf 	.word	0x08004dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db8:	f7ff fd4c 	bl	8004854 <HAL_RCC_GetPCLK1Freq>
 8004dbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dbe:	e010      	b.n	8004de2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc0:	4b9e      	ldr	r3, [pc, #632]	@ (800503c <UART_SetConfig+0x5c0>)
 8004dc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004dc4:	e00d      	b.n	8004de2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dc6:	f7ff fcad 	bl	8004724 <HAL_RCC_GetSysClockFreq>
 8004dca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dcc:	e009      	b.n	8004de2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004dd4:	e005      	b.n	8004de2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004de0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 8130 	beq.w	800504a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dee:	4a94      	ldr	r2, [pc, #592]	@ (8005040 <UART_SetConfig+0x5c4>)
 8004df0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004df4:	461a      	mov	r2, r3
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dfc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	4413      	add	r3, r2
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d305      	bcc.n	8004e1a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d903      	bls.n	8004e22 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e20:	e113      	b.n	800504a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	2200      	movs	r2, #0
 8004e26:	60bb      	str	r3, [r7, #8]
 8004e28:	60fa      	str	r2, [r7, #12]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2e:	4a84      	ldr	r2, [pc, #528]	@ (8005040 <UART_SetConfig+0x5c4>)
 8004e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2200      	movs	r2, #0
 8004e38:	603b      	str	r3, [r7, #0]
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e44:	f7fb ff18 	bl	8000c78 <__aeabi_uldivmod>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	4619      	mov	r1, r3
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	020b      	lsls	r3, r1, #8
 8004e5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e5e:	0202      	lsls	r2, r0, #8
 8004e60:	6979      	ldr	r1, [r7, #20]
 8004e62:	6849      	ldr	r1, [r1, #4]
 8004e64:	0849      	lsrs	r1, r1, #1
 8004e66:	2000      	movs	r0, #0
 8004e68:	460c      	mov	r4, r1
 8004e6a:	4605      	mov	r5, r0
 8004e6c:	eb12 0804 	adds.w	r8, r2, r4
 8004e70:	eb43 0905 	adc.w	r9, r3, r5
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	469a      	mov	sl, r3
 8004e7c:	4693      	mov	fp, r2
 8004e7e:	4652      	mov	r2, sl
 8004e80:	465b      	mov	r3, fp
 8004e82:	4640      	mov	r0, r8
 8004e84:	4649      	mov	r1, r9
 8004e86:	f7fb fef7 	bl	8000c78 <__aeabi_uldivmod>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4613      	mov	r3, r2
 8004e90:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e98:	d308      	bcc.n	8004eac <UART_SetConfig+0x430>
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ea0:	d204      	bcs.n	8004eac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6a3a      	ldr	r2, [r7, #32]
 8004ea8:	60da      	str	r2, [r3, #12]
 8004eaa:	e0ce      	b.n	800504a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004eb2:	e0ca      	b.n	800504a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ebc:	d166      	bne.n	8004f8c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004ebe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d827      	bhi.n	8004f16 <UART_SetConfig+0x49a>
 8004ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ecc <UART_SetConfig+0x450>)
 8004ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ecc:	08004ef1 	.word	0x08004ef1
 8004ed0:	08004ef9 	.word	0x08004ef9
 8004ed4:	08004f01 	.word	0x08004f01
 8004ed8:	08004f17 	.word	0x08004f17
 8004edc:	08004f07 	.word	0x08004f07
 8004ee0:	08004f17 	.word	0x08004f17
 8004ee4:	08004f17 	.word	0x08004f17
 8004ee8:	08004f17 	.word	0x08004f17
 8004eec:	08004f0f 	.word	0x08004f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef0:	f7ff fcb0 	bl	8004854 <HAL_RCC_GetPCLK1Freq>
 8004ef4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ef6:	e014      	b.n	8004f22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef8:	f7ff fcc2 	bl	8004880 <HAL_RCC_GetPCLK2Freq>
 8004efc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004efe:	e010      	b.n	8004f22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f00:	4b4e      	ldr	r3, [pc, #312]	@ (800503c <UART_SetConfig+0x5c0>)
 8004f02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f04:	e00d      	b.n	8004f22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f06:	f7ff fc0d 	bl	8004724 <HAL_RCC_GetSysClockFreq>
 8004f0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f0c:	e009      	b.n	8004f22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f14:	e005      	b.n	8004f22 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 8090 	beq.w	800504a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2e:	4a44      	ldr	r2, [pc, #272]	@ (8005040 <UART_SetConfig+0x5c4>)
 8004f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f34:	461a      	mov	r2, r3
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f38:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f3c:	005a      	lsls	r2, r3, #1
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	085b      	lsrs	r3, r3, #1
 8004f44:	441a      	add	r2, r3
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	2b0f      	cmp	r3, #15
 8004f54:	d916      	bls.n	8004f84 <UART_SetConfig+0x508>
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f5c:	d212      	bcs.n	8004f84 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f023 030f 	bic.w	r3, r3, #15
 8004f66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	085b      	lsrs	r3, r3, #1
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	8bfb      	ldrh	r3, [r7, #30]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	8bfa      	ldrh	r2, [r7, #30]
 8004f80:	60da      	str	r2, [r3, #12]
 8004f82:	e062      	b.n	800504a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f8a:	e05e      	b.n	800504a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d828      	bhi.n	8004fe6 <UART_SetConfig+0x56a>
 8004f94:	a201      	add	r2, pc, #4	@ (adr r2, 8004f9c <UART_SetConfig+0x520>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004fc9 	.word	0x08004fc9
 8004fa4:	08004fd1 	.word	0x08004fd1
 8004fa8:	08004fe7 	.word	0x08004fe7
 8004fac:	08004fd7 	.word	0x08004fd7
 8004fb0:	08004fe7 	.word	0x08004fe7
 8004fb4:	08004fe7 	.word	0x08004fe7
 8004fb8:	08004fe7 	.word	0x08004fe7
 8004fbc:	08004fdf 	.word	0x08004fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc0:	f7ff fc48 	bl	8004854 <HAL_RCC_GetPCLK1Freq>
 8004fc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fc6:	e014      	b.n	8004ff2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc8:	f7ff fc5a 	bl	8004880 <HAL_RCC_GetPCLK2Freq>
 8004fcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fce:	e010      	b.n	8004ff2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800503c <UART_SetConfig+0x5c0>)
 8004fd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fd4:	e00d      	b.n	8004ff2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd6:	f7ff fba5 	bl	8004724 <HAL_RCC_GetSysClockFreq>
 8004fda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fdc:	e009      	b.n	8004ff2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fe4:	e005      	b.n	8004ff2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ff0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d028      	beq.n	800504a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffc:	4a10      	ldr	r2, [pc, #64]	@ (8005040 <UART_SetConfig+0x5c4>)
 8004ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005002:	461a      	mov	r2, r3
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	fbb3 f2f2 	udiv	r2, r3, r2
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	441a      	add	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	fbb2 f3f3 	udiv	r3, r2, r3
 800501a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	2b0f      	cmp	r3, #15
 8005020:	d910      	bls.n	8005044 <UART_SetConfig+0x5c8>
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005028:	d20c      	bcs.n	8005044 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	b29a      	uxth	r2, r3
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60da      	str	r2, [r3, #12]
 8005034:	e009      	b.n	800504a <UART_SetConfig+0x5ce>
 8005036:	bf00      	nop
 8005038:	40008000 	.word	0x40008000
 800503c:	00f42400 	.word	0x00f42400
 8005040:	08008868 	.word	0x08008868
      }
      else
      {
        ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2201      	movs	r2, #1
 800504e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2201      	movs	r2, #1
 8005056:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2200      	movs	r2, #0
 800505e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2200      	movs	r2, #0
 8005064:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005066:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800506a:	4618      	mov	r0, r3
 800506c:	3730      	adds	r7, #48	@ 0x30
 800506e:	46bd      	mov	sp, r7
 8005070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005074 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01a      	beq.n	800518a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005172:	d10a      	bne.n	800518a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	605a      	str	r2, [r3, #4]
  }
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b098      	sub	sp, #96	@ 0x60
 80051bc:	af02      	add	r7, sp, #8
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051c8:	f7fe f9a2 	bl	8003510 <HAL_GetTick>
 80051cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d12f      	bne.n	800523c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051e4:	2200      	movs	r2, #0
 80051e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f88e 	bl	800530c <UART_WaitOnFlagUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d022      	beq.n	800523c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fe:	e853 3f00 	ldrex	r3, [r3]
 8005202:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005206:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800520a:	653b      	str	r3, [r7, #80]	@ 0x50
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	461a      	mov	r2, r3
 8005212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005214:	647b      	str	r3, [r7, #68]	@ 0x44
 8005216:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800521a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e6      	bne.n	80051f6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2220      	movs	r2, #32
 800522c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e063      	b.n	8005304 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b04      	cmp	r3, #4
 8005248:	d149      	bne.n	80052de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800524a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005252:	2200      	movs	r2, #0
 8005254:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f857 	bl	800530c <UART_WaitOnFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d03c      	beq.n	80052de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	623b      	str	r3, [r7, #32]
   return(result);
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005278:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005282:	633b      	str	r3, [r7, #48]	@ 0x30
 8005284:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e6      	bne.n	8005264 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3308      	adds	r3, #8
 800529c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3308      	adds	r3, #8
 80052b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052b6:	61fa      	str	r2, [r7, #28]
 80052b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	69b9      	ldr	r1, [r7, #24]
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	617b      	str	r3, [r7, #20]
   return(result);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e5      	bne.n	8005296 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e012      	b.n	8005304 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3758      	adds	r7, #88	@ 0x58
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800531c:	e049      	b.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d045      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005326:	f7fe f8f3 	bl	8003510 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	429a      	cmp	r2, r3
 8005334:	d302      	bcc.n	800533c <UART_WaitOnFlagUntilTimeout+0x30>
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e048      	b.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	d031      	beq.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b08      	cmp	r3, #8
 800535a:	d110      	bne.n	800537e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2208      	movs	r2, #8
 8005362:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 f838 	bl	80053da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2208      	movs	r2, #8
 800536e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e029      	b.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800538c:	d111      	bne.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005396:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f81e 	bl	80053da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e00f      	b.n	80053d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69da      	ldr	r2, [r3, #28]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4013      	ands	r3, r2
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	429a      	cmp	r2, r3
 80053c0:	bf0c      	ite	eq
 80053c2:	2301      	moveq	r3, #1
 80053c4:	2300      	movne	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d0a6      	beq.n	800531e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053da:	b480      	push	{r7}
 80053dc:	b095      	sub	sp, #84	@ 0x54
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	461a      	mov	r2, r3
 80053fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005400:	643b      	str	r3, [r7, #64]	@ 0x40
 8005402:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005406:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800540e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e6      	bne.n	80053e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3308      	adds	r3, #8
 800541a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	61fb      	str	r3, [r7, #28]
   return(result);
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800542a:	f023 0301 	bic.w	r3, r3, #1
 800542e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3308      	adds	r3, #8
 8005436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005438:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800543a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800543e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e3      	bne.n	8005414 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d118      	bne.n	8005486 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	60bb      	str	r3, [r7, #8]
   return(result);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f023 0310 	bic.w	r3, r3, #16
 8005468:	647b      	str	r3, [r7, #68]	@ 0x44
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	6979      	ldr	r1, [r7, #20]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	613b      	str	r3, [r7, #16]
   return(result);
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e6      	bne.n	8005454 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800549a:	bf00      	nop
 800549c:	3754      	adds	r7, #84	@ 0x54
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <findslot>:
 80054a8:	4b0a      	ldr	r3, [pc, #40]	@ (80054d4 <findslot+0x2c>)
 80054aa:	b510      	push	{r4, lr}
 80054ac:	4604      	mov	r4, r0
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	b118      	cbz	r0, 80054ba <findslot+0x12>
 80054b2:	6a03      	ldr	r3, [r0, #32]
 80054b4:	b90b      	cbnz	r3, 80054ba <findslot+0x12>
 80054b6:	f000 fe1f 	bl	80060f8 <__sinit>
 80054ba:	2c13      	cmp	r4, #19
 80054bc:	d807      	bhi.n	80054ce <findslot+0x26>
 80054be:	4806      	ldr	r0, [pc, #24]	@ (80054d8 <findslot+0x30>)
 80054c0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80054c4:	3201      	adds	r2, #1
 80054c6:	d002      	beq.n	80054ce <findslot+0x26>
 80054c8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80054cc:	bd10      	pop	{r4, pc}
 80054ce:	2000      	movs	r0, #0
 80054d0:	e7fc      	b.n	80054cc <findslot+0x24>
 80054d2:	bf00      	nop
 80054d4:	20000108 	.word	0x20000108
 80054d8:	200004a8 	.word	0x200004a8

080054dc <error>:
 80054dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054de:	4604      	mov	r4, r0
 80054e0:	f000 ff8c 	bl	80063fc <__errno>
 80054e4:	2613      	movs	r6, #19
 80054e6:	4605      	mov	r5, r0
 80054e8:	2700      	movs	r7, #0
 80054ea:	4630      	mov	r0, r6
 80054ec:	4639      	mov	r1, r7
 80054ee:	beab      	bkpt	0x00ab
 80054f0:	4606      	mov	r6, r0
 80054f2:	602e      	str	r6, [r5, #0]
 80054f4:	4620      	mov	r0, r4
 80054f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080054f8 <checkerror>:
 80054f8:	1c43      	adds	r3, r0, #1
 80054fa:	d101      	bne.n	8005500 <checkerror+0x8>
 80054fc:	f7ff bfee 	b.w	80054dc <error>
 8005500:	4770      	bx	lr

08005502 <_swiread>:
 8005502:	b530      	push	{r4, r5, lr}
 8005504:	b085      	sub	sp, #20
 8005506:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800550a:	9203      	str	r2, [sp, #12]
 800550c:	2406      	movs	r4, #6
 800550e:	ad01      	add	r5, sp, #4
 8005510:	4620      	mov	r0, r4
 8005512:	4629      	mov	r1, r5
 8005514:	beab      	bkpt	0x00ab
 8005516:	4604      	mov	r4, r0
 8005518:	4620      	mov	r0, r4
 800551a:	f7ff ffed 	bl	80054f8 <checkerror>
 800551e:	b005      	add	sp, #20
 8005520:	bd30      	pop	{r4, r5, pc}

08005522 <_read>:
 8005522:	b570      	push	{r4, r5, r6, lr}
 8005524:	460e      	mov	r6, r1
 8005526:	4614      	mov	r4, r2
 8005528:	f7ff ffbe 	bl	80054a8 <findslot>
 800552c:	4605      	mov	r5, r0
 800552e:	b930      	cbnz	r0, 800553e <_read+0x1c>
 8005530:	f000 ff64 	bl	80063fc <__errno>
 8005534:	2309      	movs	r3, #9
 8005536:	6003      	str	r3, [r0, #0]
 8005538:	f04f 30ff 	mov.w	r0, #4294967295
 800553c:	bd70      	pop	{r4, r5, r6, pc}
 800553e:	6800      	ldr	r0, [r0, #0]
 8005540:	4622      	mov	r2, r4
 8005542:	4631      	mov	r1, r6
 8005544:	f7ff ffdd 	bl	8005502 <_swiread>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d0f5      	beq.n	8005538 <_read+0x16>
 800554c:	686b      	ldr	r3, [r5, #4]
 800554e:	1a20      	subs	r0, r4, r0
 8005550:	4403      	add	r3, r0
 8005552:	606b      	str	r3, [r5, #4]
 8005554:	e7f2      	b.n	800553c <_read+0x1a>

08005556 <_swilseek>:
 8005556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005558:	460c      	mov	r4, r1
 800555a:	4616      	mov	r6, r2
 800555c:	f7ff ffa4 	bl	80054a8 <findslot>
 8005560:	4605      	mov	r5, r0
 8005562:	b940      	cbnz	r0, 8005576 <_swilseek+0x20>
 8005564:	f000 ff4a 	bl	80063fc <__errno>
 8005568:	2309      	movs	r3, #9
 800556a:	6003      	str	r3, [r0, #0]
 800556c:	f04f 34ff 	mov.w	r4, #4294967295
 8005570:	4620      	mov	r0, r4
 8005572:	b003      	add	sp, #12
 8005574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005576:	2e02      	cmp	r6, #2
 8005578:	d903      	bls.n	8005582 <_swilseek+0x2c>
 800557a:	f000 ff3f 	bl	80063fc <__errno>
 800557e:	2316      	movs	r3, #22
 8005580:	e7f3      	b.n	800556a <_swilseek+0x14>
 8005582:	2e01      	cmp	r6, #1
 8005584:	d112      	bne.n	80055ac <_swilseek+0x56>
 8005586:	6843      	ldr	r3, [r0, #4]
 8005588:	18e4      	adds	r4, r4, r3
 800558a:	d4f6      	bmi.n	800557a <_swilseek+0x24>
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	260a      	movs	r6, #10
 8005590:	e9cd 3400 	strd	r3, r4, [sp]
 8005594:	466f      	mov	r7, sp
 8005596:	4630      	mov	r0, r6
 8005598:	4639      	mov	r1, r7
 800559a:	beab      	bkpt	0x00ab
 800559c:	4606      	mov	r6, r0
 800559e:	4630      	mov	r0, r6
 80055a0:	f7ff ffaa 	bl	80054f8 <checkerror>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	dbe1      	blt.n	800556c <_swilseek+0x16>
 80055a8:	606c      	str	r4, [r5, #4]
 80055aa:	e7e1      	b.n	8005570 <_swilseek+0x1a>
 80055ac:	2e02      	cmp	r6, #2
 80055ae:	6803      	ldr	r3, [r0, #0]
 80055b0:	d1ec      	bne.n	800558c <_swilseek+0x36>
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	260c      	movs	r6, #12
 80055b6:	466f      	mov	r7, sp
 80055b8:	4630      	mov	r0, r6
 80055ba:	4639      	mov	r1, r7
 80055bc:	beab      	bkpt	0x00ab
 80055be:	4606      	mov	r6, r0
 80055c0:	4630      	mov	r0, r6
 80055c2:	f7ff ff99 	bl	80054f8 <checkerror>
 80055c6:	1c43      	adds	r3, r0, #1
 80055c8:	d0d0      	beq.n	800556c <_swilseek+0x16>
 80055ca:	4404      	add	r4, r0
 80055cc:	e7de      	b.n	800558c <_swilseek+0x36>

080055ce <_lseek>:
 80055ce:	f7ff bfc2 	b.w	8005556 <_swilseek>

080055d2 <_swiwrite>:
 80055d2:	b530      	push	{r4, r5, lr}
 80055d4:	b085      	sub	sp, #20
 80055d6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80055da:	9203      	str	r2, [sp, #12]
 80055dc:	2405      	movs	r4, #5
 80055de:	ad01      	add	r5, sp, #4
 80055e0:	4620      	mov	r0, r4
 80055e2:	4629      	mov	r1, r5
 80055e4:	beab      	bkpt	0x00ab
 80055e6:	4604      	mov	r4, r0
 80055e8:	4620      	mov	r0, r4
 80055ea:	f7ff ff85 	bl	80054f8 <checkerror>
 80055ee:	b005      	add	sp, #20
 80055f0:	bd30      	pop	{r4, r5, pc}

080055f2 <_write>:
 80055f2:	b570      	push	{r4, r5, r6, lr}
 80055f4:	460e      	mov	r6, r1
 80055f6:	4615      	mov	r5, r2
 80055f8:	f7ff ff56 	bl	80054a8 <findslot>
 80055fc:	4604      	mov	r4, r0
 80055fe:	b930      	cbnz	r0, 800560e <_write+0x1c>
 8005600:	f000 fefc 	bl	80063fc <__errno>
 8005604:	2309      	movs	r3, #9
 8005606:	6003      	str	r3, [r0, #0]
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	bd70      	pop	{r4, r5, r6, pc}
 800560e:	6800      	ldr	r0, [r0, #0]
 8005610:	462a      	mov	r2, r5
 8005612:	4631      	mov	r1, r6
 8005614:	f7ff ffdd 	bl	80055d2 <_swiwrite>
 8005618:	1e03      	subs	r3, r0, #0
 800561a:	dbf5      	blt.n	8005608 <_write+0x16>
 800561c:	6862      	ldr	r2, [r4, #4]
 800561e:	1ae8      	subs	r0, r5, r3
 8005620:	4402      	add	r2, r0
 8005622:	42ab      	cmp	r3, r5
 8005624:	6062      	str	r2, [r4, #4]
 8005626:	d1f1      	bne.n	800560c <_write+0x1a>
 8005628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800562c:	2000      	movs	r0, #0
 800562e:	f7ff bf55 	b.w	80054dc <error>

08005632 <_swiclose>:
 8005632:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005634:	2402      	movs	r4, #2
 8005636:	9001      	str	r0, [sp, #4]
 8005638:	ad01      	add	r5, sp, #4
 800563a:	4620      	mov	r0, r4
 800563c:	4629      	mov	r1, r5
 800563e:	beab      	bkpt	0x00ab
 8005640:	4604      	mov	r4, r0
 8005642:	4620      	mov	r0, r4
 8005644:	f7ff ff58 	bl	80054f8 <checkerror>
 8005648:	b003      	add	sp, #12
 800564a:	bd30      	pop	{r4, r5, pc}

0800564c <_close>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	4605      	mov	r5, r0
 8005650:	f7ff ff2a 	bl	80054a8 <findslot>
 8005654:	4604      	mov	r4, r0
 8005656:	b930      	cbnz	r0, 8005666 <_close+0x1a>
 8005658:	f000 fed0 	bl	80063fc <__errno>
 800565c:	2309      	movs	r3, #9
 800565e:	6003      	str	r3, [r0, #0]
 8005660:	f04f 30ff 	mov.w	r0, #4294967295
 8005664:	bd38      	pop	{r3, r4, r5, pc}
 8005666:	3d01      	subs	r5, #1
 8005668:	2d01      	cmp	r5, #1
 800566a:	d809      	bhi.n	8005680 <_close+0x34>
 800566c:	4b09      	ldr	r3, [pc, #36]	@ (8005694 <_close+0x48>)
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	429a      	cmp	r2, r3
 8005674:	d104      	bne.n	8005680 <_close+0x34>
 8005676:	f04f 33ff 	mov.w	r3, #4294967295
 800567a:	6003      	str	r3, [r0, #0]
 800567c:	2000      	movs	r0, #0
 800567e:	e7f1      	b.n	8005664 <_close+0x18>
 8005680:	6820      	ldr	r0, [r4, #0]
 8005682:	f7ff ffd6 	bl	8005632 <_swiclose>
 8005686:	2800      	cmp	r0, #0
 8005688:	d1ec      	bne.n	8005664 <_close+0x18>
 800568a:	f04f 33ff 	mov.w	r3, #4294967295
 800568e:	6023      	str	r3, [r4, #0]
 8005690:	e7e8      	b.n	8005664 <_close+0x18>
 8005692:	bf00      	nop
 8005694:	200004a8 	.word	0x200004a8

08005698 <_getpid>:
 8005698:	2001      	movs	r0, #1
 800569a:	4770      	bx	lr

0800569c <_swistat>:
 800569c:	b570      	push	{r4, r5, r6, lr}
 800569e:	460c      	mov	r4, r1
 80056a0:	f7ff ff02 	bl	80054a8 <findslot>
 80056a4:	4605      	mov	r5, r0
 80056a6:	b930      	cbnz	r0, 80056b6 <_swistat+0x1a>
 80056a8:	f000 fea8 	bl	80063fc <__errno>
 80056ac:	2309      	movs	r3, #9
 80056ae:	6003      	str	r3, [r0, #0]
 80056b0:	f04f 30ff 	mov.w	r0, #4294967295
 80056b4:	bd70      	pop	{r4, r5, r6, pc}
 80056b6:	6863      	ldr	r3, [r4, #4]
 80056b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80056bc:	6063      	str	r3, [r4, #4]
 80056be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056c2:	64a3      	str	r3, [r4, #72]	@ 0x48
 80056c4:	260c      	movs	r6, #12
 80056c6:	4630      	mov	r0, r6
 80056c8:	4629      	mov	r1, r5
 80056ca:	beab      	bkpt	0x00ab
 80056cc:	4605      	mov	r5, r0
 80056ce:	4628      	mov	r0, r5
 80056d0:	f7ff ff12 	bl	80054f8 <checkerror>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d0eb      	beq.n	80056b0 <_swistat+0x14>
 80056d8:	6120      	str	r0, [r4, #16]
 80056da:	2000      	movs	r0, #0
 80056dc:	e7ea      	b.n	80056b4 <_swistat+0x18>

080056de <_fstat>:
 80056de:	460b      	mov	r3, r1
 80056e0:	b510      	push	{r4, lr}
 80056e2:	2100      	movs	r1, #0
 80056e4:	4604      	mov	r4, r0
 80056e6:	2258      	movs	r2, #88	@ 0x58
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 fe35 	bl	8006358 <memset>
 80056ee:	4601      	mov	r1, r0
 80056f0:	4620      	mov	r0, r4
 80056f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f6:	f7ff bfd1 	b.w	800569c <_swistat>

080056fa <_isatty>:
 80056fa:	b570      	push	{r4, r5, r6, lr}
 80056fc:	f7ff fed4 	bl	80054a8 <findslot>
 8005700:	2409      	movs	r4, #9
 8005702:	4605      	mov	r5, r0
 8005704:	b920      	cbnz	r0, 8005710 <_isatty+0x16>
 8005706:	f000 fe79 	bl	80063fc <__errno>
 800570a:	6004      	str	r4, [r0, #0]
 800570c:	2000      	movs	r0, #0
 800570e:	bd70      	pop	{r4, r5, r6, pc}
 8005710:	4620      	mov	r0, r4
 8005712:	4629      	mov	r1, r5
 8005714:	beab      	bkpt	0x00ab
 8005716:	4604      	mov	r4, r0
 8005718:	2c01      	cmp	r4, #1
 800571a:	4620      	mov	r0, r4
 800571c:	d0f7      	beq.n	800570e <_isatty+0x14>
 800571e:	f000 fe6d 	bl	80063fc <__errno>
 8005722:	2513      	movs	r5, #19
 8005724:	4604      	mov	r4, r0
 8005726:	2600      	movs	r6, #0
 8005728:	4628      	mov	r0, r5
 800572a:	4631      	mov	r1, r6
 800572c:	beab      	bkpt	0x00ab
 800572e:	4605      	mov	r5, r0
 8005730:	6025      	str	r5, [r4, #0]
 8005732:	e7eb      	b.n	800570c <_isatty+0x12>

08005734 <__cvt>:
 8005734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005738:	ec57 6b10 	vmov	r6, r7, d0
 800573c:	2f00      	cmp	r7, #0
 800573e:	460c      	mov	r4, r1
 8005740:	4619      	mov	r1, r3
 8005742:	463b      	mov	r3, r7
 8005744:	bfbb      	ittet	lt
 8005746:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800574a:	461f      	movlt	r7, r3
 800574c:	2300      	movge	r3, #0
 800574e:	232d      	movlt	r3, #45	@ 0x2d
 8005750:	700b      	strb	r3, [r1, #0]
 8005752:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005754:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005758:	4691      	mov	r9, r2
 800575a:	f023 0820 	bic.w	r8, r3, #32
 800575e:	bfbc      	itt	lt
 8005760:	4632      	movlt	r2, r6
 8005762:	4616      	movlt	r6, r2
 8005764:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005768:	d005      	beq.n	8005776 <__cvt+0x42>
 800576a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800576e:	d100      	bne.n	8005772 <__cvt+0x3e>
 8005770:	3401      	adds	r4, #1
 8005772:	2102      	movs	r1, #2
 8005774:	e000      	b.n	8005778 <__cvt+0x44>
 8005776:	2103      	movs	r1, #3
 8005778:	ab03      	add	r3, sp, #12
 800577a:	9301      	str	r3, [sp, #4]
 800577c:	ab02      	add	r3, sp, #8
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	ec47 6b10 	vmov	d0, r6, r7
 8005784:	4653      	mov	r3, sl
 8005786:	4622      	mov	r2, r4
 8005788:	f000 ff1a 	bl	80065c0 <_dtoa_r>
 800578c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005790:	4605      	mov	r5, r0
 8005792:	d119      	bne.n	80057c8 <__cvt+0x94>
 8005794:	f019 0f01 	tst.w	r9, #1
 8005798:	d00e      	beq.n	80057b8 <__cvt+0x84>
 800579a:	eb00 0904 	add.w	r9, r0, r4
 800579e:	2200      	movs	r2, #0
 80057a0:	2300      	movs	r3, #0
 80057a2:	4630      	mov	r0, r6
 80057a4:	4639      	mov	r1, r7
 80057a6:	f7fb f9a7 	bl	8000af8 <__aeabi_dcmpeq>
 80057aa:	b108      	cbz	r0, 80057b0 <__cvt+0x7c>
 80057ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80057b0:	2230      	movs	r2, #48	@ 0x30
 80057b2:	9b03      	ldr	r3, [sp, #12]
 80057b4:	454b      	cmp	r3, r9
 80057b6:	d31e      	bcc.n	80057f6 <__cvt+0xc2>
 80057b8:	9b03      	ldr	r3, [sp, #12]
 80057ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80057bc:	1b5b      	subs	r3, r3, r5
 80057be:	4628      	mov	r0, r5
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	b004      	add	sp, #16
 80057c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057cc:	eb00 0904 	add.w	r9, r0, r4
 80057d0:	d1e5      	bne.n	800579e <__cvt+0x6a>
 80057d2:	7803      	ldrb	r3, [r0, #0]
 80057d4:	2b30      	cmp	r3, #48	@ 0x30
 80057d6:	d10a      	bne.n	80057ee <__cvt+0xba>
 80057d8:	2200      	movs	r2, #0
 80057da:	2300      	movs	r3, #0
 80057dc:	4630      	mov	r0, r6
 80057de:	4639      	mov	r1, r7
 80057e0:	f7fb f98a 	bl	8000af8 <__aeabi_dcmpeq>
 80057e4:	b918      	cbnz	r0, 80057ee <__cvt+0xba>
 80057e6:	f1c4 0401 	rsb	r4, r4, #1
 80057ea:	f8ca 4000 	str.w	r4, [sl]
 80057ee:	f8da 3000 	ldr.w	r3, [sl]
 80057f2:	4499      	add	r9, r3
 80057f4:	e7d3      	b.n	800579e <__cvt+0x6a>
 80057f6:	1c59      	adds	r1, r3, #1
 80057f8:	9103      	str	r1, [sp, #12]
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	e7d9      	b.n	80057b2 <__cvt+0x7e>

080057fe <__exponent>:
 80057fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005800:	2900      	cmp	r1, #0
 8005802:	bfba      	itte	lt
 8005804:	4249      	neglt	r1, r1
 8005806:	232d      	movlt	r3, #45	@ 0x2d
 8005808:	232b      	movge	r3, #43	@ 0x2b
 800580a:	2909      	cmp	r1, #9
 800580c:	7002      	strb	r2, [r0, #0]
 800580e:	7043      	strb	r3, [r0, #1]
 8005810:	dd29      	ble.n	8005866 <__exponent+0x68>
 8005812:	f10d 0307 	add.w	r3, sp, #7
 8005816:	461d      	mov	r5, r3
 8005818:	270a      	movs	r7, #10
 800581a:	461a      	mov	r2, r3
 800581c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005820:	fb07 1416 	mls	r4, r7, r6, r1
 8005824:	3430      	adds	r4, #48	@ 0x30
 8005826:	f802 4c01 	strb.w	r4, [r2, #-1]
 800582a:	460c      	mov	r4, r1
 800582c:	2c63      	cmp	r4, #99	@ 0x63
 800582e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005832:	4631      	mov	r1, r6
 8005834:	dcf1      	bgt.n	800581a <__exponent+0x1c>
 8005836:	3130      	adds	r1, #48	@ 0x30
 8005838:	1e94      	subs	r4, r2, #2
 800583a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800583e:	1c41      	adds	r1, r0, #1
 8005840:	4623      	mov	r3, r4
 8005842:	42ab      	cmp	r3, r5
 8005844:	d30a      	bcc.n	800585c <__exponent+0x5e>
 8005846:	f10d 0309 	add.w	r3, sp, #9
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	42ac      	cmp	r4, r5
 800584e:	bf88      	it	hi
 8005850:	2300      	movhi	r3, #0
 8005852:	3302      	adds	r3, #2
 8005854:	4403      	add	r3, r0
 8005856:	1a18      	subs	r0, r3, r0
 8005858:	b003      	add	sp, #12
 800585a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800585c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005860:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005864:	e7ed      	b.n	8005842 <__exponent+0x44>
 8005866:	2330      	movs	r3, #48	@ 0x30
 8005868:	3130      	adds	r1, #48	@ 0x30
 800586a:	7083      	strb	r3, [r0, #2]
 800586c:	70c1      	strb	r1, [r0, #3]
 800586e:	1d03      	adds	r3, r0, #4
 8005870:	e7f1      	b.n	8005856 <__exponent+0x58>
	...

08005874 <_printf_float>:
 8005874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005878:	b08d      	sub	sp, #52	@ 0x34
 800587a:	460c      	mov	r4, r1
 800587c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005880:	4616      	mov	r6, r2
 8005882:	461f      	mov	r7, r3
 8005884:	4605      	mov	r5, r0
 8005886:	f000 fd6f 	bl	8006368 <_localeconv_r>
 800588a:	6803      	ldr	r3, [r0, #0]
 800588c:	9304      	str	r3, [sp, #16]
 800588e:	4618      	mov	r0, r3
 8005890:	f7fa fd06 	bl	80002a0 <strlen>
 8005894:	2300      	movs	r3, #0
 8005896:	930a      	str	r3, [sp, #40]	@ 0x28
 8005898:	f8d8 3000 	ldr.w	r3, [r8]
 800589c:	9005      	str	r0, [sp, #20]
 800589e:	3307      	adds	r3, #7
 80058a0:	f023 0307 	bic.w	r3, r3, #7
 80058a4:	f103 0208 	add.w	r2, r3, #8
 80058a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80058ac:	f8d4 b000 	ldr.w	fp, [r4]
 80058b0:	f8c8 2000 	str.w	r2, [r8]
 80058b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80058bc:	9307      	str	r3, [sp, #28]
 80058be:	f8cd 8018 	str.w	r8, [sp, #24]
 80058c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80058c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058ca:	4b9c      	ldr	r3, [pc, #624]	@ (8005b3c <_printf_float+0x2c8>)
 80058cc:	f04f 32ff 	mov.w	r2, #4294967295
 80058d0:	f7fb f944 	bl	8000b5c <__aeabi_dcmpun>
 80058d4:	bb70      	cbnz	r0, 8005934 <_printf_float+0xc0>
 80058d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058da:	4b98      	ldr	r3, [pc, #608]	@ (8005b3c <_printf_float+0x2c8>)
 80058dc:	f04f 32ff 	mov.w	r2, #4294967295
 80058e0:	f7fb f91e 	bl	8000b20 <__aeabi_dcmple>
 80058e4:	bb30      	cbnz	r0, 8005934 <_printf_float+0xc0>
 80058e6:	2200      	movs	r2, #0
 80058e8:	2300      	movs	r3, #0
 80058ea:	4640      	mov	r0, r8
 80058ec:	4649      	mov	r1, r9
 80058ee:	f7fb f90d 	bl	8000b0c <__aeabi_dcmplt>
 80058f2:	b110      	cbz	r0, 80058fa <_printf_float+0x86>
 80058f4:	232d      	movs	r3, #45	@ 0x2d
 80058f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058fa:	4a91      	ldr	r2, [pc, #580]	@ (8005b40 <_printf_float+0x2cc>)
 80058fc:	4b91      	ldr	r3, [pc, #580]	@ (8005b44 <_printf_float+0x2d0>)
 80058fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005902:	bf8c      	ite	hi
 8005904:	4690      	movhi	r8, r2
 8005906:	4698      	movls	r8, r3
 8005908:	2303      	movs	r3, #3
 800590a:	6123      	str	r3, [r4, #16]
 800590c:	f02b 0304 	bic.w	r3, fp, #4
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	f04f 0900 	mov.w	r9, #0
 8005916:	9700      	str	r7, [sp, #0]
 8005918:	4633      	mov	r3, r6
 800591a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800591c:	4621      	mov	r1, r4
 800591e:	4628      	mov	r0, r5
 8005920:	f000 f9d2 	bl	8005cc8 <_printf_common>
 8005924:	3001      	adds	r0, #1
 8005926:	f040 808d 	bne.w	8005a44 <_printf_float+0x1d0>
 800592a:	f04f 30ff 	mov.w	r0, #4294967295
 800592e:	b00d      	add	sp, #52	@ 0x34
 8005930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005934:	4642      	mov	r2, r8
 8005936:	464b      	mov	r3, r9
 8005938:	4640      	mov	r0, r8
 800593a:	4649      	mov	r1, r9
 800593c:	f7fb f90e 	bl	8000b5c <__aeabi_dcmpun>
 8005940:	b140      	cbz	r0, 8005954 <_printf_float+0xe0>
 8005942:	464b      	mov	r3, r9
 8005944:	2b00      	cmp	r3, #0
 8005946:	bfbc      	itt	lt
 8005948:	232d      	movlt	r3, #45	@ 0x2d
 800594a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800594e:	4a7e      	ldr	r2, [pc, #504]	@ (8005b48 <_printf_float+0x2d4>)
 8005950:	4b7e      	ldr	r3, [pc, #504]	@ (8005b4c <_printf_float+0x2d8>)
 8005952:	e7d4      	b.n	80058fe <_printf_float+0x8a>
 8005954:	6863      	ldr	r3, [r4, #4]
 8005956:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800595a:	9206      	str	r2, [sp, #24]
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	d13b      	bne.n	80059d8 <_printf_float+0x164>
 8005960:	2306      	movs	r3, #6
 8005962:	6063      	str	r3, [r4, #4]
 8005964:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005968:	2300      	movs	r3, #0
 800596a:	6022      	str	r2, [r4, #0]
 800596c:	9303      	str	r3, [sp, #12]
 800596e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005970:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005974:	ab09      	add	r3, sp, #36	@ 0x24
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	6861      	ldr	r1, [r4, #4]
 800597a:	ec49 8b10 	vmov	d0, r8, r9
 800597e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005982:	4628      	mov	r0, r5
 8005984:	f7ff fed6 	bl	8005734 <__cvt>
 8005988:	9b06      	ldr	r3, [sp, #24]
 800598a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800598c:	2b47      	cmp	r3, #71	@ 0x47
 800598e:	4680      	mov	r8, r0
 8005990:	d129      	bne.n	80059e6 <_printf_float+0x172>
 8005992:	1cc8      	adds	r0, r1, #3
 8005994:	db02      	blt.n	800599c <_printf_float+0x128>
 8005996:	6863      	ldr	r3, [r4, #4]
 8005998:	4299      	cmp	r1, r3
 800599a:	dd41      	ble.n	8005a20 <_printf_float+0x1ac>
 800599c:	f1aa 0a02 	sub.w	sl, sl, #2
 80059a0:	fa5f fa8a 	uxtb.w	sl, sl
 80059a4:	3901      	subs	r1, #1
 80059a6:	4652      	mov	r2, sl
 80059a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80059ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80059ae:	f7ff ff26 	bl	80057fe <__exponent>
 80059b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80059b4:	1813      	adds	r3, r2, r0
 80059b6:	2a01      	cmp	r2, #1
 80059b8:	4681      	mov	r9, r0
 80059ba:	6123      	str	r3, [r4, #16]
 80059bc:	dc02      	bgt.n	80059c4 <_printf_float+0x150>
 80059be:	6822      	ldr	r2, [r4, #0]
 80059c0:	07d2      	lsls	r2, r2, #31
 80059c2:	d501      	bpl.n	80059c8 <_printf_float+0x154>
 80059c4:	3301      	adds	r3, #1
 80059c6:	6123      	str	r3, [r4, #16]
 80059c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0a2      	beq.n	8005916 <_printf_float+0xa2>
 80059d0:	232d      	movs	r3, #45	@ 0x2d
 80059d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059d6:	e79e      	b.n	8005916 <_printf_float+0xa2>
 80059d8:	9a06      	ldr	r2, [sp, #24]
 80059da:	2a47      	cmp	r2, #71	@ 0x47
 80059dc:	d1c2      	bne.n	8005964 <_printf_float+0xf0>
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1c0      	bne.n	8005964 <_printf_float+0xf0>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e7bd      	b.n	8005962 <_printf_float+0xee>
 80059e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059ea:	d9db      	bls.n	80059a4 <_printf_float+0x130>
 80059ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80059f0:	d118      	bne.n	8005a24 <_printf_float+0x1b0>
 80059f2:	2900      	cmp	r1, #0
 80059f4:	6863      	ldr	r3, [r4, #4]
 80059f6:	dd0b      	ble.n	8005a10 <_printf_float+0x19c>
 80059f8:	6121      	str	r1, [r4, #16]
 80059fa:	b913      	cbnz	r3, 8005a02 <_printf_float+0x18e>
 80059fc:	6822      	ldr	r2, [r4, #0]
 80059fe:	07d0      	lsls	r0, r2, #31
 8005a00:	d502      	bpl.n	8005a08 <_printf_float+0x194>
 8005a02:	3301      	adds	r3, #1
 8005a04:	440b      	add	r3, r1
 8005a06:	6123      	str	r3, [r4, #16]
 8005a08:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a0a:	f04f 0900 	mov.w	r9, #0
 8005a0e:	e7db      	b.n	80059c8 <_printf_float+0x154>
 8005a10:	b913      	cbnz	r3, 8005a18 <_printf_float+0x1a4>
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	07d2      	lsls	r2, r2, #31
 8005a16:	d501      	bpl.n	8005a1c <_printf_float+0x1a8>
 8005a18:	3302      	adds	r3, #2
 8005a1a:	e7f4      	b.n	8005a06 <_printf_float+0x192>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e7f2      	b.n	8005a06 <_printf_float+0x192>
 8005a20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a26:	4299      	cmp	r1, r3
 8005a28:	db05      	blt.n	8005a36 <_printf_float+0x1c2>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	6121      	str	r1, [r4, #16]
 8005a2e:	07d8      	lsls	r0, r3, #31
 8005a30:	d5ea      	bpl.n	8005a08 <_printf_float+0x194>
 8005a32:	1c4b      	adds	r3, r1, #1
 8005a34:	e7e7      	b.n	8005a06 <_printf_float+0x192>
 8005a36:	2900      	cmp	r1, #0
 8005a38:	bfd4      	ite	le
 8005a3a:	f1c1 0202 	rsble	r2, r1, #2
 8005a3e:	2201      	movgt	r2, #1
 8005a40:	4413      	add	r3, r2
 8005a42:	e7e0      	b.n	8005a06 <_printf_float+0x192>
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	055a      	lsls	r2, r3, #21
 8005a48:	d407      	bmi.n	8005a5a <_printf_float+0x1e6>
 8005a4a:	6923      	ldr	r3, [r4, #16]
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	4631      	mov	r1, r6
 8005a50:	4628      	mov	r0, r5
 8005a52:	47b8      	blx	r7
 8005a54:	3001      	adds	r0, #1
 8005a56:	d12b      	bne.n	8005ab0 <_printf_float+0x23c>
 8005a58:	e767      	b.n	800592a <_printf_float+0xb6>
 8005a5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a5e:	f240 80dd 	bls.w	8005c1c <_printf_float+0x3a8>
 8005a62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a66:	2200      	movs	r2, #0
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f7fb f845 	bl	8000af8 <__aeabi_dcmpeq>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d033      	beq.n	8005ada <_printf_float+0x266>
 8005a72:	4a37      	ldr	r2, [pc, #220]	@ (8005b50 <_printf_float+0x2dc>)
 8005a74:	2301      	movs	r3, #1
 8005a76:	4631      	mov	r1, r6
 8005a78:	4628      	mov	r0, r5
 8005a7a:	47b8      	blx	r7
 8005a7c:	3001      	adds	r0, #1
 8005a7e:	f43f af54 	beq.w	800592a <_printf_float+0xb6>
 8005a82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005a86:	4543      	cmp	r3, r8
 8005a88:	db02      	blt.n	8005a90 <_printf_float+0x21c>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	07d8      	lsls	r0, r3, #31
 8005a8e:	d50f      	bpl.n	8005ab0 <_printf_float+0x23c>
 8005a90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a94:	4631      	mov	r1, r6
 8005a96:	4628      	mov	r0, r5
 8005a98:	47b8      	blx	r7
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	f43f af45 	beq.w	800592a <_printf_float+0xb6>
 8005aa0:	f04f 0900 	mov.w	r9, #0
 8005aa4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005aa8:	f104 0a1a 	add.w	sl, r4, #26
 8005aac:	45c8      	cmp	r8, r9
 8005aae:	dc09      	bgt.n	8005ac4 <_printf_float+0x250>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	079b      	lsls	r3, r3, #30
 8005ab4:	f100 8103 	bmi.w	8005cbe <_printf_float+0x44a>
 8005ab8:	68e0      	ldr	r0, [r4, #12]
 8005aba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005abc:	4298      	cmp	r0, r3
 8005abe:	bfb8      	it	lt
 8005ac0:	4618      	movlt	r0, r3
 8005ac2:	e734      	b.n	800592e <_printf_float+0xba>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	4652      	mov	r2, sl
 8005ac8:	4631      	mov	r1, r6
 8005aca:	4628      	mov	r0, r5
 8005acc:	47b8      	blx	r7
 8005ace:	3001      	adds	r0, #1
 8005ad0:	f43f af2b 	beq.w	800592a <_printf_float+0xb6>
 8005ad4:	f109 0901 	add.w	r9, r9, #1
 8005ad8:	e7e8      	b.n	8005aac <_printf_float+0x238>
 8005ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dc39      	bgt.n	8005b54 <_printf_float+0x2e0>
 8005ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b50 <_printf_float+0x2dc>)
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4631      	mov	r1, r6
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	47b8      	blx	r7
 8005aea:	3001      	adds	r0, #1
 8005aec:	f43f af1d 	beq.w	800592a <_printf_float+0xb6>
 8005af0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005af4:	ea59 0303 	orrs.w	r3, r9, r3
 8005af8:	d102      	bne.n	8005b00 <_printf_float+0x28c>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	07d9      	lsls	r1, r3, #31
 8005afe:	d5d7      	bpl.n	8005ab0 <_printf_float+0x23c>
 8005b00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b04:	4631      	mov	r1, r6
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	f43f af0d 	beq.w	800592a <_printf_float+0xb6>
 8005b10:	f04f 0a00 	mov.w	sl, #0
 8005b14:	f104 0b1a 	add.w	fp, r4, #26
 8005b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b1a:	425b      	negs	r3, r3
 8005b1c:	4553      	cmp	r3, sl
 8005b1e:	dc01      	bgt.n	8005b24 <_printf_float+0x2b0>
 8005b20:	464b      	mov	r3, r9
 8005b22:	e793      	b.n	8005a4c <_printf_float+0x1d8>
 8005b24:	2301      	movs	r3, #1
 8005b26:	465a      	mov	r2, fp
 8005b28:	4631      	mov	r1, r6
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	47b8      	blx	r7
 8005b2e:	3001      	adds	r0, #1
 8005b30:	f43f aefb 	beq.w	800592a <_printf_float+0xb6>
 8005b34:	f10a 0a01 	add.w	sl, sl, #1
 8005b38:	e7ee      	b.n	8005b18 <_printf_float+0x2a4>
 8005b3a:	bf00      	nop
 8005b3c:	7fefffff 	.word	0x7fefffff
 8005b40:	08008884 	.word	0x08008884
 8005b44:	08008880 	.word	0x08008880
 8005b48:	0800888c 	.word	0x0800888c
 8005b4c:	08008888 	.word	0x08008888
 8005b50:	08008890 	.word	0x08008890
 8005b54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b5a:	4553      	cmp	r3, sl
 8005b5c:	bfa8      	it	ge
 8005b5e:	4653      	movge	r3, sl
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	4699      	mov	r9, r3
 8005b64:	dc36      	bgt.n	8005bd4 <_printf_float+0x360>
 8005b66:	f04f 0b00 	mov.w	fp, #0
 8005b6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b6e:	f104 021a 	add.w	r2, r4, #26
 8005b72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b74:	9306      	str	r3, [sp, #24]
 8005b76:	eba3 0309 	sub.w	r3, r3, r9
 8005b7a:	455b      	cmp	r3, fp
 8005b7c:	dc31      	bgt.n	8005be2 <_printf_float+0x36e>
 8005b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b80:	459a      	cmp	sl, r3
 8005b82:	dc3a      	bgt.n	8005bfa <_printf_float+0x386>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	07da      	lsls	r2, r3, #31
 8005b88:	d437      	bmi.n	8005bfa <_printf_float+0x386>
 8005b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b8c:	ebaa 0903 	sub.w	r9, sl, r3
 8005b90:	9b06      	ldr	r3, [sp, #24]
 8005b92:	ebaa 0303 	sub.w	r3, sl, r3
 8005b96:	4599      	cmp	r9, r3
 8005b98:	bfa8      	it	ge
 8005b9a:	4699      	movge	r9, r3
 8005b9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ba0:	dc33      	bgt.n	8005c0a <_printf_float+0x396>
 8005ba2:	f04f 0800 	mov.w	r8, #0
 8005ba6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005baa:	f104 0b1a 	add.w	fp, r4, #26
 8005bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bb0:	ebaa 0303 	sub.w	r3, sl, r3
 8005bb4:	eba3 0309 	sub.w	r3, r3, r9
 8005bb8:	4543      	cmp	r3, r8
 8005bba:	f77f af79 	ble.w	8005ab0 <_printf_float+0x23c>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	465a      	mov	r2, fp
 8005bc2:	4631      	mov	r1, r6
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	47b8      	blx	r7
 8005bc8:	3001      	adds	r0, #1
 8005bca:	f43f aeae 	beq.w	800592a <_printf_float+0xb6>
 8005bce:	f108 0801 	add.w	r8, r8, #1
 8005bd2:	e7ec      	b.n	8005bae <_printf_float+0x33a>
 8005bd4:	4642      	mov	r2, r8
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4628      	mov	r0, r5
 8005bda:	47b8      	blx	r7
 8005bdc:	3001      	adds	r0, #1
 8005bde:	d1c2      	bne.n	8005b66 <_printf_float+0x2f2>
 8005be0:	e6a3      	b.n	800592a <_printf_float+0xb6>
 8005be2:	2301      	movs	r3, #1
 8005be4:	4631      	mov	r1, r6
 8005be6:	4628      	mov	r0, r5
 8005be8:	9206      	str	r2, [sp, #24]
 8005bea:	47b8      	blx	r7
 8005bec:	3001      	adds	r0, #1
 8005bee:	f43f ae9c 	beq.w	800592a <_printf_float+0xb6>
 8005bf2:	9a06      	ldr	r2, [sp, #24]
 8005bf4:	f10b 0b01 	add.w	fp, fp, #1
 8005bf8:	e7bb      	b.n	8005b72 <_printf_float+0x2fe>
 8005bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bfe:	4631      	mov	r1, r6
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b8      	blx	r7
 8005c04:	3001      	adds	r0, #1
 8005c06:	d1c0      	bne.n	8005b8a <_printf_float+0x316>
 8005c08:	e68f      	b.n	800592a <_printf_float+0xb6>
 8005c0a:	9a06      	ldr	r2, [sp, #24]
 8005c0c:	464b      	mov	r3, r9
 8005c0e:	4442      	add	r2, r8
 8005c10:	4631      	mov	r1, r6
 8005c12:	4628      	mov	r0, r5
 8005c14:	47b8      	blx	r7
 8005c16:	3001      	adds	r0, #1
 8005c18:	d1c3      	bne.n	8005ba2 <_printf_float+0x32e>
 8005c1a:	e686      	b.n	800592a <_printf_float+0xb6>
 8005c1c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c20:	f1ba 0f01 	cmp.w	sl, #1
 8005c24:	dc01      	bgt.n	8005c2a <_printf_float+0x3b6>
 8005c26:	07db      	lsls	r3, r3, #31
 8005c28:	d536      	bpl.n	8005c98 <_printf_float+0x424>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4642      	mov	r2, r8
 8005c2e:	4631      	mov	r1, r6
 8005c30:	4628      	mov	r0, r5
 8005c32:	47b8      	blx	r7
 8005c34:	3001      	adds	r0, #1
 8005c36:	f43f ae78 	beq.w	800592a <_printf_float+0xb6>
 8005c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4628      	mov	r0, r5
 8005c42:	47b8      	blx	r7
 8005c44:	3001      	adds	r0, #1
 8005c46:	f43f ae70 	beq.w	800592a <_printf_float+0xb6>
 8005c4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c4e:	2200      	movs	r2, #0
 8005c50:	2300      	movs	r3, #0
 8005c52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c56:	f7fa ff4f 	bl	8000af8 <__aeabi_dcmpeq>
 8005c5a:	b9c0      	cbnz	r0, 8005c8e <_printf_float+0x41a>
 8005c5c:	4653      	mov	r3, sl
 8005c5e:	f108 0201 	add.w	r2, r8, #1
 8005c62:	4631      	mov	r1, r6
 8005c64:	4628      	mov	r0, r5
 8005c66:	47b8      	blx	r7
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d10c      	bne.n	8005c86 <_printf_float+0x412>
 8005c6c:	e65d      	b.n	800592a <_printf_float+0xb6>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	465a      	mov	r2, fp
 8005c72:	4631      	mov	r1, r6
 8005c74:	4628      	mov	r0, r5
 8005c76:	47b8      	blx	r7
 8005c78:	3001      	adds	r0, #1
 8005c7a:	f43f ae56 	beq.w	800592a <_printf_float+0xb6>
 8005c7e:	f108 0801 	add.w	r8, r8, #1
 8005c82:	45d0      	cmp	r8, sl
 8005c84:	dbf3      	blt.n	8005c6e <_printf_float+0x3fa>
 8005c86:	464b      	mov	r3, r9
 8005c88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c8c:	e6df      	b.n	8005a4e <_printf_float+0x1da>
 8005c8e:	f04f 0800 	mov.w	r8, #0
 8005c92:	f104 0b1a 	add.w	fp, r4, #26
 8005c96:	e7f4      	b.n	8005c82 <_printf_float+0x40e>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	4642      	mov	r2, r8
 8005c9c:	e7e1      	b.n	8005c62 <_printf_float+0x3ee>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	464a      	mov	r2, r9
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b8      	blx	r7
 8005ca8:	3001      	adds	r0, #1
 8005caa:	f43f ae3e 	beq.w	800592a <_printf_float+0xb6>
 8005cae:	f108 0801 	add.w	r8, r8, #1
 8005cb2:	68e3      	ldr	r3, [r4, #12]
 8005cb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005cb6:	1a5b      	subs	r3, r3, r1
 8005cb8:	4543      	cmp	r3, r8
 8005cba:	dcf0      	bgt.n	8005c9e <_printf_float+0x42a>
 8005cbc:	e6fc      	b.n	8005ab8 <_printf_float+0x244>
 8005cbe:	f04f 0800 	mov.w	r8, #0
 8005cc2:	f104 0919 	add.w	r9, r4, #25
 8005cc6:	e7f4      	b.n	8005cb2 <_printf_float+0x43e>

08005cc8 <_printf_common>:
 8005cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ccc:	4616      	mov	r6, r2
 8005cce:	4698      	mov	r8, r3
 8005cd0:	688a      	ldr	r2, [r1, #8]
 8005cd2:	690b      	ldr	r3, [r1, #16]
 8005cd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	bfb8      	it	lt
 8005cdc:	4613      	movlt	r3, r2
 8005cde:	6033      	str	r3, [r6, #0]
 8005ce0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ce4:	4607      	mov	r7, r0
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	b10a      	cbz	r2, 8005cee <_printf_common+0x26>
 8005cea:	3301      	adds	r3, #1
 8005cec:	6033      	str	r3, [r6, #0]
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	0699      	lsls	r1, r3, #26
 8005cf2:	bf42      	ittt	mi
 8005cf4:	6833      	ldrmi	r3, [r6, #0]
 8005cf6:	3302      	addmi	r3, #2
 8005cf8:	6033      	strmi	r3, [r6, #0]
 8005cfa:	6825      	ldr	r5, [r4, #0]
 8005cfc:	f015 0506 	ands.w	r5, r5, #6
 8005d00:	d106      	bne.n	8005d10 <_printf_common+0x48>
 8005d02:	f104 0a19 	add.w	sl, r4, #25
 8005d06:	68e3      	ldr	r3, [r4, #12]
 8005d08:	6832      	ldr	r2, [r6, #0]
 8005d0a:	1a9b      	subs	r3, r3, r2
 8005d0c:	42ab      	cmp	r3, r5
 8005d0e:	dc26      	bgt.n	8005d5e <_printf_common+0x96>
 8005d10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	3b00      	subs	r3, #0
 8005d18:	bf18      	it	ne
 8005d1a:	2301      	movne	r3, #1
 8005d1c:	0692      	lsls	r2, r2, #26
 8005d1e:	d42b      	bmi.n	8005d78 <_printf_common+0xb0>
 8005d20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d24:	4641      	mov	r1, r8
 8005d26:	4638      	mov	r0, r7
 8005d28:	47c8      	blx	r9
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	d01e      	beq.n	8005d6c <_printf_common+0xa4>
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	6922      	ldr	r2, [r4, #16]
 8005d32:	f003 0306 	and.w	r3, r3, #6
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	bf02      	ittt	eq
 8005d3a:	68e5      	ldreq	r5, [r4, #12]
 8005d3c:	6833      	ldreq	r3, [r6, #0]
 8005d3e:	1aed      	subeq	r5, r5, r3
 8005d40:	68a3      	ldr	r3, [r4, #8]
 8005d42:	bf0c      	ite	eq
 8005d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d48:	2500      	movne	r5, #0
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	bfc4      	itt	gt
 8005d4e:	1a9b      	subgt	r3, r3, r2
 8005d50:	18ed      	addgt	r5, r5, r3
 8005d52:	2600      	movs	r6, #0
 8005d54:	341a      	adds	r4, #26
 8005d56:	42b5      	cmp	r5, r6
 8005d58:	d11a      	bne.n	8005d90 <_printf_common+0xc8>
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	e008      	b.n	8005d70 <_printf_common+0xa8>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	4652      	mov	r2, sl
 8005d62:	4641      	mov	r1, r8
 8005d64:	4638      	mov	r0, r7
 8005d66:	47c8      	blx	r9
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d103      	bne.n	8005d74 <_printf_common+0xac>
 8005d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d74:	3501      	adds	r5, #1
 8005d76:	e7c6      	b.n	8005d06 <_printf_common+0x3e>
 8005d78:	18e1      	adds	r1, r4, r3
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	2030      	movs	r0, #48	@ 0x30
 8005d7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d82:	4422      	add	r2, r4
 8005d84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d8c:	3302      	adds	r3, #2
 8005d8e:	e7c7      	b.n	8005d20 <_printf_common+0x58>
 8005d90:	2301      	movs	r3, #1
 8005d92:	4622      	mov	r2, r4
 8005d94:	4641      	mov	r1, r8
 8005d96:	4638      	mov	r0, r7
 8005d98:	47c8      	blx	r9
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	d0e6      	beq.n	8005d6c <_printf_common+0xa4>
 8005d9e:	3601      	adds	r6, #1
 8005da0:	e7d9      	b.n	8005d56 <_printf_common+0x8e>
	...

08005da4 <_printf_i>:
 8005da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005da8:	7e0f      	ldrb	r7, [r1, #24]
 8005daa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dac:	2f78      	cmp	r7, #120	@ 0x78
 8005dae:	4691      	mov	r9, r2
 8005db0:	4680      	mov	r8, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	469a      	mov	sl, r3
 8005db6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dba:	d807      	bhi.n	8005dcc <_printf_i+0x28>
 8005dbc:	2f62      	cmp	r7, #98	@ 0x62
 8005dbe:	d80a      	bhi.n	8005dd6 <_printf_i+0x32>
 8005dc0:	2f00      	cmp	r7, #0
 8005dc2:	f000 80d1 	beq.w	8005f68 <_printf_i+0x1c4>
 8005dc6:	2f58      	cmp	r7, #88	@ 0x58
 8005dc8:	f000 80b8 	beq.w	8005f3c <_printf_i+0x198>
 8005dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005dd4:	e03a      	b.n	8005e4c <_printf_i+0xa8>
 8005dd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005dda:	2b15      	cmp	r3, #21
 8005ddc:	d8f6      	bhi.n	8005dcc <_printf_i+0x28>
 8005dde:	a101      	add	r1, pc, #4	@ (adr r1, 8005de4 <_printf_i+0x40>)
 8005de0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005de4:	08005e3d 	.word	0x08005e3d
 8005de8:	08005e51 	.word	0x08005e51
 8005dec:	08005dcd 	.word	0x08005dcd
 8005df0:	08005dcd 	.word	0x08005dcd
 8005df4:	08005dcd 	.word	0x08005dcd
 8005df8:	08005dcd 	.word	0x08005dcd
 8005dfc:	08005e51 	.word	0x08005e51
 8005e00:	08005dcd 	.word	0x08005dcd
 8005e04:	08005dcd 	.word	0x08005dcd
 8005e08:	08005dcd 	.word	0x08005dcd
 8005e0c:	08005dcd 	.word	0x08005dcd
 8005e10:	08005f4f 	.word	0x08005f4f
 8005e14:	08005e7b 	.word	0x08005e7b
 8005e18:	08005f09 	.word	0x08005f09
 8005e1c:	08005dcd 	.word	0x08005dcd
 8005e20:	08005dcd 	.word	0x08005dcd
 8005e24:	08005f71 	.word	0x08005f71
 8005e28:	08005dcd 	.word	0x08005dcd
 8005e2c:	08005e7b 	.word	0x08005e7b
 8005e30:	08005dcd 	.word	0x08005dcd
 8005e34:	08005dcd 	.word	0x08005dcd
 8005e38:	08005f11 	.word	0x08005f11
 8005e3c:	6833      	ldr	r3, [r6, #0]
 8005e3e:	1d1a      	adds	r2, r3, #4
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6032      	str	r2, [r6, #0]
 8005e44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e09c      	b.n	8005f8a <_printf_i+0x1e6>
 8005e50:	6833      	ldr	r3, [r6, #0]
 8005e52:	6820      	ldr	r0, [r4, #0]
 8005e54:	1d19      	adds	r1, r3, #4
 8005e56:	6031      	str	r1, [r6, #0]
 8005e58:	0606      	lsls	r6, r0, #24
 8005e5a:	d501      	bpl.n	8005e60 <_printf_i+0xbc>
 8005e5c:	681d      	ldr	r5, [r3, #0]
 8005e5e:	e003      	b.n	8005e68 <_printf_i+0xc4>
 8005e60:	0645      	lsls	r5, r0, #25
 8005e62:	d5fb      	bpl.n	8005e5c <_printf_i+0xb8>
 8005e64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e68:	2d00      	cmp	r5, #0
 8005e6a:	da03      	bge.n	8005e74 <_printf_i+0xd0>
 8005e6c:	232d      	movs	r3, #45	@ 0x2d
 8005e6e:	426d      	negs	r5, r5
 8005e70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e74:	4858      	ldr	r0, [pc, #352]	@ (8005fd8 <_printf_i+0x234>)
 8005e76:	230a      	movs	r3, #10
 8005e78:	e011      	b.n	8005e9e <_printf_i+0xfa>
 8005e7a:	6821      	ldr	r1, [r4, #0]
 8005e7c:	6833      	ldr	r3, [r6, #0]
 8005e7e:	0608      	lsls	r0, r1, #24
 8005e80:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e84:	d402      	bmi.n	8005e8c <_printf_i+0xe8>
 8005e86:	0649      	lsls	r1, r1, #25
 8005e88:	bf48      	it	mi
 8005e8a:	b2ad      	uxthmi	r5, r5
 8005e8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e8e:	4852      	ldr	r0, [pc, #328]	@ (8005fd8 <_printf_i+0x234>)
 8005e90:	6033      	str	r3, [r6, #0]
 8005e92:	bf14      	ite	ne
 8005e94:	230a      	movne	r3, #10
 8005e96:	2308      	moveq	r3, #8
 8005e98:	2100      	movs	r1, #0
 8005e9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e9e:	6866      	ldr	r6, [r4, #4]
 8005ea0:	60a6      	str	r6, [r4, #8]
 8005ea2:	2e00      	cmp	r6, #0
 8005ea4:	db05      	blt.n	8005eb2 <_printf_i+0x10e>
 8005ea6:	6821      	ldr	r1, [r4, #0]
 8005ea8:	432e      	orrs	r6, r5
 8005eaa:	f021 0104 	bic.w	r1, r1, #4
 8005eae:	6021      	str	r1, [r4, #0]
 8005eb0:	d04b      	beq.n	8005f4a <_printf_i+0x1a6>
 8005eb2:	4616      	mov	r6, r2
 8005eb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005eb8:	fb03 5711 	mls	r7, r3, r1, r5
 8005ebc:	5dc7      	ldrb	r7, [r0, r7]
 8005ebe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ec2:	462f      	mov	r7, r5
 8005ec4:	42bb      	cmp	r3, r7
 8005ec6:	460d      	mov	r5, r1
 8005ec8:	d9f4      	bls.n	8005eb4 <_printf_i+0x110>
 8005eca:	2b08      	cmp	r3, #8
 8005ecc:	d10b      	bne.n	8005ee6 <_printf_i+0x142>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	07df      	lsls	r7, r3, #31
 8005ed2:	d508      	bpl.n	8005ee6 <_printf_i+0x142>
 8005ed4:	6923      	ldr	r3, [r4, #16]
 8005ed6:	6861      	ldr	r1, [r4, #4]
 8005ed8:	4299      	cmp	r1, r3
 8005eda:	bfde      	ittt	le
 8005edc:	2330      	movle	r3, #48	@ 0x30
 8005ede:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ee2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ee6:	1b92      	subs	r2, r2, r6
 8005ee8:	6122      	str	r2, [r4, #16]
 8005eea:	f8cd a000 	str.w	sl, [sp]
 8005eee:	464b      	mov	r3, r9
 8005ef0:	aa03      	add	r2, sp, #12
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	4640      	mov	r0, r8
 8005ef6:	f7ff fee7 	bl	8005cc8 <_printf_common>
 8005efa:	3001      	adds	r0, #1
 8005efc:	d14a      	bne.n	8005f94 <_printf_i+0x1f0>
 8005efe:	f04f 30ff 	mov.w	r0, #4294967295
 8005f02:	b004      	add	sp, #16
 8005f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	f043 0320 	orr.w	r3, r3, #32
 8005f0e:	6023      	str	r3, [r4, #0]
 8005f10:	4832      	ldr	r0, [pc, #200]	@ (8005fdc <_printf_i+0x238>)
 8005f12:	2778      	movs	r7, #120	@ 0x78
 8005f14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	6831      	ldr	r1, [r6, #0]
 8005f1c:	061f      	lsls	r7, r3, #24
 8005f1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f22:	d402      	bmi.n	8005f2a <_printf_i+0x186>
 8005f24:	065f      	lsls	r7, r3, #25
 8005f26:	bf48      	it	mi
 8005f28:	b2ad      	uxthmi	r5, r5
 8005f2a:	6031      	str	r1, [r6, #0]
 8005f2c:	07d9      	lsls	r1, r3, #31
 8005f2e:	bf44      	itt	mi
 8005f30:	f043 0320 	orrmi.w	r3, r3, #32
 8005f34:	6023      	strmi	r3, [r4, #0]
 8005f36:	b11d      	cbz	r5, 8005f40 <_printf_i+0x19c>
 8005f38:	2310      	movs	r3, #16
 8005f3a:	e7ad      	b.n	8005e98 <_printf_i+0xf4>
 8005f3c:	4826      	ldr	r0, [pc, #152]	@ (8005fd8 <_printf_i+0x234>)
 8005f3e:	e7e9      	b.n	8005f14 <_printf_i+0x170>
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	f023 0320 	bic.w	r3, r3, #32
 8005f46:	6023      	str	r3, [r4, #0]
 8005f48:	e7f6      	b.n	8005f38 <_printf_i+0x194>
 8005f4a:	4616      	mov	r6, r2
 8005f4c:	e7bd      	b.n	8005eca <_printf_i+0x126>
 8005f4e:	6833      	ldr	r3, [r6, #0]
 8005f50:	6825      	ldr	r5, [r4, #0]
 8005f52:	6961      	ldr	r1, [r4, #20]
 8005f54:	1d18      	adds	r0, r3, #4
 8005f56:	6030      	str	r0, [r6, #0]
 8005f58:	062e      	lsls	r6, r5, #24
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	d501      	bpl.n	8005f62 <_printf_i+0x1be>
 8005f5e:	6019      	str	r1, [r3, #0]
 8005f60:	e002      	b.n	8005f68 <_printf_i+0x1c4>
 8005f62:	0668      	lsls	r0, r5, #25
 8005f64:	d5fb      	bpl.n	8005f5e <_printf_i+0x1ba>
 8005f66:	8019      	strh	r1, [r3, #0]
 8005f68:	2300      	movs	r3, #0
 8005f6a:	6123      	str	r3, [r4, #16]
 8005f6c:	4616      	mov	r6, r2
 8005f6e:	e7bc      	b.n	8005eea <_printf_i+0x146>
 8005f70:	6833      	ldr	r3, [r6, #0]
 8005f72:	1d1a      	adds	r2, r3, #4
 8005f74:	6032      	str	r2, [r6, #0]
 8005f76:	681e      	ldr	r6, [r3, #0]
 8005f78:	6862      	ldr	r2, [r4, #4]
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	f7fa f93f 	bl	8000200 <memchr>
 8005f82:	b108      	cbz	r0, 8005f88 <_printf_i+0x1e4>
 8005f84:	1b80      	subs	r0, r0, r6
 8005f86:	6060      	str	r0, [r4, #4]
 8005f88:	6863      	ldr	r3, [r4, #4]
 8005f8a:	6123      	str	r3, [r4, #16]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f92:	e7aa      	b.n	8005eea <_printf_i+0x146>
 8005f94:	6923      	ldr	r3, [r4, #16]
 8005f96:	4632      	mov	r2, r6
 8005f98:	4649      	mov	r1, r9
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	47d0      	blx	sl
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d0ad      	beq.n	8005efe <_printf_i+0x15a>
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	079b      	lsls	r3, r3, #30
 8005fa6:	d413      	bmi.n	8005fd0 <_printf_i+0x22c>
 8005fa8:	68e0      	ldr	r0, [r4, #12]
 8005faa:	9b03      	ldr	r3, [sp, #12]
 8005fac:	4298      	cmp	r0, r3
 8005fae:	bfb8      	it	lt
 8005fb0:	4618      	movlt	r0, r3
 8005fb2:	e7a6      	b.n	8005f02 <_printf_i+0x15e>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4632      	mov	r2, r6
 8005fb8:	4649      	mov	r1, r9
 8005fba:	4640      	mov	r0, r8
 8005fbc:	47d0      	blx	sl
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	d09d      	beq.n	8005efe <_printf_i+0x15a>
 8005fc2:	3501      	adds	r5, #1
 8005fc4:	68e3      	ldr	r3, [r4, #12]
 8005fc6:	9903      	ldr	r1, [sp, #12]
 8005fc8:	1a5b      	subs	r3, r3, r1
 8005fca:	42ab      	cmp	r3, r5
 8005fcc:	dcf2      	bgt.n	8005fb4 <_printf_i+0x210>
 8005fce:	e7eb      	b.n	8005fa8 <_printf_i+0x204>
 8005fd0:	2500      	movs	r5, #0
 8005fd2:	f104 0619 	add.w	r6, r4, #25
 8005fd6:	e7f5      	b.n	8005fc4 <_printf_i+0x220>
 8005fd8:	08008892 	.word	0x08008892
 8005fdc:	080088a3 	.word	0x080088a3

08005fe0 <std>:
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	b510      	push	{r4, lr}
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8005fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fee:	6083      	str	r3, [r0, #8]
 8005ff0:	8181      	strh	r1, [r0, #12]
 8005ff2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ff4:	81c2      	strh	r2, [r0, #14]
 8005ff6:	6183      	str	r3, [r0, #24]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	2208      	movs	r2, #8
 8005ffc:	305c      	adds	r0, #92	@ 0x5c
 8005ffe:	f000 f9ab 	bl	8006358 <memset>
 8006002:	4b0d      	ldr	r3, [pc, #52]	@ (8006038 <std+0x58>)
 8006004:	6263      	str	r3, [r4, #36]	@ 0x24
 8006006:	4b0d      	ldr	r3, [pc, #52]	@ (800603c <std+0x5c>)
 8006008:	62a3      	str	r3, [r4, #40]	@ 0x28
 800600a:	4b0d      	ldr	r3, [pc, #52]	@ (8006040 <std+0x60>)
 800600c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800600e:	4b0d      	ldr	r3, [pc, #52]	@ (8006044 <std+0x64>)
 8006010:	6323      	str	r3, [r4, #48]	@ 0x30
 8006012:	4b0d      	ldr	r3, [pc, #52]	@ (8006048 <std+0x68>)
 8006014:	6224      	str	r4, [r4, #32]
 8006016:	429c      	cmp	r4, r3
 8006018:	d006      	beq.n	8006028 <std+0x48>
 800601a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800601e:	4294      	cmp	r4, r2
 8006020:	d002      	beq.n	8006028 <std+0x48>
 8006022:	33d0      	adds	r3, #208	@ 0xd0
 8006024:	429c      	cmp	r4, r3
 8006026:	d105      	bne.n	8006034 <std+0x54>
 8006028:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800602c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006030:	f000 ba0e 	b.w	8006450 <__retarget_lock_init_recursive>
 8006034:	bd10      	pop	{r4, pc}
 8006036:	bf00      	nop
 8006038:	080061a9 	.word	0x080061a9
 800603c:	080061cb 	.word	0x080061cb
 8006040:	08006203 	.word	0x08006203
 8006044:	08006227 	.word	0x08006227
 8006048:	20000548 	.word	0x20000548

0800604c <stdio_exit_handler>:
 800604c:	4a02      	ldr	r2, [pc, #8]	@ (8006058 <stdio_exit_handler+0xc>)
 800604e:	4903      	ldr	r1, [pc, #12]	@ (800605c <stdio_exit_handler+0x10>)
 8006050:	4803      	ldr	r0, [pc, #12]	@ (8006060 <stdio_exit_handler+0x14>)
 8006052:	f000 b869 	b.w	8006128 <_fwalk_sglue>
 8006056:	bf00      	nop
 8006058:	200000fc 	.word	0x200000fc
 800605c:	08008091 	.word	0x08008091
 8006060:	2000010c 	.word	0x2000010c

08006064 <cleanup_stdio>:
 8006064:	6841      	ldr	r1, [r0, #4]
 8006066:	4b0c      	ldr	r3, [pc, #48]	@ (8006098 <cleanup_stdio+0x34>)
 8006068:	4299      	cmp	r1, r3
 800606a:	b510      	push	{r4, lr}
 800606c:	4604      	mov	r4, r0
 800606e:	d001      	beq.n	8006074 <cleanup_stdio+0x10>
 8006070:	f002 f80e 	bl	8008090 <_fflush_r>
 8006074:	68a1      	ldr	r1, [r4, #8]
 8006076:	4b09      	ldr	r3, [pc, #36]	@ (800609c <cleanup_stdio+0x38>)
 8006078:	4299      	cmp	r1, r3
 800607a:	d002      	beq.n	8006082 <cleanup_stdio+0x1e>
 800607c:	4620      	mov	r0, r4
 800607e:	f002 f807 	bl	8008090 <_fflush_r>
 8006082:	68e1      	ldr	r1, [r4, #12]
 8006084:	4b06      	ldr	r3, [pc, #24]	@ (80060a0 <cleanup_stdio+0x3c>)
 8006086:	4299      	cmp	r1, r3
 8006088:	d004      	beq.n	8006094 <cleanup_stdio+0x30>
 800608a:	4620      	mov	r0, r4
 800608c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006090:	f001 bffe 	b.w	8008090 <_fflush_r>
 8006094:	bd10      	pop	{r4, pc}
 8006096:	bf00      	nop
 8006098:	20000548 	.word	0x20000548
 800609c:	200005b0 	.word	0x200005b0
 80060a0:	20000618 	.word	0x20000618

080060a4 <global_stdio_init.part.0>:
 80060a4:	b510      	push	{r4, lr}
 80060a6:	4b0b      	ldr	r3, [pc, #44]	@ (80060d4 <global_stdio_init.part.0+0x30>)
 80060a8:	4c0b      	ldr	r4, [pc, #44]	@ (80060d8 <global_stdio_init.part.0+0x34>)
 80060aa:	4a0c      	ldr	r2, [pc, #48]	@ (80060dc <global_stdio_init.part.0+0x38>)
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	4620      	mov	r0, r4
 80060b0:	2200      	movs	r2, #0
 80060b2:	2104      	movs	r1, #4
 80060b4:	f7ff ff94 	bl	8005fe0 <std>
 80060b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060bc:	2201      	movs	r2, #1
 80060be:	2109      	movs	r1, #9
 80060c0:	f7ff ff8e 	bl	8005fe0 <std>
 80060c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060c8:	2202      	movs	r2, #2
 80060ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060ce:	2112      	movs	r1, #18
 80060d0:	f7ff bf86 	b.w	8005fe0 <std>
 80060d4:	20000680 	.word	0x20000680
 80060d8:	20000548 	.word	0x20000548
 80060dc:	0800604d 	.word	0x0800604d

080060e0 <__sfp_lock_acquire>:
 80060e0:	4801      	ldr	r0, [pc, #4]	@ (80060e8 <__sfp_lock_acquire+0x8>)
 80060e2:	f000 b9b6 	b.w	8006452 <__retarget_lock_acquire_recursive>
 80060e6:	bf00      	nop
 80060e8:	20000689 	.word	0x20000689

080060ec <__sfp_lock_release>:
 80060ec:	4801      	ldr	r0, [pc, #4]	@ (80060f4 <__sfp_lock_release+0x8>)
 80060ee:	f000 b9b1 	b.w	8006454 <__retarget_lock_release_recursive>
 80060f2:	bf00      	nop
 80060f4:	20000689 	.word	0x20000689

080060f8 <__sinit>:
 80060f8:	b510      	push	{r4, lr}
 80060fa:	4604      	mov	r4, r0
 80060fc:	f7ff fff0 	bl	80060e0 <__sfp_lock_acquire>
 8006100:	6a23      	ldr	r3, [r4, #32]
 8006102:	b11b      	cbz	r3, 800610c <__sinit+0x14>
 8006104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006108:	f7ff bff0 	b.w	80060ec <__sfp_lock_release>
 800610c:	4b04      	ldr	r3, [pc, #16]	@ (8006120 <__sinit+0x28>)
 800610e:	6223      	str	r3, [r4, #32]
 8006110:	4b04      	ldr	r3, [pc, #16]	@ (8006124 <__sinit+0x2c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1f5      	bne.n	8006104 <__sinit+0xc>
 8006118:	f7ff ffc4 	bl	80060a4 <global_stdio_init.part.0>
 800611c:	e7f2      	b.n	8006104 <__sinit+0xc>
 800611e:	bf00      	nop
 8006120:	08006065 	.word	0x08006065
 8006124:	20000680 	.word	0x20000680

08006128 <_fwalk_sglue>:
 8006128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800612c:	4607      	mov	r7, r0
 800612e:	4688      	mov	r8, r1
 8006130:	4614      	mov	r4, r2
 8006132:	2600      	movs	r6, #0
 8006134:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006138:	f1b9 0901 	subs.w	r9, r9, #1
 800613c:	d505      	bpl.n	800614a <_fwalk_sglue+0x22>
 800613e:	6824      	ldr	r4, [r4, #0]
 8006140:	2c00      	cmp	r4, #0
 8006142:	d1f7      	bne.n	8006134 <_fwalk_sglue+0xc>
 8006144:	4630      	mov	r0, r6
 8006146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800614a:	89ab      	ldrh	r3, [r5, #12]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d907      	bls.n	8006160 <_fwalk_sglue+0x38>
 8006150:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006154:	3301      	adds	r3, #1
 8006156:	d003      	beq.n	8006160 <_fwalk_sglue+0x38>
 8006158:	4629      	mov	r1, r5
 800615a:	4638      	mov	r0, r7
 800615c:	47c0      	blx	r8
 800615e:	4306      	orrs	r6, r0
 8006160:	3568      	adds	r5, #104	@ 0x68
 8006162:	e7e9      	b.n	8006138 <_fwalk_sglue+0x10>

08006164 <siprintf>:
 8006164:	b40e      	push	{r1, r2, r3}
 8006166:	b510      	push	{r4, lr}
 8006168:	b09d      	sub	sp, #116	@ 0x74
 800616a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800616c:	9002      	str	r0, [sp, #8]
 800616e:	9006      	str	r0, [sp, #24]
 8006170:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006174:	480a      	ldr	r0, [pc, #40]	@ (80061a0 <siprintf+0x3c>)
 8006176:	9107      	str	r1, [sp, #28]
 8006178:	9104      	str	r1, [sp, #16]
 800617a:	490a      	ldr	r1, [pc, #40]	@ (80061a4 <siprintf+0x40>)
 800617c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006180:	9105      	str	r1, [sp, #20]
 8006182:	2400      	movs	r4, #0
 8006184:	a902      	add	r1, sp, #8
 8006186:	6800      	ldr	r0, [r0, #0]
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800618c:	f001 fcbe 	bl	8007b0c <_svfiprintf_r>
 8006190:	9b02      	ldr	r3, [sp, #8]
 8006192:	701c      	strb	r4, [r3, #0]
 8006194:	b01d      	add	sp, #116	@ 0x74
 8006196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800619a:	b003      	add	sp, #12
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	20000108 	.word	0x20000108
 80061a4:	ffff0208 	.word	0xffff0208

080061a8 <__sread>:
 80061a8:	b510      	push	{r4, lr}
 80061aa:	460c      	mov	r4, r1
 80061ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b0:	f000 f900 	bl	80063b4 <_read_r>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	bfab      	itete	ge
 80061b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80061ba:	89a3      	ldrhlt	r3, [r4, #12]
 80061bc:	181b      	addge	r3, r3, r0
 80061be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061c2:	bfac      	ite	ge
 80061c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80061c6:	81a3      	strhlt	r3, [r4, #12]
 80061c8:	bd10      	pop	{r4, pc}

080061ca <__swrite>:
 80061ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ce:	461f      	mov	r7, r3
 80061d0:	898b      	ldrh	r3, [r1, #12]
 80061d2:	05db      	lsls	r3, r3, #23
 80061d4:	4605      	mov	r5, r0
 80061d6:	460c      	mov	r4, r1
 80061d8:	4616      	mov	r6, r2
 80061da:	d505      	bpl.n	80061e8 <__swrite+0x1e>
 80061dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e0:	2302      	movs	r3, #2
 80061e2:	2200      	movs	r2, #0
 80061e4:	f000 f8d4 	bl	8006390 <_lseek_r>
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061f2:	81a3      	strh	r3, [r4, #12]
 80061f4:	4632      	mov	r2, r6
 80061f6:	463b      	mov	r3, r7
 80061f8:	4628      	mov	r0, r5
 80061fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061fe:	f000 b8eb 	b.w	80063d8 <_write_r>

08006202 <__sseek>:
 8006202:	b510      	push	{r4, lr}
 8006204:	460c      	mov	r4, r1
 8006206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800620a:	f000 f8c1 	bl	8006390 <_lseek_r>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	89a3      	ldrh	r3, [r4, #12]
 8006212:	bf15      	itete	ne
 8006214:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006216:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800621a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800621e:	81a3      	strheq	r3, [r4, #12]
 8006220:	bf18      	it	ne
 8006222:	81a3      	strhne	r3, [r4, #12]
 8006224:	bd10      	pop	{r4, pc}

08006226 <__sclose>:
 8006226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800622a:	f000 b8a1 	b.w	8006370 <_close_r>

0800622e <__swbuf_r>:
 800622e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006230:	460e      	mov	r6, r1
 8006232:	4614      	mov	r4, r2
 8006234:	4605      	mov	r5, r0
 8006236:	b118      	cbz	r0, 8006240 <__swbuf_r+0x12>
 8006238:	6a03      	ldr	r3, [r0, #32]
 800623a:	b90b      	cbnz	r3, 8006240 <__swbuf_r+0x12>
 800623c:	f7ff ff5c 	bl	80060f8 <__sinit>
 8006240:	69a3      	ldr	r3, [r4, #24]
 8006242:	60a3      	str	r3, [r4, #8]
 8006244:	89a3      	ldrh	r3, [r4, #12]
 8006246:	071a      	lsls	r2, r3, #28
 8006248:	d501      	bpl.n	800624e <__swbuf_r+0x20>
 800624a:	6923      	ldr	r3, [r4, #16]
 800624c:	b943      	cbnz	r3, 8006260 <__swbuf_r+0x32>
 800624e:	4621      	mov	r1, r4
 8006250:	4628      	mov	r0, r5
 8006252:	f000 f82b 	bl	80062ac <__swsetup_r>
 8006256:	b118      	cbz	r0, 8006260 <__swbuf_r+0x32>
 8006258:	f04f 37ff 	mov.w	r7, #4294967295
 800625c:	4638      	mov	r0, r7
 800625e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	6922      	ldr	r2, [r4, #16]
 8006264:	1a98      	subs	r0, r3, r2
 8006266:	6963      	ldr	r3, [r4, #20]
 8006268:	b2f6      	uxtb	r6, r6
 800626a:	4283      	cmp	r3, r0
 800626c:	4637      	mov	r7, r6
 800626e:	dc05      	bgt.n	800627c <__swbuf_r+0x4e>
 8006270:	4621      	mov	r1, r4
 8006272:	4628      	mov	r0, r5
 8006274:	f001 ff0c 	bl	8008090 <_fflush_r>
 8006278:	2800      	cmp	r0, #0
 800627a:	d1ed      	bne.n	8006258 <__swbuf_r+0x2a>
 800627c:	68a3      	ldr	r3, [r4, #8]
 800627e:	3b01      	subs	r3, #1
 8006280:	60a3      	str	r3, [r4, #8]
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	6022      	str	r2, [r4, #0]
 8006288:	701e      	strb	r6, [r3, #0]
 800628a:	6962      	ldr	r2, [r4, #20]
 800628c:	1c43      	adds	r3, r0, #1
 800628e:	429a      	cmp	r2, r3
 8006290:	d004      	beq.n	800629c <__swbuf_r+0x6e>
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	07db      	lsls	r3, r3, #31
 8006296:	d5e1      	bpl.n	800625c <__swbuf_r+0x2e>
 8006298:	2e0a      	cmp	r6, #10
 800629a:	d1df      	bne.n	800625c <__swbuf_r+0x2e>
 800629c:	4621      	mov	r1, r4
 800629e:	4628      	mov	r0, r5
 80062a0:	f001 fef6 	bl	8008090 <_fflush_r>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d0d9      	beq.n	800625c <__swbuf_r+0x2e>
 80062a8:	e7d6      	b.n	8006258 <__swbuf_r+0x2a>
	...

080062ac <__swsetup_r>:
 80062ac:	b538      	push	{r3, r4, r5, lr}
 80062ae:	4b29      	ldr	r3, [pc, #164]	@ (8006354 <__swsetup_r+0xa8>)
 80062b0:	4605      	mov	r5, r0
 80062b2:	6818      	ldr	r0, [r3, #0]
 80062b4:	460c      	mov	r4, r1
 80062b6:	b118      	cbz	r0, 80062c0 <__swsetup_r+0x14>
 80062b8:	6a03      	ldr	r3, [r0, #32]
 80062ba:	b90b      	cbnz	r3, 80062c0 <__swsetup_r+0x14>
 80062bc:	f7ff ff1c 	bl	80060f8 <__sinit>
 80062c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062c4:	0719      	lsls	r1, r3, #28
 80062c6:	d422      	bmi.n	800630e <__swsetup_r+0x62>
 80062c8:	06da      	lsls	r2, r3, #27
 80062ca:	d407      	bmi.n	80062dc <__swsetup_r+0x30>
 80062cc:	2209      	movs	r2, #9
 80062ce:	602a      	str	r2, [r5, #0]
 80062d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062d4:	81a3      	strh	r3, [r4, #12]
 80062d6:	f04f 30ff 	mov.w	r0, #4294967295
 80062da:	e033      	b.n	8006344 <__swsetup_r+0x98>
 80062dc:	0758      	lsls	r0, r3, #29
 80062de:	d512      	bpl.n	8006306 <__swsetup_r+0x5a>
 80062e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062e2:	b141      	cbz	r1, 80062f6 <__swsetup_r+0x4a>
 80062e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062e8:	4299      	cmp	r1, r3
 80062ea:	d002      	beq.n	80062f2 <__swsetup_r+0x46>
 80062ec:	4628      	mov	r0, r5
 80062ee:	f000 ff37 	bl	8007160 <_free_r>
 80062f2:	2300      	movs	r3, #0
 80062f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80062fc:	81a3      	strh	r3, [r4, #12]
 80062fe:	2300      	movs	r3, #0
 8006300:	6063      	str	r3, [r4, #4]
 8006302:	6923      	ldr	r3, [r4, #16]
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	f043 0308 	orr.w	r3, r3, #8
 800630c:	81a3      	strh	r3, [r4, #12]
 800630e:	6923      	ldr	r3, [r4, #16]
 8006310:	b94b      	cbnz	r3, 8006326 <__swsetup_r+0x7a>
 8006312:	89a3      	ldrh	r3, [r4, #12]
 8006314:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800631c:	d003      	beq.n	8006326 <__swsetup_r+0x7a>
 800631e:	4621      	mov	r1, r4
 8006320:	4628      	mov	r0, r5
 8006322:	f001 ff15 	bl	8008150 <__smakebuf_r>
 8006326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800632a:	f013 0201 	ands.w	r2, r3, #1
 800632e:	d00a      	beq.n	8006346 <__swsetup_r+0x9a>
 8006330:	2200      	movs	r2, #0
 8006332:	60a2      	str	r2, [r4, #8]
 8006334:	6962      	ldr	r2, [r4, #20]
 8006336:	4252      	negs	r2, r2
 8006338:	61a2      	str	r2, [r4, #24]
 800633a:	6922      	ldr	r2, [r4, #16]
 800633c:	b942      	cbnz	r2, 8006350 <__swsetup_r+0xa4>
 800633e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006342:	d1c5      	bne.n	80062d0 <__swsetup_r+0x24>
 8006344:	bd38      	pop	{r3, r4, r5, pc}
 8006346:	0799      	lsls	r1, r3, #30
 8006348:	bf58      	it	pl
 800634a:	6962      	ldrpl	r2, [r4, #20]
 800634c:	60a2      	str	r2, [r4, #8]
 800634e:	e7f4      	b.n	800633a <__swsetup_r+0x8e>
 8006350:	2000      	movs	r0, #0
 8006352:	e7f7      	b.n	8006344 <__swsetup_r+0x98>
 8006354:	20000108 	.word	0x20000108

08006358 <memset>:
 8006358:	4402      	add	r2, r0
 800635a:	4603      	mov	r3, r0
 800635c:	4293      	cmp	r3, r2
 800635e:	d100      	bne.n	8006362 <memset+0xa>
 8006360:	4770      	bx	lr
 8006362:	f803 1b01 	strb.w	r1, [r3], #1
 8006366:	e7f9      	b.n	800635c <memset+0x4>

08006368 <_localeconv_r>:
 8006368:	4800      	ldr	r0, [pc, #0]	@ (800636c <_localeconv_r+0x4>)
 800636a:	4770      	bx	lr
 800636c:	20000248 	.word	0x20000248

08006370 <_close_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	4d06      	ldr	r5, [pc, #24]	@ (800638c <_close_r+0x1c>)
 8006374:	2300      	movs	r3, #0
 8006376:	4604      	mov	r4, r0
 8006378:	4608      	mov	r0, r1
 800637a:	602b      	str	r3, [r5, #0]
 800637c:	f7ff f966 	bl	800564c <_close>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_close_r+0x1a>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	b103      	cbz	r3, 800638a <_close_r+0x1a>
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	20000684 	.word	0x20000684

08006390 <_lseek_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d07      	ldr	r5, [pc, #28]	@ (80063b0 <_lseek_r+0x20>)
 8006394:	4604      	mov	r4, r0
 8006396:	4608      	mov	r0, r1
 8006398:	4611      	mov	r1, r2
 800639a:	2200      	movs	r2, #0
 800639c:	602a      	str	r2, [r5, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	f7ff f915 	bl	80055ce <_lseek>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d102      	bne.n	80063ae <_lseek_r+0x1e>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	b103      	cbz	r3, 80063ae <_lseek_r+0x1e>
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	bd38      	pop	{r3, r4, r5, pc}
 80063b0:	20000684 	.word	0x20000684

080063b4 <_read_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4d07      	ldr	r5, [pc, #28]	@ (80063d4 <_read_r+0x20>)
 80063b8:	4604      	mov	r4, r0
 80063ba:	4608      	mov	r0, r1
 80063bc:	4611      	mov	r1, r2
 80063be:	2200      	movs	r2, #0
 80063c0:	602a      	str	r2, [r5, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	f7ff f8ad 	bl	8005522 <_read>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d102      	bne.n	80063d2 <_read_r+0x1e>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	b103      	cbz	r3, 80063d2 <_read_r+0x1e>
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	20000684 	.word	0x20000684

080063d8 <_write_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	4d07      	ldr	r5, [pc, #28]	@ (80063f8 <_write_r+0x20>)
 80063dc:	4604      	mov	r4, r0
 80063de:	4608      	mov	r0, r1
 80063e0:	4611      	mov	r1, r2
 80063e2:	2200      	movs	r2, #0
 80063e4:	602a      	str	r2, [r5, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	f7ff f903 	bl	80055f2 <_write>
 80063ec:	1c43      	adds	r3, r0, #1
 80063ee:	d102      	bne.n	80063f6 <_write_r+0x1e>
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	b103      	cbz	r3, 80063f6 <_write_r+0x1e>
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	bd38      	pop	{r3, r4, r5, pc}
 80063f8:	20000684 	.word	0x20000684

080063fc <__errno>:
 80063fc:	4b01      	ldr	r3, [pc, #4]	@ (8006404 <__errno+0x8>)
 80063fe:	6818      	ldr	r0, [r3, #0]
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	20000108 	.word	0x20000108

08006408 <__libc_init_array>:
 8006408:	b570      	push	{r4, r5, r6, lr}
 800640a:	4d0d      	ldr	r5, [pc, #52]	@ (8006440 <__libc_init_array+0x38>)
 800640c:	4c0d      	ldr	r4, [pc, #52]	@ (8006444 <__libc_init_array+0x3c>)
 800640e:	1b64      	subs	r4, r4, r5
 8006410:	10a4      	asrs	r4, r4, #2
 8006412:	2600      	movs	r6, #0
 8006414:	42a6      	cmp	r6, r4
 8006416:	d109      	bne.n	800642c <__libc_init_array+0x24>
 8006418:	4d0b      	ldr	r5, [pc, #44]	@ (8006448 <__libc_init_array+0x40>)
 800641a:	4c0c      	ldr	r4, [pc, #48]	@ (800644c <__libc_init_array+0x44>)
 800641c:	f002 f800 	bl	8008420 <_init>
 8006420:	1b64      	subs	r4, r4, r5
 8006422:	10a4      	asrs	r4, r4, #2
 8006424:	2600      	movs	r6, #0
 8006426:	42a6      	cmp	r6, r4
 8006428:	d105      	bne.n	8006436 <__libc_init_array+0x2e>
 800642a:	bd70      	pop	{r4, r5, r6, pc}
 800642c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006430:	4798      	blx	r3
 8006432:	3601      	adds	r6, #1
 8006434:	e7ee      	b.n	8006414 <__libc_init_array+0xc>
 8006436:	f855 3b04 	ldr.w	r3, [r5], #4
 800643a:	4798      	blx	r3
 800643c:	3601      	adds	r6, #1
 800643e:	e7f2      	b.n	8006426 <__libc_init_array+0x1e>
 8006440:	08008bfc 	.word	0x08008bfc
 8006444:	08008bfc 	.word	0x08008bfc
 8006448:	08008bfc 	.word	0x08008bfc
 800644c:	08008c00 	.word	0x08008c00

08006450 <__retarget_lock_init_recursive>:
 8006450:	4770      	bx	lr

08006452 <__retarget_lock_acquire_recursive>:
 8006452:	4770      	bx	lr

08006454 <__retarget_lock_release_recursive>:
 8006454:	4770      	bx	lr

08006456 <memcpy>:
 8006456:	440a      	add	r2, r1
 8006458:	4291      	cmp	r1, r2
 800645a:	f100 33ff 	add.w	r3, r0, #4294967295
 800645e:	d100      	bne.n	8006462 <memcpy+0xc>
 8006460:	4770      	bx	lr
 8006462:	b510      	push	{r4, lr}
 8006464:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006468:	f803 4f01 	strb.w	r4, [r3, #1]!
 800646c:	4291      	cmp	r1, r2
 800646e:	d1f9      	bne.n	8006464 <memcpy+0xe>
 8006470:	bd10      	pop	{r4, pc}
	...

08006474 <__assert_func>:
 8006474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006476:	4614      	mov	r4, r2
 8006478:	461a      	mov	r2, r3
 800647a:	4b09      	ldr	r3, [pc, #36]	@ (80064a0 <__assert_func+0x2c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4605      	mov	r5, r0
 8006480:	68d8      	ldr	r0, [r3, #12]
 8006482:	b14c      	cbz	r4, 8006498 <__assert_func+0x24>
 8006484:	4b07      	ldr	r3, [pc, #28]	@ (80064a4 <__assert_func+0x30>)
 8006486:	9100      	str	r1, [sp, #0]
 8006488:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800648c:	4906      	ldr	r1, [pc, #24]	@ (80064a8 <__assert_func+0x34>)
 800648e:	462b      	mov	r3, r5
 8006490:	f001 fe26 	bl	80080e0 <fiprintf>
 8006494:	f001 fee4 	bl	8008260 <abort>
 8006498:	4b04      	ldr	r3, [pc, #16]	@ (80064ac <__assert_func+0x38>)
 800649a:	461c      	mov	r4, r3
 800649c:	e7f3      	b.n	8006486 <__assert_func+0x12>
 800649e:	bf00      	nop
 80064a0:	20000108 	.word	0x20000108
 80064a4:	080088b4 	.word	0x080088b4
 80064a8:	080088c1 	.word	0x080088c1
 80064ac:	080088ef 	.word	0x080088ef

080064b0 <quorem>:
 80064b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	6903      	ldr	r3, [r0, #16]
 80064b6:	690c      	ldr	r4, [r1, #16]
 80064b8:	42a3      	cmp	r3, r4
 80064ba:	4607      	mov	r7, r0
 80064bc:	db7e      	blt.n	80065bc <quorem+0x10c>
 80064be:	3c01      	subs	r4, #1
 80064c0:	f101 0814 	add.w	r8, r1, #20
 80064c4:	00a3      	lsls	r3, r4, #2
 80064c6:	f100 0514 	add.w	r5, r0, #20
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064d0:	9301      	str	r3, [sp, #4]
 80064d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064da:	3301      	adds	r3, #1
 80064dc:	429a      	cmp	r2, r3
 80064de:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80064e6:	d32e      	bcc.n	8006546 <quorem+0x96>
 80064e8:	f04f 0a00 	mov.w	sl, #0
 80064ec:	46c4      	mov	ip, r8
 80064ee:	46ae      	mov	lr, r5
 80064f0:	46d3      	mov	fp, sl
 80064f2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80064f6:	b298      	uxth	r0, r3
 80064f8:	fb06 a000 	mla	r0, r6, r0, sl
 80064fc:	0c02      	lsrs	r2, r0, #16
 80064fe:	0c1b      	lsrs	r3, r3, #16
 8006500:	fb06 2303 	mla	r3, r6, r3, r2
 8006504:	f8de 2000 	ldr.w	r2, [lr]
 8006508:	b280      	uxth	r0, r0
 800650a:	b292      	uxth	r2, r2
 800650c:	1a12      	subs	r2, r2, r0
 800650e:	445a      	add	r2, fp
 8006510:	f8de 0000 	ldr.w	r0, [lr]
 8006514:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006518:	b29b      	uxth	r3, r3
 800651a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800651e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006522:	b292      	uxth	r2, r2
 8006524:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006528:	45e1      	cmp	r9, ip
 800652a:	f84e 2b04 	str.w	r2, [lr], #4
 800652e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006532:	d2de      	bcs.n	80064f2 <quorem+0x42>
 8006534:	9b00      	ldr	r3, [sp, #0]
 8006536:	58eb      	ldr	r3, [r5, r3]
 8006538:	b92b      	cbnz	r3, 8006546 <quorem+0x96>
 800653a:	9b01      	ldr	r3, [sp, #4]
 800653c:	3b04      	subs	r3, #4
 800653e:	429d      	cmp	r5, r3
 8006540:	461a      	mov	r2, r3
 8006542:	d32f      	bcc.n	80065a4 <quorem+0xf4>
 8006544:	613c      	str	r4, [r7, #16]
 8006546:	4638      	mov	r0, r7
 8006548:	f001 f97c 	bl	8007844 <__mcmp>
 800654c:	2800      	cmp	r0, #0
 800654e:	db25      	blt.n	800659c <quorem+0xec>
 8006550:	4629      	mov	r1, r5
 8006552:	2000      	movs	r0, #0
 8006554:	f858 2b04 	ldr.w	r2, [r8], #4
 8006558:	f8d1 c000 	ldr.w	ip, [r1]
 800655c:	fa1f fe82 	uxth.w	lr, r2
 8006560:	fa1f f38c 	uxth.w	r3, ip
 8006564:	eba3 030e 	sub.w	r3, r3, lr
 8006568:	4403      	add	r3, r0
 800656a:	0c12      	lsrs	r2, r2, #16
 800656c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006570:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006574:	b29b      	uxth	r3, r3
 8006576:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800657a:	45c1      	cmp	r9, r8
 800657c:	f841 3b04 	str.w	r3, [r1], #4
 8006580:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006584:	d2e6      	bcs.n	8006554 <quorem+0xa4>
 8006586:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800658a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800658e:	b922      	cbnz	r2, 800659a <quorem+0xea>
 8006590:	3b04      	subs	r3, #4
 8006592:	429d      	cmp	r5, r3
 8006594:	461a      	mov	r2, r3
 8006596:	d30b      	bcc.n	80065b0 <quorem+0x100>
 8006598:	613c      	str	r4, [r7, #16]
 800659a:	3601      	adds	r6, #1
 800659c:	4630      	mov	r0, r6
 800659e:	b003      	add	sp, #12
 80065a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a4:	6812      	ldr	r2, [r2, #0]
 80065a6:	3b04      	subs	r3, #4
 80065a8:	2a00      	cmp	r2, #0
 80065aa:	d1cb      	bne.n	8006544 <quorem+0x94>
 80065ac:	3c01      	subs	r4, #1
 80065ae:	e7c6      	b.n	800653e <quorem+0x8e>
 80065b0:	6812      	ldr	r2, [r2, #0]
 80065b2:	3b04      	subs	r3, #4
 80065b4:	2a00      	cmp	r2, #0
 80065b6:	d1ef      	bne.n	8006598 <quorem+0xe8>
 80065b8:	3c01      	subs	r4, #1
 80065ba:	e7ea      	b.n	8006592 <quorem+0xe2>
 80065bc:	2000      	movs	r0, #0
 80065be:	e7ee      	b.n	800659e <quorem+0xee>

080065c0 <_dtoa_r>:
 80065c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	69c7      	ldr	r7, [r0, #28]
 80065c6:	b097      	sub	sp, #92	@ 0x5c
 80065c8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80065cc:	ec55 4b10 	vmov	r4, r5, d0
 80065d0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80065d2:	9107      	str	r1, [sp, #28]
 80065d4:	4681      	mov	r9, r0
 80065d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80065d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80065da:	b97f      	cbnz	r7, 80065fc <_dtoa_r+0x3c>
 80065dc:	2010      	movs	r0, #16
 80065de:	f000 fe09 	bl	80071f4 <malloc>
 80065e2:	4602      	mov	r2, r0
 80065e4:	f8c9 001c 	str.w	r0, [r9, #28]
 80065e8:	b920      	cbnz	r0, 80065f4 <_dtoa_r+0x34>
 80065ea:	4ba9      	ldr	r3, [pc, #676]	@ (8006890 <_dtoa_r+0x2d0>)
 80065ec:	21ef      	movs	r1, #239	@ 0xef
 80065ee:	48a9      	ldr	r0, [pc, #676]	@ (8006894 <_dtoa_r+0x2d4>)
 80065f0:	f7ff ff40 	bl	8006474 <__assert_func>
 80065f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80065f8:	6007      	str	r7, [r0, #0]
 80065fa:	60c7      	str	r7, [r0, #12]
 80065fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006600:	6819      	ldr	r1, [r3, #0]
 8006602:	b159      	cbz	r1, 800661c <_dtoa_r+0x5c>
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	604a      	str	r2, [r1, #4]
 8006608:	2301      	movs	r3, #1
 800660a:	4093      	lsls	r3, r2
 800660c:	608b      	str	r3, [r1, #8]
 800660e:	4648      	mov	r0, r9
 8006610:	f000 fee6 	bl	80073e0 <_Bfree>
 8006614:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	1e2b      	subs	r3, r5, #0
 800661e:	bfb9      	ittee	lt
 8006620:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006624:	9305      	strlt	r3, [sp, #20]
 8006626:	2300      	movge	r3, #0
 8006628:	6033      	strge	r3, [r6, #0]
 800662a:	9f05      	ldr	r7, [sp, #20]
 800662c:	4b9a      	ldr	r3, [pc, #616]	@ (8006898 <_dtoa_r+0x2d8>)
 800662e:	bfbc      	itt	lt
 8006630:	2201      	movlt	r2, #1
 8006632:	6032      	strlt	r2, [r6, #0]
 8006634:	43bb      	bics	r3, r7
 8006636:	d112      	bne.n	800665e <_dtoa_r+0x9e>
 8006638:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800663a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006644:	4323      	orrs	r3, r4
 8006646:	f000 855a 	beq.w	80070fe <_dtoa_r+0xb3e>
 800664a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800664c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80068ac <_dtoa_r+0x2ec>
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 855c 	beq.w	800710e <_dtoa_r+0xb4e>
 8006656:	f10a 0303 	add.w	r3, sl, #3
 800665a:	f000 bd56 	b.w	800710a <_dtoa_r+0xb4a>
 800665e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006662:	2200      	movs	r2, #0
 8006664:	ec51 0b17 	vmov	r0, r1, d7
 8006668:	2300      	movs	r3, #0
 800666a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800666e:	f7fa fa43 	bl	8000af8 <__aeabi_dcmpeq>
 8006672:	4680      	mov	r8, r0
 8006674:	b158      	cbz	r0, 800668e <_dtoa_r+0xce>
 8006676:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006678:	2301      	movs	r3, #1
 800667a:	6013      	str	r3, [r2, #0]
 800667c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800667e:	b113      	cbz	r3, 8006686 <_dtoa_r+0xc6>
 8006680:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006682:	4b86      	ldr	r3, [pc, #536]	@ (800689c <_dtoa_r+0x2dc>)
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80068b0 <_dtoa_r+0x2f0>
 800668a:	f000 bd40 	b.w	800710e <_dtoa_r+0xb4e>
 800668e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006692:	aa14      	add	r2, sp, #80	@ 0x50
 8006694:	a915      	add	r1, sp, #84	@ 0x54
 8006696:	4648      	mov	r0, r9
 8006698:	f001 f984 	bl	80079a4 <__d2b>
 800669c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80066a0:	9002      	str	r0, [sp, #8]
 80066a2:	2e00      	cmp	r6, #0
 80066a4:	d078      	beq.n	8006798 <_dtoa_r+0x1d8>
 80066a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066a8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80066ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80066b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80066bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80066c0:	4619      	mov	r1, r3
 80066c2:	2200      	movs	r2, #0
 80066c4:	4b76      	ldr	r3, [pc, #472]	@ (80068a0 <_dtoa_r+0x2e0>)
 80066c6:	f7f9 fdf7 	bl	80002b8 <__aeabi_dsub>
 80066ca:	a36b      	add	r3, pc, #428	@ (adr r3, 8006878 <_dtoa_r+0x2b8>)
 80066cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d0:	f7f9 ffaa 	bl	8000628 <__aeabi_dmul>
 80066d4:	a36a      	add	r3, pc, #424	@ (adr r3, 8006880 <_dtoa_r+0x2c0>)
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	f7f9 fdef 	bl	80002bc <__adddf3>
 80066de:	4604      	mov	r4, r0
 80066e0:	4630      	mov	r0, r6
 80066e2:	460d      	mov	r5, r1
 80066e4:	f7f9 ff36 	bl	8000554 <__aeabi_i2d>
 80066e8:	a367      	add	r3, pc, #412	@ (adr r3, 8006888 <_dtoa_r+0x2c8>)
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	f7f9 ff9b 	bl	8000628 <__aeabi_dmul>
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4620      	mov	r0, r4
 80066f8:	4629      	mov	r1, r5
 80066fa:	f7f9 fddf 	bl	80002bc <__adddf3>
 80066fe:	4604      	mov	r4, r0
 8006700:	460d      	mov	r5, r1
 8006702:	f7fa fa41 	bl	8000b88 <__aeabi_d2iz>
 8006706:	2200      	movs	r2, #0
 8006708:	4607      	mov	r7, r0
 800670a:	2300      	movs	r3, #0
 800670c:	4620      	mov	r0, r4
 800670e:	4629      	mov	r1, r5
 8006710:	f7fa f9fc 	bl	8000b0c <__aeabi_dcmplt>
 8006714:	b140      	cbz	r0, 8006728 <_dtoa_r+0x168>
 8006716:	4638      	mov	r0, r7
 8006718:	f7f9 ff1c 	bl	8000554 <__aeabi_i2d>
 800671c:	4622      	mov	r2, r4
 800671e:	462b      	mov	r3, r5
 8006720:	f7fa f9ea 	bl	8000af8 <__aeabi_dcmpeq>
 8006724:	b900      	cbnz	r0, 8006728 <_dtoa_r+0x168>
 8006726:	3f01      	subs	r7, #1
 8006728:	2f16      	cmp	r7, #22
 800672a:	d852      	bhi.n	80067d2 <_dtoa_r+0x212>
 800672c:	4b5d      	ldr	r3, [pc, #372]	@ (80068a4 <_dtoa_r+0x2e4>)
 800672e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006736:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800673a:	f7fa f9e7 	bl	8000b0c <__aeabi_dcmplt>
 800673e:	2800      	cmp	r0, #0
 8006740:	d049      	beq.n	80067d6 <_dtoa_r+0x216>
 8006742:	3f01      	subs	r7, #1
 8006744:	2300      	movs	r3, #0
 8006746:	9310      	str	r3, [sp, #64]	@ 0x40
 8006748:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800674a:	1b9b      	subs	r3, r3, r6
 800674c:	1e5a      	subs	r2, r3, #1
 800674e:	bf45      	ittet	mi
 8006750:	f1c3 0301 	rsbmi	r3, r3, #1
 8006754:	9300      	strmi	r3, [sp, #0]
 8006756:	2300      	movpl	r3, #0
 8006758:	2300      	movmi	r3, #0
 800675a:	9206      	str	r2, [sp, #24]
 800675c:	bf54      	ite	pl
 800675e:	9300      	strpl	r3, [sp, #0]
 8006760:	9306      	strmi	r3, [sp, #24]
 8006762:	2f00      	cmp	r7, #0
 8006764:	db39      	blt.n	80067da <_dtoa_r+0x21a>
 8006766:	9b06      	ldr	r3, [sp, #24]
 8006768:	970d      	str	r7, [sp, #52]	@ 0x34
 800676a:	443b      	add	r3, r7
 800676c:	9306      	str	r3, [sp, #24]
 800676e:	2300      	movs	r3, #0
 8006770:	9308      	str	r3, [sp, #32]
 8006772:	9b07      	ldr	r3, [sp, #28]
 8006774:	2b09      	cmp	r3, #9
 8006776:	d863      	bhi.n	8006840 <_dtoa_r+0x280>
 8006778:	2b05      	cmp	r3, #5
 800677a:	bfc4      	itt	gt
 800677c:	3b04      	subgt	r3, #4
 800677e:	9307      	strgt	r3, [sp, #28]
 8006780:	9b07      	ldr	r3, [sp, #28]
 8006782:	f1a3 0302 	sub.w	r3, r3, #2
 8006786:	bfcc      	ite	gt
 8006788:	2400      	movgt	r4, #0
 800678a:	2401      	movle	r4, #1
 800678c:	2b03      	cmp	r3, #3
 800678e:	d863      	bhi.n	8006858 <_dtoa_r+0x298>
 8006790:	e8df f003 	tbb	[pc, r3]
 8006794:	2b375452 	.word	0x2b375452
 8006798:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800679c:	441e      	add	r6, r3
 800679e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	bfc1      	itttt	gt
 80067a6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80067aa:	409f      	lslgt	r7, r3
 80067ac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80067b0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80067b4:	bfd6      	itet	le
 80067b6:	f1c3 0320 	rsble	r3, r3, #32
 80067ba:	ea47 0003 	orrgt.w	r0, r7, r3
 80067be:	fa04 f003 	lslle.w	r0, r4, r3
 80067c2:	f7f9 feb7 	bl	8000534 <__aeabi_ui2d>
 80067c6:	2201      	movs	r2, #1
 80067c8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80067cc:	3e01      	subs	r6, #1
 80067ce:	9212      	str	r2, [sp, #72]	@ 0x48
 80067d0:	e776      	b.n	80066c0 <_dtoa_r+0x100>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e7b7      	b.n	8006746 <_dtoa_r+0x186>
 80067d6:	9010      	str	r0, [sp, #64]	@ 0x40
 80067d8:	e7b6      	b.n	8006748 <_dtoa_r+0x188>
 80067da:	9b00      	ldr	r3, [sp, #0]
 80067dc:	1bdb      	subs	r3, r3, r7
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	427b      	negs	r3, r7
 80067e2:	9308      	str	r3, [sp, #32]
 80067e4:	2300      	movs	r3, #0
 80067e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80067e8:	e7c3      	b.n	8006772 <_dtoa_r+0x1b2>
 80067ea:	2301      	movs	r3, #1
 80067ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80067ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067f0:	eb07 0b03 	add.w	fp, r7, r3
 80067f4:	f10b 0301 	add.w	r3, fp, #1
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	9303      	str	r3, [sp, #12]
 80067fc:	bfb8      	it	lt
 80067fe:	2301      	movlt	r3, #1
 8006800:	e006      	b.n	8006810 <_dtoa_r+0x250>
 8006802:	2301      	movs	r3, #1
 8006804:	9309      	str	r3, [sp, #36]	@ 0x24
 8006806:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006808:	2b00      	cmp	r3, #0
 800680a:	dd28      	ble.n	800685e <_dtoa_r+0x29e>
 800680c:	469b      	mov	fp, r3
 800680e:	9303      	str	r3, [sp, #12]
 8006810:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006814:	2100      	movs	r1, #0
 8006816:	2204      	movs	r2, #4
 8006818:	f102 0514 	add.w	r5, r2, #20
 800681c:	429d      	cmp	r5, r3
 800681e:	d926      	bls.n	800686e <_dtoa_r+0x2ae>
 8006820:	6041      	str	r1, [r0, #4]
 8006822:	4648      	mov	r0, r9
 8006824:	f000 fd9c 	bl	8007360 <_Balloc>
 8006828:	4682      	mov	sl, r0
 800682a:	2800      	cmp	r0, #0
 800682c:	d142      	bne.n	80068b4 <_dtoa_r+0x2f4>
 800682e:	4b1e      	ldr	r3, [pc, #120]	@ (80068a8 <_dtoa_r+0x2e8>)
 8006830:	4602      	mov	r2, r0
 8006832:	f240 11af 	movw	r1, #431	@ 0x1af
 8006836:	e6da      	b.n	80065ee <_dtoa_r+0x2e>
 8006838:	2300      	movs	r3, #0
 800683a:	e7e3      	b.n	8006804 <_dtoa_r+0x244>
 800683c:	2300      	movs	r3, #0
 800683e:	e7d5      	b.n	80067ec <_dtoa_r+0x22c>
 8006840:	2401      	movs	r4, #1
 8006842:	2300      	movs	r3, #0
 8006844:	9307      	str	r3, [sp, #28]
 8006846:	9409      	str	r4, [sp, #36]	@ 0x24
 8006848:	f04f 3bff 	mov.w	fp, #4294967295
 800684c:	2200      	movs	r2, #0
 800684e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006852:	2312      	movs	r3, #18
 8006854:	920c      	str	r2, [sp, #48]	@ 0x30
 8006856:	e7db      	b.n	8006810 <_dtoa_r+0x250>
 8006858:	2301      	movs	r3, #1
 800685a:	9309      	str	r3, [sp, #36]	@ 0x24
 800685c:	e7f4      	b.n	8006848 <_dtoa_r+0x288>
 800685e:	f04f 0b01 	mov.w	fp, #1
 8006862:	f8cd b00c 	str.w	fp, [sp, #12]
 8006866:	465b      	mov	r3, fp
 8006868:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800686c:	e7d0      	b.n	8006810 <_dtoa_r+0x250>
 800686e:	3101      	adds	r1, #1
 8006870:	0052      	lsls	r2, r2, #1
 8006872:	e7d1      	b.n	8006818 <_dtoa_r+0x258>
 8006874:	f3af 8000 	nop.w
 8006878:	636f4361 	.word	0x636f4361
 800687c:	3fd287a7 	.word	0x3fd287a7
 8006880:	8b60c8b3 	.word	0x8b60c8b3
 8006884:	3fc68a28 	.word	0x3fc68a28
 8006888:	509f79fb 	.word	0x509f79fb
 800688c:	3fd34413 	.word	0x3fd34413
 8006890:	080088fd 	.word	0x080088fd
 8006894:	08008914 	.word	0x08008914
 8006898:	7ff00000 	.word	0x7ff00000
 800689c:	08008891 	.word	0x08008891
 80068a0:	3ff80000 	.word	0x3ff80000
 80068a4:	08008a28 	.word	0x08008a28
 80068a8:	0800896c 	.word	0x0800896c
 80068ac:	080088f9 	.word	0x080088f9
 80068b0:	08008890 	.word	0x08008890
 80068b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80068b8:	6018      	str	r0, [r3, #0]
 80068ba:	9b03      	ldr	r3, [sp, #12]
 80068bc:	2b0e      	cmp	r3, #14
 80068be:	f200 80a1 	bhi.w	8006a04 <_dtoa_r+0x444>
 80068c2:	2c00      	cmp	r4, #0
 80068c4:	f000 809e 	beq.w	8006a04 <_dtoa_r+0x444>
 80068c8:	2f00      	cmp	r7, #0
 80068ca:	dd33      	ble.n	8006934 <_dtoa_r+0x374>
 80068cc:	4b9c      	ldr	r3, [pc, #624]	@ (8006b40 <_dtoa_r+0x580>)
 80068ce:	f007 020f 	and.w	r2, r7, #15
 80068d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068d6:	ed93 7b00 	vldr	d7, [r3]
 80068da:	05f8      	lsls	r0, r7, #23
 80068dc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80068e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80068e4:	d516      	bpl.n	8006914 <_dtoa_r+0x354>
 80068e6:	4b97      	ldr	r3, [pc, #604]	@ (8006b44 <_dtoa_r+0x584>)
 80068e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80068ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068f0:	f7f9 ffc4 	bl	800087c <__aeabi_ddiv>
 80068f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068f8:	f004 040f 	and.w	r4, r4, #15
 80068fc:	2603      	movs	r6, #3
 80068fe:	4d91      	ldr	r5, [pc, #580]	@ (8006b44 <_dtoa_r+0x584>)
 8006900:	b954      	cbnz	r4, 8006918 <_dtoa_r+0x358>
 8006902:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006906:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800690a:	f7f9 ffb7 	bl	800087c <__aeabi_ddiv>
 800690e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006912:	e028      	b.n	8006966 <_dtoa_r+0x3a6>
 8006914:	2602      	movs	r6, #2
 8006916:	e7f2      	b.n	80068fe <_dtoa_r+0x33e>
 8006918:	07e1      	lsls	r1, r4, #31
 800691a:	d508      	bpl.n	800692e <_dtoa_r+0x36e>
 800691c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006920:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006924:	f7f9 fe80 	bl	8000628 <__aeabi_dmul>
 8006928:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800692c:	3601      	adds	r6, #1
 800692e:	1064      	asrs	r4, r4, #1
 8006930:	3508      	adds	r5, #8
 8006932:	e7e5      	b.n	8006900 <_dtoa_r+0x340>
 8006934:	f000 80af 	beq.w	8006a96 <_dtoa_r+0x4d6>
 8006938:	427c      	negs	r4, r7
 800693a:	4b81      	ldr	r3, [pc, #516]	@ (8006b40 <_dtoa_r+0x580>)
 800693c:	4d81      	ldr	r5, [pc, #516]	@ (8006b44 <_dtoa_r+0x584>)
 800693e:	f004 020f 	and.w	r2, r4, #15
 8006942:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800694e:	f7f9 fe6b 	bl	8000628 <__aeabi_dmul>
 8006952:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006956:	1124      	asrs	r4, r4, #4
 8006958:	2300      	movs	r3, #0
 800695a:	2602      	movs	r6, #2
 800695c:	2c00      	cmp	r4, #0
 800695e:	f040 808f 	bne.w	8006a80 <_dtoa_r+0x4c0>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1d3      	bne.n	800690e <_dtoa_r+0x34e>
 8006966:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006968:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8094 	beq.w	8006a9a <_dtoa_r+0x4da>
 8006972:	4b75      	ldr	r3, [pc, #468]	@ (8006b48 <_dtoa_r+0x588>)
 8006974:	2200      	movs	r2, #0
 8006976:	4620      	mov	r0, r4
 8006978:	4629      	mov	r1, r5
 800697a:	f7fa f8c7 	bl	8000b0c <__aeabi_dcmplt>
 800697e:	2800      	cmp	r0, #0
 8006980:	f000 808b 	beq.w	8006a9a <_dtoa_r+0x4da>
 8006984:	9b03      	ldr	r3, [sp, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 8087 	beq.w	8006a9a <_dtoa_r+0x4da>
 800698c:	f1bb 0f00 	cmp.w	fp, #0
 8006990:	dd34      	ble.n	80069fc <_dtoa_r+0x43c>
 8006992:	4620      	mov	r0, r4
 8006994:	4b6d      	ldr	r3, [pc, #436]	@ (8006b4c <_dtoa_r+0x58c>)
 8006996:	2200      	movs	r2, #0
 8006998:	4629      	mov	r1, r5
 800699a:	f7f9 fe45 	bl	8000628 <__aeabi_dmul>
 800699e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069a2:	f107 38ff 	add.w	r8, r7, #4294967295
 80069a6:	3601      	adds	r6, #1
 80069a8:	465c      	mov	r4, fp
 80069aa:	4630      	mov	r0, r6
 80069ac:	f7f9 fdd2 	bl	8000554 <__aeabi_i2d>
 80069b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069b4:	f7f9 fe38 	bl	8000628 <__aeabi_dmul>
 80069b8:	4b65      	ldr	r3, [pc, #404]	@ (8006b50 <_dtoa_r+0x590>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	f7f9 fc7e 	bl	80002bc <__adddf3>
 80069c0:	4605      	mov	r5, r0
 80069c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80069c6:	2c00      	cmp	r4, #0
 80069c8:	d16a      	bne.n	8006aa0 <_dtoa_r+0x4e0>
 80069ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069ce:	4b61      	ldr	r3, [pc, #388]	@ (8006b54 <_dtoa_r+0x594>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	f7f9 fc71 	bl	80002b8 <__aeabi_dsub>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069de:	462a      	mov	r2, r5
 80069e0:	4633      	mov	r3, r6
 80069e2:	f7fa f8b1 	bl	8000b48 <__aeabi_dcmpgt>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	f040 8298 	bne.w	8006f1c <_dtoa_r+0x95c>
 80069ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069f0:	462a      	mov	r2, r5
 80069f2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80069f6:	f7fa f889 	bl	8000b0c <__aeabi_dcmplt>
 80069fa:	bb38      	cbnz	r0, 8006a4c <_dtoa_r+0x48c>
 80069fc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006a00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f2c0 8157 	blt.w	8006cba <_dtoa_r+0x6fa>
 8006a0c:	2f0e      	cmp	r7, #14
 8006a0e:	f300 8154 	bgt.w	8006cba <_dtoa_r+0x6fa>
 8006a12:	4b4b      	ldr	r3, [pc, #300]	@ (8006b40 <_dtoa_r+0x580>)
 8006a14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a18:	ed93 7b00 	vldr	d7, [r3]
 8006a1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	ed8d 7b00 	vstr	d7, [sp]
 8006a24:	f280 80e5 	bge.w	8006bf2 <_dtoa_r+0x632>
 8006a28:	9b03      	ldr	r3, [sp, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f300 80e1 	bgt.w	8006bf2 <_dtoa_r+0x632>
 8006a30:	d10c      	bne.n	8006a4c <_dtoa_r+0x48c>
 8006a32:	4b48      	ldr	r3, [pc, #288]	@ (8006b54 <_dtoa_r+0x594>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	ec51 0b17 	vmov	r0, r1, d7
 8006a3a:	f7f9 fdf5 	bl	8000628 <__aeabi_dmul>
 8006a3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a42:	f7fa f877 	bl	8000b34 <__aeabi_dcmpge>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	f000 8266 	beq.w	8006f18 <_dtoa_r+0x958>
 8006a4c:	2400      	movs	r4, #0
 8006a4e:	4625      	mov	r5, r4
 8006a50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a52:	4656      	mov	r6, sl
 8006a54:	ea6f 0803 	mvn.w	r8, r3
 8006a58:	2700      	movs	r7, #0
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	4648      	mov	r0, r9
 8006a5e:	f000 fcbf 	bl	80073e0 <_Bfree>
 8006a62:	2d00      	cmp	r5, #0
 8006a64:	f000 80bd 	beq.w	8006be2 <_dtoa_r+0x622>
 8006a68:	b12f      	cbz	r7, 8006a76 <_dtoa_r+0x4b6>
 8006a6a:	42af      	cmp	r7, r5
 8006a6c:	d003      	beq.n	8006a76 <_dtoa_r+0x4b6>
 8006a6e:	4639      	mov	r1, r7
 8006a70:	4648      	mov	r0, r9
 8006a72:	f000 fcb5 	bl	80073e0 <_Bfree>
 8006a76:	4629      	mov	r1, r5
 8006a78:	4648      	mov	r0, r9
 8006a7a:	f000 fcb1 	bl	80073e0 <_Bfree>
 8006a7e:	e0b0      	b.n	8006be2 <_dtoa_r+0x622>
 8006a80:	07e2      	lsls	r2, r4, #31
 8006a82:	d505      	bpl.n	8006a90 <_dtoa_r+0x4d0>
 8006a84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a88:	f7f9 fdce 	bl	8000628 <__aeabi_dmul>
 8006a8c:	3601      	adds	r6, #1
 8006a8e:	2301      	movs	r3, #1
 8006a90:	1064      	asrs	r4, r4, #1
 8006a92:	3508      	adds	r5, #8
 8006a94:	e762      	b.n	800695c <_dtoa_r+0x39c>
 8006a96:	2602      	movs	r6, #2
 8006a98:	e765      	b.n	8006966 <_dtoa_r+0x3a6>
 8006a9a:	9c03      	ldr	r4, [sp, #12]
 8006a9c:	46b8      	mov	r8, r7
 8006a9e:	e784      	b.n	80069aa <_dtoa_r+0x3ea>
 8006aa0:	4b27      	ldr	r3, [pc, #156]	@ (8006b40 <_dtoa_r+0x580>)
 8006aa2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006aa4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006aa8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006aac:	4454      	add	r4, sl
 8006aae:	2900      	cmp	r1, #0
 8006ab0:	d054      	beq.n	8006b5c <_dtoa_r+0x59c>
 8006ab2:	4929      	ldr	r1, [pc, #164]	@ (8006b58 <_dtoa_r+0x598>)
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f7f9 fee1 	bl	800087c <__aeabi_ddiv>
 8006aba:	4633      	mov	r3, r6
 8006abc:	462a      	mov	r2, r5
 8006abe:	f7f9 fbfb 	bl	80002b8 <__aeabi_dsub>
 8006ac2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ac6:	4656      	mov	r6, sl
 8006ac8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006acc:	f7fa f85c 	bl	8000b88 <__aeabi_d2iz>
 8006ad0:	4605      	mov	r5, r0
 8006ad2:	f7f9 fd3f 	bl	8000554 <__aeabi_i2d>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ade:	f7f9 fbeb 	bl	80002b8 <__aeabi_dsub>
 8006ae2:	3530      	adds	r5, #48	@ 0x30
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006aec:	f806 5b01 	strb.w	r5, [r6], #1
 8006af0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006af4:	f7fa f80a 	bl	8000b0c <__aeabi_dcmplt>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d172      	bne.n	8006be2 <_dtoa_r+0x622>
 8006afc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b00:	4911      	ldr	r1, [pc, #68]	@ (8006b48 <_dtoa_r+0x588>)
 8006b02:	2000      	movs	r0, #0
 8006b04:	f7f9 fbd8 	bl	80002b8 <__aeabi_dsub>
 8006b08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006b0c:	f7f9 fffe 	bl	8000b0c <__aeabi_dcmplt>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	f040 80b4 	bne.w	8006c7e <_dtoa_r+0x6be>
 8006b16:	42a6      	cmp	r6, r4
 8006b18:	f43f af70 	beq.w	80069fc <_dtoa_r+0x43c>
 8006b1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006b20:	4b0a      	ldr	r3, [pc, #40]	@ (8006b4c <_dtoa_r+0x58c>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	f7f9 fd80 	bl	8000628 <__aeabi_dmul>
 8006b28:	4b08      	ldr	r3, [pc, #32]	@ (8006b4c <_dtoa_r+0x58c>)
 8006b2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b2e:	2200      	movs	r2, #0
 8006b30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b34:	f7f9 fd78 	bl	8000628 <__aeabi_dmul>
 8006b38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b3c:	e7c4      	b.n	8006ac8 <_dtoa_r+0x508>
 8006b3e:	bf00      	nop
 8006b40:	08008a28 	.word	0x08008a28
 8006b44:	08008a00 	.word	0x08008a00
 8006b48:	3ff00000 	.word	0x3ff00000
 8006b4c:	40240000 	.word	0x40240000
 8006b50:	401c0000 	.word	0x401c0000
 8006b54:	40140000 	.word	0x40140000
 8006b58:	3fe00000 	.word	0x3fe00000
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f7f9 fd62 	bl	8000628 <__aeabi_dmul>
 8006b64:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b68:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006b6a:	4656      	mov	r6, sl
 8006b6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b70:	f7fa f80a 	bl	8000b88 <__aeabi_d2iz>
 8006b74:	4605      	mov	r5, r0
 8006b76:	f7f9 fced 	bl	8000554 <__aeabi_i2d>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b82:	f7f9 fb99 	bl	80002b8 <__aeabi_dsub>
 8006b86:	3530      	adds	r5, #48	@ 0x30
 8006b88:	f806 5b01 	strb.w	r5, [r6], #1
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	42a6      	cmp	r6, r4
 8006b92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b96:	f04f 0200 	mov.w	r2, #0
 8006b9a:	d124      	bne.n	8006be6 <_dtoa_r+0x626>
 8006b9c:	4baf      	ldr	r3, [pc, #700]	@ (8006e5c <_dtoa_r+0x89c>)
 8006b9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006ba2:	f7f9 fb8b 	bl	80002bc <__adddf3>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bae:	f7f9 ffcb 	bl	8000b48 <__aeabi_dcmpgt>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d163      	bne.n	8006c7e <_dtoa_r+0x6be>
 8006bb6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006bba:	49a8      	ldr	r1, [pc, #672]	@ (8006e5c <_dtoa_r+0x89c>)
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	f7f9 fb7b 	bl	80002b8 <__aeabi_dsub>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bca:	f7f9 ff9f 	bl	8000b0c <__aeabi_dcmplt>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	f43f af14 	beq.w	80069fc <_dtoa_r+0x43c>
 8006bd4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006bd6:	1e73      	subs	r3, r6, #1
 8006bd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006bda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006bde:	2b30      	cmp	r3, #48	@ 0x30
 8006be0:	d0f8      	beq.n	8006bd4 <_dtoa_r+0x614>
 8006be2:	4647      	mov	r7, r8
 8006be4:	e03b      	b.n	8006c5e <_dtoa_r+0x69e>
 8006be6:	4b9e      	ldr	r3, [pc, #632]	@ (8006e60 <_dtoa_r+0x8a0>)
 8006be8:	f7f9 fd1e 	bl	8000628 <__aeabi_dmul>
 8006bec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bf0:	e7bc      	b.n	8006b6c <_dtoa_r+0x5ac>
 8006bf2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006bf6:	4656      	mov	r6, sl
 8006bf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	4629      	mov	r1, r5
 8006c00:	f7f9 fe3c 	bl	800087c <__aeabi_ddiv>
 8006c04:	f7f9 ffc0 	bl	8000b88 <__aeabi_d2iz>
 8006c08:	4680      	mov	r8, r0
 8006c0a:	f7f9 fca3 	bl	8000554 <__aeabi_i2d>
 8006c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c12:	f7f9 fd09 	bl	8000628 <__aeabi_dmul>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c22:	f7f9 fb49 	bl	80002b8 <__aeabi_dsub>
 8006c26:	f806 4b01 	strb.w	r4, [r6], #1
 8006c2a:	9d03      	ldr	r5, [sp, #12]
 8006c2c:	eba6 040a 	sub.w	r4, r6, sl
 8006c30:	42a5      	cmp	r5, r4
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	d133      	bne.n	8006ca0 <_dtoa_r+0x6e0>
 8006c38:	f7f9 fb40 	bl	80002bc <__adddf3>
 8006c3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c40:	4604      	mov	r4, r0
 8006c42:	460d      	mov	r5, r1
 8006c44:	f7f9 ff80 	bl	8000b48 <__aeabi_dcmpgt>
 8006c48:	b9c0      	cbnz	r0, 8006c7c <_dtoa_r+0x6bc>
 8006c4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c4e:	4620      	mov	r0, r4
 8006c50:	4629      	mov	r1, r5
 8006c52:	f7f9 ff51 	bl	8000af8 <__aeabi_dcmpeq>
 8006c56:	b110      	cbz	r0, 8006c5e <_dtoa_r+0x69e>
 8006c58:	f018 0f01 	tst.w	r8, #1
 8006c5c:	d10e      	bne.n	8006c7c <_dtoa_r+0x6bc>
 8006c5e:	9902      	ldr	r1, [sp, #8]
 8006c60:	4648      	mov	r0, r9
 8006c62:	f000 fbbd 	bl	80073e0 <_Bfree>
 8006c66:	2300      	movs	r3, #0
 8006c68:	7033      	strb	r3, [r6, #0]
 8006c6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006c6c:	3701      	adds	r7, #1
 8006c6e:	601f      	str	r7, [r3, #0]
 8006c70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 824b 	beq.w	800710e <_dtoa_r+0xb4e>
 8006c78:	601e      	str	r6, [r3, #0]
 8006c7a:	e248      	b.n	800710e <_dtoa_r+0xb4e>
 8006c7c:	46b8      	mov	r8, r7
 8006c7e:	4633      	mov	r3, r6
 8006c80:	461e      	mov	r6, r3
 8006c82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c86:	2a39      	cmp	r2, #57	@ 0x39
 8006c88:	d106      	bne.n	8006c98 <_dtoa_r+0x6d8>
 8006c8a:	459a      	cmp	sl, r3
 8006c8c:	d1f8      	bne.n	8006c80 <_dtoa_r+0x6c0>
 8006c8e:	2230      	movs	r2, #48	@ 0x30
 8006c90:	f108 0801 	add.w	r8, r8, #1
 8006c94:	f88a 2000 	strb.w	r2, [sl]
 8006c98:	781a      	ldrb	r2, [r3, #0]
 8006c9a:	3201      	adds	r2, #1
 8006c9c:	701a      	strb	r2, [r3, #0]
 8006c9e:	e7a0      	b.n	8006be2 <_dtoa_r+0x622>
 8006ca0:	4b6f      	ldr	r3, [pc, #444]	@ (8006e60 <_dtoa_r+0x8a0>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f7f9 fcc0 	bl	8000628 <__aeabi_dmul>
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2300      	movs	r3, #0
 8006cac:	4604      	mov	r4, r0
 8006cae:	460d      	mov	r5, r1
 8006cb0:	f7f9 ff22 	bl	8000af8 <__aeabi_dcmpeq>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d09f      	beq.n	8006bf8 <_dtoa_r+0x638>
 8006cb8:	e7d1      	b.n	8006c5e <_dtoa_r+0x69e>
 8006cba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cbc:	2a00      	cmp	r2, #0
 8006cbe:	f000 80ea 	beq.w	8006e96 <_dtoa_r+0x8d6>
 8006cc2:	9a07      	ldr	r2, [sp, #28]
 8006cc4:	2a01      	cmp	r2, #1
 8006cc6:	f300 80cd 	bgt.w	8006e64 <_dtoa_r+0x8a4>
 8006cca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006ccc:	2a00      	cmp	r2, #0
 8006cce:	f000 80c1 	beq.w	8006e54 <_dtoa_r+0x894>
 8006cd2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006cd6:	9c08      	ldr	r4, [sp, #32]
 8006cd8:	9e00      	ldr	r6, [sp, #0]
 8006cda:	9a00      	ldr	r2, [sp, #0]
 8006cdc:	441a      	add	r2, r3
 8006cde:	9200      	str	r2, [sp, #0]
 8006ce0:	9a06      	ldr	r2, [sp, #24]
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	441a      	add	r2, r3
 8006ce6:	4648      	mov	r0, r9
 8006ce8:	9206      	str	r2, [sp, #24]
 8006cea:	f000 fc2d 	bl	8007548 <__i2b>
 8006cee:	4605      	mov	r5, r0
 8006cf0:	b166      	cbz	r6, 8006d0c <_dtoa_r+0x74c>
 8006cf2:	9b06      	ldr	r3, [sp, #24]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	dd09      	ble.n	8006d0c <_dtoa_r+0x74c>
 8006cf8:	42b3      	cmp	r3, r6
 8006cfa:	9a00      	ldr	r2, [sp, #0]
 8006cfc:	bfa8      	it	ge
 8006cfe:	4633      	movge	r3, r6
 8006d00:	1ad2      	subs	r2, r2, r3
 8006d02:	9200      	str	r2, [sp, #0]
 8006d04:	9a06      	ldr	r2, [sp, #24]
 8006d06:	1af6      	subs	r6, r6, r3
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	9306      	str	r3, [sp, #24]
 8006d0c:	9b08      	ldr	r3, [sp, #32]
 8006d0e:	b30b      	cbz	r3, 8006d54 <_dtoa_r+0x794>
 8006d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 80c6 	beq.w	8006ea4 <_dtoa_r+0x8e4>
 8006d18:	2c00      	cmp	r4, #0
 8006d1a:	f000 80c0 	beq.w	8006e9e <_dtoa_r+0x8de>
 8006d1e:	4629      	mov	r1, r5
 8006d20:	4622      	mov	r2, r4
 8006d22:	4648      	mov	r0, r9
 8006d24:	f000 fcc8 	bl	80076b8 <__pow5mult>
 8006d28:	9a02      	ldr	r2, [sp, #8]
 8006d2a:	4601      	mov	r1, r0
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	4648      	mov	r0, r9
 8006d30:	f000 fc20 	bl	8007574 <__multiply>
 8006d34:	9902      	ldr	r1, [sp, #8]
 8006d36:	4680      	mov	r8, r0
 8006d38:	4648      	mov	r0, r9
 8006d3a:	f000 fb51 	bl	80073e0 <_Bfree>
 8006d3e:	9b08      	ldr	r3, [sp, #32]
 8006d40:	1b1b      	subs	r3, r3, r4
 8006d42:	9308      	str	r3, [sp, #32]
 8006d44:	f000 80b1 	beq.w	8006eaa <_dtoa_r+0x8ea>
 8006d48:	9a08      	ldr	r2, [sp, #32]
 8006d4a:	4641      	mov	r1, r8
 8006d4c:	4648      	mov	r0, r9
 8006d4e:	f000 fcb3 	bl	80076b8 <__pow5mult>
 8006d52:	9002      	str	r0, [sp, #8]
 8006d54:	2101      	movs	r1, #1
 8006d56:	4648      	mov	r0, r9
 8006d58:	f000 fbf6 	bl	8007548 <__i2b>
 8006d5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d5e:	4604      	mov	r4, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 81d8 	beq.w	8007116 <_dtoa_r+0xb56>
 8006d66:	461a      	mov	r2, r3
 8006d68:	4601      	mov	r1, r0
 8006d6a:	4648      	mov	r0, r9
 8006d6c:	f000 fca4 	bl	80076b8 <__pow5mult>
 8006d70:	9b07      	ldr	r3, [sp, #28]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	4604      	mov	r4, r0
 8006d76:	f300 809f 	bgt.w	8006eb8 <_dtoa_r+0x8f8>
 8006d7a:	9b04      	ldr	r3, [sp, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f040 8097 	bne.w	8006eb0 <_dtoa_r+0x8f0>
 8006d82:	9b05      	ldr	r3, [sp, #20]
 8006d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f040 8093 	bne.w	8006eb4 <_dtoa_r+0x8f4>
 8006d8e:	9b05      	ldr	r3, [sp, #20]
 8006d90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d94:	0d1b      	lsrs	r3, r3, #20
 8006d96:	051b      	lsls	r3, r3, #20
 8006d98:	b133      	cbz	r3, 8006da8 <_dtoa_r+0x7e8>
 8006d9a:	9b00      	ldr	r3, [sp, #0]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	9b06      	ldr	r3, [sp, #24]
 8006da2:	3301      	adds	r3, #1
 8006da4:	9306      	str	r3, [sp, #24]
 8006da6:	2301      	movs	r3, #1
 8006da8:	9308      	str	r3, [sp, #32]
 8006daa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 81b8 	beq.w	8007122 <_dtoa_r+0xb62>
 8006db2:	6923      	ldr	r3, [r4, #16]
 8006db4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006db8:	6918      	ldr	r0, [r3, #16]
 8006dba:	f000 fb79 	bl	80074b0 <__hi0bits>
 8006dbe:	f1c0 0020 	rsb	r0, r0, #32
 8006dc2:	9b06      	ldr	r3, [sp, #24]
 8006dc4:	4418      	add	r0, r3
 8006dc6:	f010 001f 	ands.w	r0, r0, #31
 8006dca:	f000 8082 	beq.w	8006ed2 <_dtoa_r+0x912>
 8006dce:	f1c0 0320 	rsb	r3, r0, #32
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	dd73      	ble.n	8006ebe <_dtoa_r+0x8fe>
 8006dd6:	9b00      	ldr	r3, [sp, #0]
 8006dd8:	f1c0 001c 	rsb	r0, r0, #28
 8006ddc:	4403      	add	r3, r0
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	9b06      	ldr	r3, [sp, #24]
 8006de2:	4403      	add	r3, r0
 8006de4:	4406      	add	r6, r0
 8006de6:	9306      	str	r3, [sp, #24]
 8006de8:	9b00      	ldr	r3, [sp, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	dd05      	ble.n	8006dfa <_dtoa_r+0x83a>
 8006dee:	9902      	ldr	r1, [sp, #8]
 8006df0:	461a      	mov	r2, r3
 8006df2:	4648      	mov	r0, r9
 8006df4:	f000 fcba 	bl	800776c <__lshift>
 8006df8:	9002      	str	r0, [sp, #8]
 8006dfa:	9b06      	ldr	r3, [sp, #24]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	dd05      	ble.n	8006e0c <_dtoa_r+0x84c>
 8006e00:	4621      	mov	r1, r4
 8006e02:	461a      	mov	r2, r3
 8006e04:	4648      	mov	r0, r9
 8006e06:	f000 fcb1 	bl	800776c <__lshift>
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d061      	beq.n	8006ed6 <_dtoa_r+0x916>
 8006e12:	9802      	ldr	r0, [sp, #8]
 8006e14:	4621      	mov	r1, r4
 8006e16:	f000 fd15 	bl	8007844 <__mcmp>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	da5b      	bge.n	8006ed6 <_dtoa_r+0x916>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9902      	ldr	r1, [sp, #8]
 8006e22:	220a      	movs	r2, #10
 8006e24:	4648      	mov	r0, r9
 8006e26:	f000 fafd 	bl	8007424 <__multadd>
 8006e2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e2c:	9002      	str	r0, [sp, #8]
 8006e2e:	f107 38ff 	add.w	r8, r7, #4294967295
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 8177 	beq.w	8007126 <_dtoa_r+0xb66>
 8006e38:	4629      	mov	r1, r5
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	220a      	movs	r2, #10
 8006e3e:	4648      	mov	r0, r9
 8006e40:	f000 faf0 	bl	8007424 <__multadd>
 8006e44:	f1bb 0f00 	cmp.w	fp, #0
 8006e48:	4605      	mov	r5, r0
 8006e4a:	dc6f      	bgt.n	8006f2c <_dtoa_r+0x96c>
 8006e4c:	9b07      	ldr	r3, [sp, #28]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	dc49      	bgt.n	8006ee6 <_dtoa_r+0x926>
 8006e52:	e06b      	b.n	8006f2c <_dtoa_r+0x96c>
 8006e54:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006e5a:	e73c      	b.n	8006cd6 <_dtoa_r+0x716>
 8006e5c:	3fe00000 	.word	0x3fe00000
 8006e60:	40240000 	.word	0x40240000
 8006e64:	9b03      	ldr	r3, [sp, #12]
 8006e66:	1e5c      	subs	r4, r3, #1
 8006e68:	9b08      	ldr	r3, [sp, #32]
 8006e6a:	42a3      	cmp	r3, r4
 8006e6c:	db09      	blt.n	8006e82 <_dtoa_r+0x8c2>
 8006e6e:	1b1c      	subs	r4, r3, r4
 8006e70:	9b03      	ldr	r3, [sp, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f6bf af30 	bge.w	8006cd8 <_dtoa_r+0x718>
 8006e78:	9b00      	ldr	r3, [sp, #0]
 8006e7a:	9a03      	ldr	r2, [sp, #12]
 8006e7c:	1a9e      	subs	r6, r3, r2
 8006e7e:	2300      	movs	r3, #0
 8006e80:	e72b      	b.n	8006cda <_dtoa_r+0x71a>
 8006e82:	9b08      	ldr	r3, [sp, #32]
 8006e84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006e86:	9408      	str	r4, [sp, #32]
 8006e88:	1ae3      	subs	r3, r4, r3
 8006e8a:	441a      	add	r2, r3
 8006e8c:	9e00      	ldr	r6, [sp, #0]
 8006e8e:	9b03      	ldr	r3, [sp, #12]
 8006e90:	920d      	str	r2, [sp, #52]	@ 0x34
 8006e92:	2400      	movs	r4, #0
 8006e94:	e721      	b.n	8006cda <_dtoa_r+0x71a>
 8006e96:	9c08      	ldr	r4, [sp, #32]
 8006e98:	9e00      	ldr	r6, [sp, #0]
 8006e9a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006e9c:	e728      	b.n	8006cf0 <_dtoa_r+0x730>
 8006e9e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006ea2:	e751      	b.n	8006d48 <_dtoa_r+0x788>
 8006ea4:	9a08      	ldr	r2, [sp, #32]
 8006ea6:	9902      	ldr	r1, [sp, #8]
 8006ea8:	e750      	b.n	8006d4c <_dtoa_r+0x78c>
 8006eaa:	f8cd 8008 	str.w	r8, [sp, #8]
 8006eae:	e751      	b.n	8006d54 <_dtoa_r+0x794>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	e779      	b.n	8006da8 <_dtoa_r+0x7e8>
 8006eb4:	9b04      	ldr	r3, [sp, #16]
 8006eb6:	e777      	b.n	8006da8 <_dtoa_r+0x7e8>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	9308      	str	r3, [sp, #32]
 8006ebc:	e779      	b.n	8006db2 <_dtoa_r+0x7f2>
 8006ebe:	d093      	beq.n	8006de8 <_dtoa_r+0x828>
 8006ec0:	9a00      	ldr	r2, [sp, #0]
 8006ec2:	331c      	adds	r3, #28
 8006ec4:	441a      	add	r2, r3
 8006ec6:	9200      	str	r2, [sp, #0]
 8006ec8:	9a06      	ldr	r2, [sp, #24]
 8006eca:	441a      	add	r2, r3
 8006ecc:	441e      	add	r6, r3
 8006ece:	9206      	str	r2, [sp, #24]
 8006ed0:	e78a      	b.n	8006de8 <_dtoa_r+0x828>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	e7f4      	b.n	8006ec0 <_dtoa_r+0x900>
 8006ed6:	9b03      	ldr	r3, [sp, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	46b8      	mov	r8, r7
 8006edc:	dc20      	bgt.n	8006f20 <_dtoa_r+0x960>
 8006ede:	469b      	mov	fp, r3
 8006ee0:	9b07      	ldr	r3, [sp, #28]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	dd1e      	ble.n	8006f24 <_dtoa_r+0x964>
 8006ee6:	f1bb 0f00 	cmp.w	fp, #0
 8006eea:	f47f adb1 	bne.w	8006a50 <_dtoa_r+0x490>
 8006eee:	4621      	mov	r1, r4
 8006ef0:	465b      	mov	r3, fp
 8006ef2:	2205      	movs	r2, #5
 8006ef4:	4648      	mov	r0, r9
 8006ef6:	f000 fa95 	bl	8007424 <__multadd>
 8006efa:	4601      	mov	r1, r0
 8006efc:	4604      	mov	r4, r0
 8006efe:	9802      	ldr	r0, [sp, #8]
 8006f00:	f000 fca0 	bl	8007844 <__mcmp>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	f77f ada3 	ble.w	8006a50 <_dtoa_r+0x490>
 8006f0a:	4656      	mov	r6, sl
 8006f0c:	2331      	movs	r3, #49	@ 0x31
 8006f0e:	f806 3b01 	strb.w	r3, [r6], #1
 8006f12:	f108 0801 	add.w	r8, r8, #1
 8006f16:	e59f      	b.n	8006a58 <_dtoa_r+0x498>
 8006f18:	9c03      	ldr	r4, [sp, #12]
 8006f1a:	46b8      	mov	r8, r7
 8006f1c:	4625      	mov	r5, r4
 8006f1e:	e7f4      	b.n	8006f0a <_dtoa_r+0x94a>
 8006f20:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 8101 	beq.w	800712e <_dtoa_r+0xb6e>
 8006f2c:	2e00      	cmp	r6, #0
 8006f2e:	dd05      	ble.n	8006f3c <_dtoa_r+0x97c>
 8006f30:	4629      	mov	r1, r5
 8006f32:	4632      	mov	r2, r6
 8006f34:	4648      	mov	r0, r9
 8006f36:	f000 fc19 	bl	800776c <__lshift>
 8006f3a:	4605      	mov	r5, r0
 8006f3c:	9b08      	ldr	r3, [sp, #32]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d05c      	beq.n	8006ffc <_dtoa_r+0xa3c>
 8006f42:	6869      	ldr	r1, [r5, #4]
 8006f44:	4648      	mov	r0, r9
 8006f46:	f000 fa0b 	bl	8007360 <_Balloc>
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	b928      	cbnz	r0, 8006f5a <_dtoa_r+0x99a>
 8006f4e:	4b82      	ldr	r3, [pc, #520]	@ (8007158 <_dtoa_r+0xb98>)
 8006f50:	4602      	mov	r2, r0
 8006f52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006f56:	f7ff bb4a 	b.w	80065ee <_dtoa_r+0x2e>
 8006f5a:	692a      	ldr	r2, [r5, #16]
 8006f5c:	3202      	adds	r2, #2
 8006f5e:	0092      	lsls	r2, r2, #2
 8006f60:	f105 010c 	add.w	r1, r5, #12
 8006f64:	300c      	adds	r0, #12
 8006f66:	f7ff fa76 	bl	8006456 <memcpy>
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	4631      	mov	r1, r6
 8006f6e:	4648      	mov	r0, r9
 8006f70:	f000 fbfc 	bl	800776c <__lshift>
 8006f74:	f10a 0301 	add.w	r3, sl, #1
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	eb0a 030b 	add.w	r3, sl, fp
 8006f7e:	9308      	str	r3, [sp, #32]
 8006f80:	9b04      	ldr	r3, [sp, #16]
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	462f      	mov	r7, r5
 8006f88:	9306      	str	r3, [sp, #24]
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	9b00      	ldr	r3, [sp, #0]
 8006f8e:	9802      	ldr	r0, [sp, #8]
 8006f90:	4621      	mov	r1, r4
 8006f92:	f103 3bff 	add.w	fp, r3, #4294967295
 8006f96:	f7ff fa8b 	bl	80064b0 <quorem>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	3330      	adds	r3, #48	@ 0x30
 8006f9e:	9003      	str	r0, [sp, #12]
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	9802      	ldr	r0, [sp, #8]
 8006fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fa6:	f000 fc4d 	bl	8007844 <__mcmp>
 8006faa:	462a      	mov	r2, r5
 8006fac:	9004      	str	r0, [sp, #16]
 8006fae:	4621      	mov	r1, r4
 8006fb0:	4648      	mov	r0, r9
 8006fb2:	f000 fc63 	bl	800787c <__mdiff>
 8006fb6:	68c2      	ldr	r2, [r0, #12]
 8006fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fba:	4606      	mov	r6, r0
 8006fbc:	bb02      	cbnz	r2, 8007000 <_dtoa_r+0xa40>
 8006fbe:	4601      	mov	r1, r0
 8006fc0:	9802      	ldr	r0, [sp, #8]
 8006fc2:	f000 fc3f 	bl	8007844 <__mcmp>
 8006fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fc8:	4602      	mov	r2, r0
 8006fca:	4631      	mov	r1, r6
 8006fcc:	4648      	mov	r0, r9
 8006fce:	920c      	str	r2, [sp, #48]	@ 0x30
 8006fd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fd2:	f000 fa05 	bl	80073e0 <_Bfree>
 8006fd6:	9b07      	ldr	r3, [sp, #28]
 8006fd8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006fda:	9e00      	ldr	r6, [sp, #0]
 8006fdc:	ea42 0103 	orr.w	r1, r2, r3
 8006fe0:	9b06      	ldr	r3, [sp, #24]
 8006fe2:	4319      	orrs	r1, r3
 8006fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe6:	d10d      	bne.n	8007004 <_dtoa_r+0xa44>
 8006fe8:	2b39      	cmp	r3, #57	@ 0x39
 8006fea:	d027      	beq.n	800703c <_dtoa_r+0xa7c>
 8006fec:	9a04      	ldr	r2, [sp, #16]
 8006fee:	2a00      	cmp	r2, #0
 8006ff0:	dd01      	ble.n	8006ff6 <_dtoa_r+0xa36>
 8006ff2:	9b03      	ldr	r3, [sp, #12]
 8006ff4:	3331      	adds	r3, #49	@ 0x31
 8006ff6:	f88b 3000 	strb.w	r3, [fp]
 8006ffa:	e52e      	b.n	8006a5a <_dtoa_r+0x49a>
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	e7b9      	b.n	8006f74 <_dtoa_r+0x9b4>
 8007000:	2201      	movs	r2, #1
 8007002:	e7e2      	b.n	8006fca <_dtoa_r+0xa0a>
 8007004:	9904      	ldr	r1, [sp, #16]
 8007006:	2900      	cmp	r1, #0
 8007008:	db04      	blt.n	8007014 <_dtoa_r+0xa54>
 800700a:	9807      	ldr	r0, [sp, #28]
 800700c:	4301      	orrs	r1, r0
 800700e:	9806      	ldr	r0, [sp, #24]
 8007010:	4301      	orrs	r1, r0
 8007012:	d120      	bne.n	8007056 <_dtoa_r+0xa96>
 8007014:	2a00      	cmp	r2, #0
 8007016:	ddee      	ble.n	8006ff6 <_dtoa_r+0xa36>
 8007018:	9902      	ldr	r1, [sp, #8]
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	2201      	movs	r2, #1
 800701e:	4648      	mov	r0, r9
 8007020:	f000 fba4 	bl	800776c <__lshift>
 8007024:	4621      	mov	r1, r4
 8007026:	9002      	str	r0, [sp, #8]
 8007028:	f000 fc0c 	bl	8007844 <__mcmp>
 800702c:	2800      	cmp	r0, #0
 800702e:	9b00      	ldr	r3, [sp, #0]
 8007030:	dc02      	bgt.n	8007038 <_dtoa_r+0xa78>
 8007032:	d1e0      	bne.n	8006ff6 <_dtoa_r+0xa36>
 8007034:	07da      	lsls	r2, r3, #31
 8007036:	d5de      	bpl.n	8006ff6 <_dtoa_r+0xa36>
 8007038:	2b39      	cmp	r3, #57	@ 0x39
 800703a:	d1da      	bne.n	8006ff2 <_dtoa_r+0xa32>
 800703c:	2339      	movs	r3, #57	@ 0x39
 800703e:	f88b 3000 	strb.w	r3, [fp]
 8007042:	4633      	mov	r3, r6
 8007044:	461e      	mov	r6, r3
 8007046:	3b01      	subs	r3, #1
 8007048:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800704c:	2a39      	cmp	r2, #57	@ 0x39
 800704e:	d04e      	beq.n	80070ee <_dtoa_r+0xb2e>
 8007050:	3201      	adds	r2, #1
 8007052:	701a      	strb	r2, [r3, #0]
 8007054:	e501      	b.n	8006a5a <_dtoa_r+0x49a>
 8007056:	2a00      	cmp	r2, #0
 8007058:	dd03      	ble.n	8007062 <_dtoa_r+0xaa2>
 800705a:	2b39      	cmp	r3, #57	@ 0x39
 800705c:	d0ee      	beq.n	800703c <_dtoa_r+0xa7c>
 800705e:	3301      	adds	r3, #1
 8007060:	e7c9      	b.n	8006ff6 <_dtoa_r+0xa36>
 8007062:	9a00      	ldr	r2, [sp, #0]
 8007064:	9908      	ldr	r1, [sp, #32]
 8007066:	f802 3c01 	strb.w	r3, [r2, #-1]
 800706a:	428a      	cmp	r2, r1
 800706c:	d028      	beq.n	80070c0 <_dtoa_r+0xb00>
 800706e:	9902      	ldr	r1, [sp, #8]
 8007070:	2300      	movs	r3, #0
 8007072:	220a      	movs	r2, #10
 8007074:	4648      	mov	r0, r9
 8007076:	f000 f9d5 	bl	8007424 <__multadd>
 800707a:	42af      	cmp	r7, r5
 800707c:	9002      	str	r0, [sp, #8]
 800707e:	f04f 0300 	mov.w	r3, #0
 8007082:	f04f 020a 	mov.w	r2, #10
 8007086:	4639      	mov	r1, r7
 8007088:	4648      	mov	r0, r9
 800708a:	d107      	bne.n	800709c <_dtoa_r+0xadc>
 800708c:	f000 f9ca 	bl	8007424 <__multadd>
 8007090:	4607      	mov	r7, r0
 8007092:	4605      	mov	r5, r0
 8007094:	9b00      	ldr	r3, [sp, #0]
 8007096:	3301      	adds	r3, #1
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	e777      	b.n	8006f8c <_dtoa_r+0x9cc>
 800709c:	f000 f9c2 	bl	8007424 <__multadd>
 80070a0:	4629      	mov	r1, r5
 80070a2:	4607      	mov	r7, r0
 80070a4:	2300      	movs	r3, #0
 80070a6:	220a      	movs	r2, #10
 80070a8:	4648      	mov	r0, r9
 80070aa:	f000 f9bb 	bl	8007424 <__multadd>
 80070ae:	4605      	mov	r5, r0
 80070b0:	e7f0      	b.n	8007094 <_dtoa_r+0xad4>
 80070b2:	f1bb 0f00 	cmp.w	fp, #0
 80070b6:	bfcc      	ite	gt
 80070b8:	465e      	movgt	r6, fp
 80070ba:	2601      	movle	r6, #1
 80070bc:	4456      	add	r6, sl
 80070be:	2700      	movs	r7, #0
 80070c0:	9902      	ldr	r1, [sp, #8]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	2201      	movs	r2, #1
 80070c6:	4648      	mov	r0, r9
 80070c8:	f000 fb50 	bl	800776c <__lshift>
 80070cc:	4621      	mov	r1, r4
 80070ce:	9002      	str	r0, [sp, #8]
 80070d0:	f000 fbb8 	bl	8007844 <__mcmp>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	dcb4      	bgt.n	8007042 <_dtoa_r+0xa82>
 80070d8:	d102      	bne.n	80070e0 <_dtoa_r+0xb20>
 80070da:	9b00      	ldr	r3, [sp, #0]
 80070dc:	07db      	lsls	r3, r3, #31
 80070de:	d4b0      	bmi.n	8007042 <_dtoa_r+0xa82>
 80070e0:	4633      	mov	r3, r6
 80070e2:	461e      	mov	r6, r3
 80070e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070e8:	2a30      	cmp	r2, #48	@ 0x30
 80070ea:	d0fa      	beq.n	80070e2 <_dtoa_r+0xb22>
 80070ec:	e4b5      	b.n	8006a5a <_dtoa_r+0x49a>
 80070ee:	459a      	cmp	sl, r3
 80070f0:	d1a8      	bne.n	8007044 <_dtoa_r+0xa84>
 80070f2:	2331      	movs	r3, #49	@ 0x31
 80070f4:	f108 0801 	add.w	r8, r8, #1
 80070f8:	f88a 3000 	strb.w	r3, [sl]
 80070fc:	e4ad      	b.n	8006a5a <_dtoa_r+0x49a>
 80070fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007100:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800715c <_dtoa_r+0xb9c>
 8007104:	b11b      	cbz	r3, 800710e <_dtoa_r+0xb4e>
 8007106:	f10a 0308 	add.w	r3, sl, #8
 800710a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800710c:	6013      	str	r3, [r2, #0]
 800710e:	4650      	mov	r0, sl
 8007110:	b017      	add	sp, #92	@ 0x5c
 8007112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007116:	9b07      	ldr	r3, [sp, #28]
 8007118:	2b01      	cmp	r3, #1
 800711a:	f77f ae2e 	ble.w	8006d7a <_dtoa_r+0x7ba>
 800711e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007120:	9308      	str	r3, [sp, #32]
 8007122:	2001      	movs	r0, #1
 8007124:	e64d      	b.n	8006dc2 <_dtoa_r+0x802>
 8007126:	f1bb 0f00 	cmp.w	fp, #0
 800712a:	f77f aed9 	ble.w	8006ee0 <_dtoa_r+0x920>
 800712e:	4656      	mov	r6, sl
 8007130:	9802      	ldr	r0, [sp, #8]
 8007132:	4621      	mov	r1, r4
 8007134:	f7ff f9bc 	bl	80064b0 <quorem>
 8007138:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800713c:	f806 3b01 	strb.w	r3, [r6], #1
 8007140:	eba6 020a 	sub.w	r2, r6, sl
 8007144:	4593      	cmp	fp, r2
 8007146:	ddb4      	ble.n	80070b2 <_dtoa_r+0xaf2>
 8007148:	9902      	ldr	r1, [sp, #8]
 800714a:	2300      	movs	r3, #0
 800714c:	220a      	movs	r2, #10
 800714e:	4648      	mov	r0, r9
 8007150:	f000 f968 	bl	8007424 <__multadd>
 8007154:	9002      	str	r0, [sp, #8]
 8007156:	e7eb      	b.n	8007130 <_dtoa_r+0xb70>
 8007158:	0800896c 	.word	0x0800896c
 800715c:	080088f0 	.word	0x080088f0

08007160 <_free_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4605      	mov	r5, r0
 8007164:	2900      	cmp	r1, #0
 8007166:	d041      	beq.n	80071ec <_free_r+0x8c>
 8007168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800716c:	1f0c      	subs	r4, r1, #4
 800716e:	2b00      	cmp	r3, #0
 8007170:	bfb8      	it	lt
 8007172:	18e4      	addlt	r4, r4, r3
 8007174:	f000 f8e8 	bl	8007348 <__malloc_lock>
 8007178:	4a1d      	ldr	r2, [pc, #116]	@ (80071f0 <_free_r+0x90>)
 800717a:	6813      	ldr	r3, [r2, #0]
 800717c:	b933      	cbnz	r3, 800718c <_free_r+0x2c>
 800717e:	6063      	str	r3, [r4, #4]
 8007180:	6014      	str	r4, [r2, #0]
 8007182:	4628      	mov	r0, r5
 8007184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007188:	f000 b8e4 	b.w	8007354 <__malloc_unlock>
 800718c:	42a3      	cmp	r3, r4
 800718e:	d908      	bls.n	80071a2 <_free_r+0x42>
 8007190:	6820      	ldr	r0, [r4, #0]
 8007192:	1821      	adds	r1, r4, r0
 8007194:	428b      	cmp	r3, r1
 8007196:	bf01      	itttt	eq
 8007198:	6819      	ldreq	r1, [r3, #0]
 800719a:	685b      	ldreq	r3, [r3, #4]
 800719c:	1809      	addeq	r1, r1, r0
 800719e:	6021      	streq	r1, [r4, #0]
 80071a0:	e7ed      	b.n	800717e <_free_r+0x1e>
 80071a2:	461a      	mov	r2, r3
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	b10b      	cbz	r3, 80071ac <_free_r+0x4c>
 80071a8:	42a3      	cmp	r3, r4
 80071aa:	d9fa      	bls.n	80071a2 <_free_r+0x42>
 80071ac:	6811      	ldr	r1, [r2, #0]
 80071ae:	1850      	adds	r0, r2, r1
 80071b0:	42a0      	cmp	r0, r4
 80071b2:	d10b      	bne.n	80071cc <_free_r+0x6c>
 80071b4:	6820      	ldr	r0, [r4, #0]
 80071b6:	4401      	add	r1, r0
 80071b8:	1850      	adds	r0, r2, r1
 80071ba:	4283      	cmp	r3, r0
 80071bc:	6011      	str	r1, [r2, #0]
 80071be:	d1e0      	bne.n	8007182 <_free_r+0x22>
 80071c0:	6818      	ldr	r0, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	6053      	str	r3, [r2, #4]
 80071c6:	4408      	add	r0, r1
 80071c8:	6010      	str	r0, [r2, #0]
 80071ca:	e7da      	b.n	8007182 <_free_r+0x22>
 80071cc:	d902      	bls.n	80071d4 <_free_r+0x74>
 80071ce:	230c      	movs	r3, #12
 80071d0:	602b      	str	r3, [r5, #0]
 80071d2:	e7d6      	b.n	8007182 <_free_r+0x22>
 80071d4:	6820      	ldr	r0, [r4, #0]
 80071d6:	1821      	adds	r1, r4, r0
 80071d8:	428b      	cmp	r3, r1
 80071da:	bf04      	itt	eq
 80071dc:	6819      	ldreq	r1, [r3, #0]
 80071de:	685b      	ldreq	r3, [r3, #4]
 80071e0:	6063      	str	r3, [r4, #4]
 80071e2:	bf04      	itt	eq
 80071e4:	1809      	addeq	r1, r1, r0
 80071e6:	6021      	streq	r1, [r4, #0]
 80071e8:	6054      	str	r4, [r2, #4]
 80071ea:	e7ca      	b.n	8007182 <_free_r+0x22>
 80071ec:	bd38      	pop	{r3, r4, r5, pc}
 80071ee:	bf00      	nop
 80071f0:	20000690 	.word	0x20000690

080071f4 <malloc>:
 80071f4:	4b02      	ldr	r3, [pc, #8]	@ (8007200 <malloc+0xc>)
 80071f6:	4601      	mov	r1, r0
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	f000 b825 	b.w	8007248 <_malloc_r>
 80071fe:	bf00      	nop
 8007200:	20000108 	.word	0x20000108

08007204 <sbrk_aligned>:
 8007204:	b570      	push	{r4, r5, r6, lr}
 8007206:	4e0f      	ldr	r6, [pc, #60]	@ (8007244 <sbrk_aligned+0x40>)
 8007208:	460c      	mov	r4, r1
 800720a:	6831      	ldr	r1, [r6, #0]
 800720c:	4605      	mov	r5, r0
 800720e:	b911      	cbnz	r1, 8007216 <sbrk_aligned+0x12>
 8007210:	f001 f816 	bl	8008240 <_sbrk_r>
 8007214:	6030      	str	r0, [r6, #0]
 8007216:	4621      	mov	r1, r4
 8007218:	4628      	mov	r0, r5
 800721a:	f001 f811 	bl	8008240 <_sbrk_r>
 800721e:	1c43      	adds	r3, r0, #1
 8007220:	d103      	bne.n	800722a <sbrk_aligned+0x26>
 8007222:	f04f 34ff 	mov.w	r4, #4294967295
 8007226:	4620      	mov	r0, r4
 8007228:	bd70      	pop	{r4, r5, r6, pc}
 800722a:	1cc4      	adds	r4, r0, #3
 800722c:	f024 0403 	bic.w	r4, r4, #3
 8007230:	42a0      	cmp	r0, r4
 8007232:	d0f8      	beq.n	8007226 <sbrk_aligned+0x22>
 8007234:	1a21      	subs	r1, r4, r0
 8007236:	4628      	mov	r0, r5
 8007238:	f001 f802 	bl	8008240 <_sbrk_r>
 800723c:	3001      	adds	r0, #1
 800723e:	d1f2      	bne.n	8007226 <sbrk_aligned+0x22>
 8007240:	e7ef      	b.n	8007222 <sbrk_aligned+0x1e>
 8007242:	bf00      	nop
 8007244:	2000068c 	.word	0x2000068c

08007248 <_malloc_r>:
 8007248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800724c:	1ccd      	adds	r5, r1, #3
 800724e:	f025 0503 	bic.w	r5, r5, #3
 8007252:	3508      	adds	r5, #8
 8007254:	2d0c      	cmp	r5, #12
 8007256:	bf38      	it	cc
 8007258:	250c      	movcc	r5, #12
 800725a:	2d00      	cmp	r5, #0
 800725c:	4606      	mov	r6, r0
 800725e:	db01      	blt.n	8007264 <_malloc_r+0x1c>
 8007260:	42a9      	cmp	r1, r5
 8007262:	d904      	bls.n	800726e <_malloc_r+0x26>
 8007264:	230c      	movs	r3, #12
 8007266:	6033      	str	r3, [r6, #0]
 8007268:	2000      	movs	r0, #0
 800726a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800726e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007344 <_malloc_r+0xfc>
 8007272:	f000 f869 	bl	8007348 <__malloc_lock>
 8007276:	f8d8 3000 	ldr.w	r3, [r8]
 800727a:	461c      	mov	r4, r3
 800727c:	bb44      	cbnz	r4, 80072d0 <_malloc_r+0x88>
 800727e:	4629      	mov	r1, r5
 8007280:	4630      	mov	r0, r6
 8007282:	f7ff ffbf 	bl	8007204 <sbrk_aligned>
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	4604      	mov	r4, r0
 800728a:	d158      	bne.n	800733e <_malloc_r+0xf6>
 800728c:	f8d8 4000 	ldr.w	r4, [r8]
 8007290:	4627      	mov	r7, r4
 8007292:	2f00      	cmp	r7, #0
 8007294:	d143      	bne.n	800731e <_malloc_r+0xd6>
 8007296:	2c00      	cmp	r4, #0
 8007298:	d04b      	beq.n	8007332 <_malloc_r+0xea>
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	4639      	mov	r1, r7
 800729e:	4630      	mov	r0, r6
 80072a0:	eb04 0903 	add.w	r9, r4, r3
 80072a4:	f000 ffcc 	bl	8008240 <_sbrk_r>
 80072a8:	4581      	cmp	r9, r0
 80072aa:	d142      	bne.n	8007332 <_malloc_r+0xea>
 80072ac:	6821      	ldr	r1, [r4, #0]
 80072ae:	1a6d      	subs	r5, r5, r1
 80072b0:	4629      	mov	r1, r5
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7ff ffa6 	bl	8007204 <sbrk_aligned>
 80072b8:	3001      	adds	r0, #1
 80072ba:	d03a      	beq.n	8007332 <_malloc_r+0xea>
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	442b      	add	r3, r5
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	f8d8 3000 	ldr.w	r3, [r8]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	bb62      	cbnz	r2, 8007324 <_malloc_r+0xdc>
 80072ca:	f8c8 7000 	str.w	r7, [r8]
 80072ce:	e00f      	b.n	80072f0 <_malloc_r+0xa8>
 80072d0:	6822      	ldr	r2, [r4, #0]
 80072d2:	1b52      	subs	r2, r2, r5
 80072d4:	d420      	bmi.n	8007318 <_malloc_r+0xd0>
 80072d6:	2a0b      	cmp	r2, #11
 80072d8:	d917      	bls.n	800730a <_malloc_r+0xc2>
 80072da:	1961      	adds	r1, r4, r5
 80072dc:	42a3      	cmp	r3, r4
 80072de:	6025      	str	r5, [r4, #0]
 80072e0:	bf18      	it	ne
 80072e2:	6059      	strne	r1, [r3, #4]
 80072e4:	6863      	ldr	r3, [r4, #4]
 80072e6:	bf08      	it	eq
 80072e8:	f8c8 1000 	streq.w	r1, [r8]
 80072ec:	5162      	str	r2, [r4, r5]
 80072ee:	604b      	str	r3, [r1, #4]
 80072f0:	4630      	mov	r0, r6
 80072f2:	f000 f82f 	bl	8007354 <__malloc_unlock>
 80072f6:	f104 000b 	add.w	r0, r4, #11
 80072fa:	1d23      	adds	r3, r4, #4
 80072fc:	f020 0007 	bic.w	r0, r0, #7
 8007300:	1ac2      	subs	r2, r0, r3
 8007302:	bf1c      	itt	ne
 8007304:	1a1b      	subne	r3, r3, r0
 8007306:	50a3      	strne	r3, [r4, r2]
 8007308:	e7af      	b.n	800726a <_malloc_r+0x22>
 800730a:	6862      	ldr	r2, [r4, #4]
 800730c:	42a3      	cmp	r3, r4
 800730e:	bf0c      	ite	eq
 8007310:	f8c8 2000 	streq.w	r2, [r8]
 8007314:	605a      	strne	r2, [r3, #4]
 8007316:	e7eb      	b.n	80072f0 <_malloc_r+0xa8>
 8007318:	4623      	mov	r3, r4
 800731a:	6864      	ldr	r4, [r4, #4]
 800731c:	e7ae      	b.n	800727c <_malloc_r+0x34>
 800731e:	463c      	mov	r4, r7
 8007320:	687f      	ldr	r7, [r7, #4]
 8007322:	e7b6      	b.n	8007292 <_malloc_r+0x4a>
 8007324:	461a      	mov	r2, r3
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	42a3      	cmp	r3, r4
 800732a:	d1fb      	bne.n	8007324 <_malloc_r+0xdc>
 800732c:	2300      	movs	r3, #0
 800732e:	6053      	str	r3, [r2, #4]
 8007330:	e7de      	b.n	80072f0 <_malloc_r+0xa8>
 8007332:	230c      	movs	r3, #12
 8007334:	6033      	str	r3, [r6, #0]
 8007336:	4630      	mov	r0, r6
 8007338:	f000 f80c 	bl	8007354 <__malloc_unlock>
 800733c:	e794      	b.n	8007268 <_malloc_r+0x20>
 800733e:	6005      	str	r5, [r0, #0]
 8007340:	e7d6      	b.n	80072f0 <_malloc_r+0xa8>
 8007342:	bf00      	nop
 8007344:	20000690 	.word	0x20000690

08007348 <__malloc_lock>:
 8007348:	4801      	ldr	r0, [pc, #4]	@ (8007350 <__malloc_lock+0x8>)
 800734a:	f7ff b882 	b.w	8006452 <__retarget_lock_acquire_recursive>
 800734e:	bf00      	nop
 8007350:	20000688 	.word	0x20000688

08007354 <__malloc_unlock>:
 8007354:	4801      	ldr	r0, [pc, #4]	@ (800735c <__malloc_unlock+0x8>)
 8007356:	f7ff b87d 	b.w	8006454 <__retarget_lock_release_recursive>
 800735a:	bf00      	nop
 800735c:	20000688 	.word	0x20000688

08007360 <_Balloc>:
 8007360:	b570      	push	{r4, r5, r6, lr}
 8007362:	69c6      	ldr	r6, [r0, #28]
 8007364:	4604      	mov	r4, r0
 8007366:	460d      	mov	r5, r1
 8007368:	b976      	cbnz	r6, 8007388 <_Balloc+0x28>
 800736a:	2010      	movs	r0, #16
 800736c:	f7ff ff42 	bl	80071f4 <malloc>
 8007370:	4602      	mov	r2, r0
 8007372:	61e0      	str	r0, [r4, #28]
 8007374:	b920      	cbnz	r0, 8007380 <_Balloc+0x20>
 8007376:	4b18      	ldr	r3, [pc, #96]	@ (80073d8 <_Balloc+0x78>)
 8007378:	4818      	ldr	r0, [pc, #96]	@ (80073dc <_Balloc+0x7c>)
 800737a:	216b      	movs	r1, #107	@ 0x6b
 800737c:	f7ff f87a 	bl	8006474 <__assert_func>
 8007380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007384:	6006      	str	r6, [r0, #0]
 8007386:	60c6      	str	r6, [r0, #12]
 8007388:	69e6      	ldr	r6, [r4, #28]
 800738a:	68f3      	ldr	r3, [r6, #12]
 800738c:	b183      	cbz	r3, 80073b0 <_Balloc+0x50>
 800738e:	69e3      	ldr	r3, [r4, #28]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007396:	b9b8      	cbnz	r0, 80073c8 <_Balloc+0x68>
 8007398:	2101      	movs	r1, #1
 800739a:	fa01 f605 	lsl.w	r6, r1, r5
 800739e:	1d72      	adds	r2, r6, #5
 80073a0:	0092      	lsls	r2, r2, #2
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 ff63 	bl	800826e <_calloc_r>
 80073a8:	b160      	cbz	r0, 80073c4 <_Balloc+0x64>
 80073aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073ae:	e00e      	b.n	80073ce <_Balloc+0x6e>
 80073b0:	2221      	movs	r2, #33	@ 0x21
 80073b2:	2104      	movs	r1, #4
 80073b4:	4620      	mov	r0, r4
 80073b6:	f000 ff5a 	bl	800826e <_calloc_r>
 80073ba:	69e3      	ldr	r3, [r4, #28]
 80073bc:	60f0      	str	r0, [r6, #12]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e4      	bne.n	800738e <_Balloc+0x2e>
 80073c4:	2000      	movs	r0, #0
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
 80073c8:	6802      	ldr	r2, [r0, #0]
 80073ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073ce:	2300      	movs	r3, #0
 80073d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073d4:	e7f7      	b.n	80073c6 <_Balloc+0x66>
 80073d6:	bf00      	nop
 80073d8:	080088fd 	.word	0x080088fd
 80073dc:	0800897d 	.word	0x0800897d

080073e0 <_Bfree>:
 80073e0:	b570      	push	{r4, r5, r6, lr}
 80073e2:	69c6      	ldr	r6, [r0, #28]
 80073e4:	4605      	mov	r5, r0
 80073e6:	460c      	mov	r4, r1
 80073e8:	b976      	cbnz	r6, 8007408 <_Bfree+0x28>
 80073ea:	2010      	movs	r0, #16
 80073ec:	f7ff ff02 	bl	80071f4 <malloc>
 80073f0:	4602      	mov	r2, r0
 80073f2:	61e8      	str	r0, [r5, #28]
 80073f4:	b920      	cbnz	r0, 8007400 <_Bfree+0x20>
 80073f6:	4b09      	ldr	r3, [pc, #36]	@ (800741c <_Bfree+0x3c>)
 80073f8:	4809      	ldr	r0, [pc, #36]	@ (8007420 <_Bfree+0x40>)
 80073fa:	218f      	movs	r1, #143	@ 0x8f
 80073fc:	f7ff f83a 	bl	8006474 <__assert_func>
 8007400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007404:	6006      	str	r6, [r0, #0]
 8007406:	60c6      	str	r6, [r0, #12]
 8007408:	b13c      	cbz	r4, 800741a <_Bfree+0x3a>
 800740a:	69eb      	ldr	r3, [r5, #28]
 800740c:	6862      	ldr	r2, [r4, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007414:	6021      	str	r1, [r4, #0]
 8007416:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800741a:	bd70      	pop	{r4, r5, r6, pc}
 800741c:	080088fd 	.word	0x080088fd
 8007420:	0800897d 	.word	0x0800897d

08007424 <__multadd>:
 8007424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007428:	690d      	ldr	r5, [r1, #16]
 800742a:	4607      	mov	r7, r0
 800742c:	460c      	mov	r4, r1
 800742e:	461e      	mov	r6, r3
 8007430:	f101 0c14 	add.w	ip, r1, #20
 8007434:	2000      	movs	r0, #0
 8007436:	f8dc 3000 	ldr.w	r3, [ip]
 800743a:	b299      	uxth	r1, r3
 800743c:	fb02 6101 	mla	r1, r2, r1, r6
 8007440:	0c1e      	lsrs	r6, r3, #16
 8007442:	0c0b      	lsrs	r3, r1, #16
 8007444:	fb02 3306 	mla	r3, r2, r6, r3
 8007448:	b289      	uxth	r1, r1
 800744a:	3001      	adds	r0, #1
 800744c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007450:	4285      	cmp	r5, r0
 8007452:	f84c 1b04 	str.w	r1, [ip], #4
 8007456:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800745a:	dcec      	bgt.n	8007436 <__multadd+0x12>
 800745c:	b30e      	cbz	r6, 80074a2 <__multadd+0x7e>
 800745e:	68a3      	ldr	r3, [r4, #8]
 8007460:	42ab      	cmp	r3, r5
 8007462:	dc19      	bgt.n	8007498 <__multadd+0x74>
 8007464:	6861      	ldr	r1, [r4, #4]
 8007466:	4638      	mov	r0, r7
 8007468:	3101      	adds	r1, #1
 800746a:	f7ff ff79 	bl	8007360 <_Balloc>
 800746e:	4680      	mov	r8, r0
 8007470:	b928      	cbnz	r0, 800747e <__multadd+0x5a>
 8007472:	4602      	mov	r2, r0
 8007474:	4b0c      	ldr	r3, [pc, #48]	@ (80074a8 <__multadd+0x84>)
 8007476:	480d      	ldr	r0, [pc, #52]	@ (80074ac <__multadd+0x88>)
 8007478:	21ba      	movs	r1, #186	@ 0xba
 800747a:	f7fe fffb 	bl	8006474 <__assert_func>
 800747e:	6922      	ldr	r2, [r4, #16]
 8007480:	3202      	adds	r2, #2
 8007482:	f104 010c 	add.w	r1, r4, #12
 8007486:	0092      	lsls	r2, r2, #2
 8007488:	300c      	adds	r0, #12
 800748a:	f7fe ffe4 	bl	8006456 <memcpy>
 800748e:	4621      	mov	r1, r4
 8007490:	4638      	mov	r0, r7
 8007492:	f7ff ffa5 	bl	80073e0 <_Bfree>
 8007496:	4644      	mov	r4, r8
 8007498:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800749c:	3501      	adds	r5, #1
 800749e:	615e      	str	r6, [r3, #20]
 80074a0:	6125      	str	r5, [r4, #16]
 80074a2:	4620      	mov	r0, r4
 80074a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074a8:	0800896c 	.word	0x0800896c
 80074ac:	0800897d 	.word	0x0800897d

080074b0 <__hi0bits>:
 80074b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80074b4:	4603      	mov	r3, r0
 80074b6:	bf36      	itet	cc
 80074b8:	0403      	lslcc	r3, r0, #16
 80074ba:	2000      	movcs	r0, #0
 80074bc:	2010      	movcc	r0, #16
 80074be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074c2:	bf3c      	itt	cc
 80074c4:	021b      	lslcc	r3, r3, #8
 80074c6:	3008      	addcc	r0, #8
 80074c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074cc:	bf3c      	itt	cc
 80074ce:	011b      	lslcc	r3, r3, #4
 80074d0:	3004      	addcc	r0, #4
 80074d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074d6:	bf3c      	itt	cc
 80074d8:	009b      	lslcc	r3, r3, #2
 80074da:	3002      	addcc	r0, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	db05      	blt.n	80074ec <__hi0bits+0x3c>
 80074e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80074e4:	f100 0001 	add.w	r0, r0, #1
 80074e8:	bf08      	it	eq
 80074ea:	2020      	moveq	r0, #32
 80074ec:	4770      	bx	lr

080074ee <__lo0bits>:
 80074ee:	6803      	ldr	r3, [r0, #0]
 80074f0:	4602      	mov	r2, r0
 80074f2:	f013 0007 	ands.w	r0, r3, #7
 80074f6:	d00b      	beq.n	8007510 <__lo0bits+0x22>
 80074f8:	07d9      	lsls	r1, r3, #31
 80074fa:	d421      	bmi.n	8007540 <__lo0bits+0x52>
 80074fc:	0798      	lsls	r0, r3, #30
 80074fe:	bf49      	itett	mi
 8007500:	085b      	lsrmi	r3, r3, #1
 8007502:	089b      	lsrpl	r3, r3, #2
 8007504:	2001      	movmi	r0, #1
 8007506:	6013      	strmi	r3, [r2, #0]
 8007508:	bf5c      	itt	pl
 800750a:	6013      	strpl	r3, [r2, #0]
 800750c:	2002      	movpl	r0, #2
 800750e:	4770      	bx	lr
 8007510:	b299      	uxth	r1, r3
 8007512:	b909      	cbnz	r1, 8007518 <__lo0bits+0x2a>
 8007514:	0c1b      	lsrs	r3, r3, #16
 8007516:	2010      	movs	r0, #16
 8007518:	b2d9      	uxtb	r1, r3
 800751a:	b909      	cbnz	r1, 8007520 <__lo0bits+0x32>
 800751c:	3008      	adds	r0, #8
 800751e:	0a1b      	lsrs	r3, r3, #8
 8007520:	0719      	lsls	r1, r3, #28
 8007522:	bf04      	itt	eq
 8007524:	091b      	lsreq	r3, r3, #4
 8007526:	3004      	addeq	r0, #4
 8007528:	0799      	lsls	r1, r3, #30
 800752a:	bf04      	itt	eq
 800752c:	089b      	lsreq	r3, r3, #2
 800752e:	3002      	addeq	r0, #2
 8007530:	07d9      	lsls	r1, r3, #31
 8007532:	d403      	bmi.n	800753c <__lo0bits+0x4e>
 8007534:	085b      	lsrs	r3, r3, #1
 8007536:	f100 0001 	add.w	r0, r0, #1
 800753a:	d003      	beq.n	8007544 <__lo0bits+0x56>
 800753c:	6013      	str	r3, [r2, #0]
 800753e:	4770      	bx	lr
 8007540:	2000      	movs	r0, #0
 8007542:	4770      	bx	lr
 8007544:	2020      	movs	r0, #32
 8007546:	4770      	bx	lr

08007548 <__i2b>:
 8007548:	b510      	push	{r4, lr}
 800754a:	460c      	mov	r4, r1
 800754c:	2101      	movs	r1, #1
 800754e:	f7ff ff07 	bl	8007360 <_Balloc>
 8007552:	4602      	mov	r2, r0
 8007554:	b928      	cbnz	r0, 8007562 <__i2b+0x1a>
 8007556:	4b05      	ldr	r3, [pc, #20]	@ (800756c <__i2b+0x24>)
 8007558:	4805      	ldr	r0, [pc, #20]	@ (8007570 <__i2b+0x28>)
 800755a:	f240 1145 	movw	r1, #325	@ 0x145
 800755e:	f7fe ff89 	bl	8006474 <__assert_func>
 8007562:	2301      	movs	r3, #1
 8007564:	6144      	str	r4, [r0, #20]
 8007566:	6103      	str	r3, [r0, #16]
 8007568:	bd10      	pop	{r4, pc}
 800756a:	bf00      	nop
 800756c:	0800896c 	.word	0x0800896c
 8007570:	0800897d 	.word	0x0800897d

08007574 <__multiply>:
 8007574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007578:	4617      	mov	r7, r2
 800757a:	690a      	ldr	r2, [r1, #16]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	429a      	cmp	r2, r3
 8007580:	bfa8      	it	ge
 8007582:	463b      	movge	r3, r7
 8007584:	4689      	mov	r9, r1
 8007586:	bfa4      	itt	ge
 8007588:	460f      	movge	r7, r1
 800758a:	4699      	movge	r9, r3
 800758c:	693d      	ldr	r5, [r7, #16]
 800758e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	6879      	ldr	r1, [r7, #4]
 8007596:	eb05 060a 	add.w	r6, r5, sl
 800759a:	42b3      	cmp	r3, r6
 800759c:	b085      	sub	sp, #20
 800759e:	bfb8      	it	lt
 80075a0:	3101      	addlt	r1, #1
 80075a2:	f7ff fedd 	bl	8007360 <_Balloc>
 80075a6:	b930      	cbnz	r0, 80075b6 <__multiply+0x42>
 80075a8:	4602      	mov	r2, r0
 80075aa:	4b41      	ldr	r3, [pc, #260]	@ (80076b0 <__multiply+0x13c>)
 80075ac:	4841      	ldr	r0, [pc, #260]	@ (80076b4 <__multiply+0x140>)
 80075ae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80075b2:	f7fe ff5f 	bl	8006474 <__assert_func>
 80075b6:	f100 0414 	add.w	r4, r0, #20
 80075ba:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80075be:	4623      	mov	r3, r4
 80075c0:	2200      	movs	r2, #0
 80075c2:	4573      	cmp	r3, lr
 80075c4:	d320      	bcc.n	8007608 <__multiply+0x94>
 80075c6:	f107 0814 	add.w	r8, r7, #20
 80075ca:	f109 0114 	add.w	r1, r9, #20
 80075ce:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80075d2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80075d6:	9302      	str	r3, [sp, #8]
 80075d8:	1beb      	subs	r3, r5, r7
 80075da:	3b15      	subs	r3, #21
 80075dc:	f023 0303 	bic.w	r3, r3, #3
 80075e0:	3304      	adds	r3, #4
 80075e2:	3715      	adds	r7, #21
 80075e4:	42bd      	cmp	r5, r7
 80075e6:	bf38      	it	cc
 80075e8:	2304      	movcc	r3, #4
 80075ea:	9301      	str	r3, [sp, #4]
 80075ec:	9b02      	ldr	r3, [sp, #8]
 80075ee:	9103      	str	r1, [sp, #12]
 80075f0:	428b      	cmp	r3, r1
 80075f2:	d80c      	bhi.n	800760e <__multiply+0x9a>
 80075f4:	2e00      	cmp	r6, #0
 80075f6:	dd03      	ble.n	8007600 <__multiply+0x8c>
 80075f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d055      	beq.n	80076ac <__multiply+0x138>
 8007600:	6106      	str	r6, [r0, #16]
 8007602:	b005      	add	sp, #20
 8007604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007608:	f843 2b04 	str.w	r2, [r3], #4
 800760c:	e7d9      	b.n	80075c2 <__multiply+0x4e>
 800760e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007612:	f1ba 0f00 	cmp.w	sl, #0
 8007616:	d01f      	beq.n	8007658 <__multiply+0xe4>
 8007618:	46c4      	mov	ip, r8
 800761a:	46a1      	mov	r9, r4
 800761c:	2700      	movs	r7, #0
 800761e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007622:	f8d9 3000 	ldr.w	r3, [r9]
 8007626:	fa1f fb82 	uxth.w	fp, r2
 800762a:	b29b      	uxth	r3, r3
 800762c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007630:	443b      	add	r3, r7
 8007632:	f8d9 7000 	ldr.w	r7, [r9]
 8007636:	0c12      	lsrs	r2, r2, #16
 8007638:	0c3f      	lsrs	r7, r7, #16
 800763a:	fb0a 7202 	mla	r2, sl, r2, r7
 800763e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007642:	b29b      	uxth	r3, r3
 8007644:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007648:	4565      	cmp	r5, ip
 800764a:	f849 3b04 	str.w	r3, [r9], #4
 800764e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007652:	d8e4      	bhi.n	800761e <__multiply+0xaa>
 8007654:	9b01      	ldr	r3, [sp, #4]
 8007656:	50e7      	str	r7, [r4, r3]
 8007658:	9b03      	ldr	r3, [sp, #12]
 800765a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800765e:	3104      	adds	r1, #4
 8007660:	f1b9 0f00 	cmp.w	r9, #0
 8007664:	d020      	beq.n	80076a8 <__multiply+0x134>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	4647      	mov	r7, r8
 800766a:	46a4      	mov	ip, r4
 800766c:	f04f 0a00 	mov.w	sl, #0
 8007670:	f8b7 b000 	ldrh.w	fp, [r7]
 8007674:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007678:	fb09 220b 	mla	r2, r9, fp, r2
 800767c:	4452      	add	r2, sl
 800767e:	b29b      	uxth	r3, r3
 8007680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007684:	f84c 3b04 	str.w	r3, [ip], #4
 8007688:	f857 3b04 	ldr.w	r3, [r7], #4
 800768c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007690:	f8bc 3000 	ldrh.w	r3, [ip]
 8007694:	fb09 330a 	mla	r3, r9, sl, r3
 8007698:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800769c:	42bd      	cmp	r5, r7
 800769e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076a2:	d8e5      	bhi.n	8007670 <__multiply+0xfc>
 80076a4:	9a01      	ldr	r2, [sp, #4]
 80076a6:	50a3      	str	r3, [r4, r2]
 80076a8:	3404      	adds	r4, #4
 80076aa:	e79f      	b.n	80075ec <__multiply+0x78>
 80076ac:	3e01      	subs	r6, #1
 80076ae:	e7a1      	b.n	80075f4 <__multiply+0x80>
 80076b0:	0800896c 	.word	0x0800896c
 80076b4:	0800897d 	.word	0x0800897d

080076b8 <__pow5mult>:
 80076b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076bc:	4615      	mov	r5, r2
 80076be:	f012 0203 	ands.w	r2, r2, #3
 80076c2:	4607      	mov	r7, r0
 80076c4:	460e      	mov	r6, r1
 80076c6:	d007      	beq.n	80076d8 <__pow5mult+0x20>
 80076c8:	4c25      	ldr	r4, [pc, #148]	@ (8007760 <__pow5mult+0xa8>)
 80076ca:	3a01      	subs	r2, #1
 80076cc:	2300      	movs	r3, #0
 80076ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076d2:	f7ff fea7 	bl	8007424 <__multadd>
 80076d6:	4606      	mov	r6, r0
 80076d8:	10ad      	asrs	r5, r5, #2
 80076da:	d03d      	beq.n	8007758 <__pow5mult+0xa0>
 80076dc:	69fc      	ldr	r4, [r7, #28]
 80076de:	b97c      	cbnz	r4, 8007700 <__pow5mult+0x48>
 80076e0:	2010      	movs	r0, #16
 80076e2:	f7ff fd87 	bl	80071f4 <malloc>
 80076e6:	4602      	mov	r2, r0
 80076e8:	61f8      	str	r0, [r7, #28]
 80076ea:	b928      	cbnz	r0, 80076f8 <__pow5mult+0x40>
 80076ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007764 <__pow5mult+0xac>)
 80076ee:	481e      	ldr	r0, [pc, #120]	@ (8007768 <__pow5mult+0xb0>)
 80076f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80076f4:	f7fe febe 	bl	8006474 <__assert_func>
 80076f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076fc:	6004      	str	r4, [r0, #0]
 80076fe:	60c4      	str	r4, [r0, #12]
 8007700:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007704:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007708:	b94c      	cbnz	r4, 800771e <__pow5mult+0x66>
 800770a:	f240 2171 	movw	r1, #625	@ 0x271
 800770e:	4638      	mov	r0, r7
 8007710:	f7ff ff1a 	bl	8007548 <__i2b>
 8007714:	2300      	movs	r3, #0
 8007716:	f8c8 0008 	str.w	r0, [r8, #8]
 800771a:	4604      	mov	r4, r0
 800771c:	6003      	str	r3, [r0, #0]
 800771e:	f04f 0900 	mov.w	r9, #0
 8007722:	07eb      	lsls	r3, r5, #31
 8007724:	d50a      	bpl.n	800773c <__pow5mult+0x84>
 8007726:	4631      	mov	r1, r6
 8007728:	4622      	mov	r2, r4
 800772a:	4638      	mov	r0, r7
 800772c:	f7ff ff22 	bl	8007574 <__multiply>
 8007730:	4631      	mov	r1, r6
 8007732:	4680      	mov	r8, r0
 8007734:	4638      	mov	r0, r7
 8007736:	f7ff fe53 	bl	80073e0 <_Bfree>
 800773a:	4646      	mov	r6, r8
 800773c:	106d      	asrs	r5, r5, #1
 800773e:	d00b      	beq.n	8007758 <__pow5mult+0xa0>
 8007740:	6820      	ldr	r0, [r4, #0]
 8007742:	b938      	cbnz	r0, 8007754 <__pow5mult+0x9c>
 8007744:	4622      	mov	r2, r4
 8007746:	4621      	mov	r1, r4
 8007748:	4638      	mov	r0, r7
 800774a:	f7ff ff13 	bl	8007574 <__multiply>
 800774e:	6020      	str	r0, [r4, #0]
 8007750:	f8c0 9000 	str.w	r9, [r0]
 8007754:	4604      	mov	r4, r0
 8007756:	e7e4      	b.n	8007722 <__pow5mult+0x6a>
 8007758:	4630      	mov	r0, r6
 800775a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800775e:	bf00      	nop
 8007760:	080089f4 	.word	0x080089f4
 8007764:	080088fd 	.word	0x080088fd
 8007768:	0800897d 	.word	0x0800897d

0800776c <__lshift>:
 800776c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007770:	460c      	mov	r4, r1
 8007772:	6849      	ldr	r1, [r1, #4]
 8007774:	6923      	ldr	r3, [r4, #16]
 8007776:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800777a:	68a3      	ldr	r3, [r4, #8]
 800777c:	4607      	mov	r7, r0
 800777e:	4691      	mov	r9, r2
 8007780:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007784:	f108 0601 	add.w	r6, r8, #1
 8007788:	42b3      	cmp	r3, r6
 800778a:	db0b      	blt.n	80077a4 <__lshift+0x38>
 800778c:	4638      	mov	r0, r7
 800778e:	f7ff fde7 	bl	8007360 <_Balloc>
 8007792:	4605      	mov	r5, r0
 8007794:	b948      	cbnz	r0, 80077aa <__lshift+0x3e>
 8007796:	4602      	mov	r2, r0
 8007798:	4b28      	ldr	r3, [pc, #160]	@ (800783c <__lshift+0xd0>)
 800779a:	4829      	ldr	r0, [pc, #164]	@ (8007840 <__lshift+0xd4>)
 800779c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80077a0:	f7fe fe68 	bl	8006474 <__assert_func>
 80077a4:	3101      	adds	r1, #1
 80077a6:	005b      	lsls	r3, r3, #1
 80077a8:	e7ee      	b.n	8007788 <__lshift+0x1c>
 80077aa:	2300      	movs	r3, #0
 80077ac:	f100 0114 	add.w	r1, r0, #20
 80077b0:	f100 0210 	add.w	r2, r0, #16
 80077b4:	4618      	mov	r0, r3
 80077b6:	4553      	cmp	r3, sl
 80077b8:	db33      	blt.n	8007822 <__lshift+0xb6>
 80077ba:	6920      	ldr	r0, [r4, #16]
 80077bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077c0:	f104 0314 	add.w	r3, r4, #20
 80077c4:	f019 091f 	ands.w	r9, r9, #31
 80077c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80077d0:	d02b      	beq.n	800782a <__lshift+0xbe>
 80077d2:	f1c9 0e20 	rsb	lr, r9, #32
 80077d6:	468a      	mov	sl, r1
 80077d8:	2200      	movs	r2, #0
 80077da:	6818      	ldr	r0, [r3, #0]
 80077dc:	fa00 f009 	lsl.w	r0, r0, r9
 80077e0:	4310      	orrs	r0, r2
 80077e2:	f84a 0b04 	str.w	r0, [sl], #4
 80077e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ea:	459c      	cmp	ip, r3
 80077ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80077f0:	d8f3      	bhi.n	80077da <__lshift+0x6e>
 80077f2:	ebac 0304 	sub.w	r3, ip, r4
 80077f6:	3b15      	subs	r3, #21
 80077f8:	f023 0303 	bic.w	r3, r3, #3
 80077fc:	3304      	adds	r3, #4
 80077fe:	f104 0015 	add.w	r0, r4, #21
 8007802:	4560      	cmp	r0, ip
 8007804:	bf88      	it	hi
 8007806:	2304      	movhi	r3, #4
 8007808:	50ca      	str	r2, [r1, r3]
 800780a:	b10a      	cbz	r2, 8007810 <__lshift+0xa4>
 800780c:	f108 0602 	add.w	r6, r8, #2
 8007810:	3e01      	subs	r6, #1
 8007812:	4638      	mov	r0, r7
 8007814:	612e      	str	r6, [r5, #16]
 8007816:	4621      	mov	r1, r4
 8007818:	f7ff fde2 	bl	80073e0 <_Bfree>
 800781c:	4628      	mov	r0, r5
 800781e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007822:	f842 0f04 	str.w	r0, [r2, #4]!
 8007826:	3301      	adds	r3, #1
 8007828:	e7c5      	b.n	80077b6 <__lshift+0x4a>
 800782a:	3904      	subs	r1, #4
 800782c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007830:	f841 2f04 	str.w	r2, [r1, #4]!
 8007834:	459c      	cmp	ip, r3
 8007836:	d8f9      	bhi.n	800782c <__lshift+0xc0>
 8007838:	e7ea      	b.n	8007810 <__lshift+0xa4>
 800783a:	bf00      	nop
 800783c:	0800896c 	.word	0x0800896c
 8007840:	0800897d 	.word	0x0800897d

08007844 <__mcmp>:
 8007844:	690a      	ldr	r2, [r1, #16]
 8007846:	4603      	mov	r3, r0
 8007848:	6900      	ldr	r0, [r0, #16]
 800784a:	1a80      	subs	r0, r0, r2
 800784c:	b530      	push	{r4, r5, lr}
 800784e:	d10e      	bne.n	800786e <__mcmp+0x2a>
 8007850:	3314      	adds	r3, #20
 8007852:	3114      	adds	r1, #20
 8007854:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007858:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800785c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007860:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007864:	4295      	cmp	r5, r2
 8007866:	d003      	beq.n	8007870 <__mcmp+0x2c>
 8007868:	d205      	bcs.n	8007876 <__mcmp+0x32>
 800786a:	f04f 30ff 	mov.w	r0, #4294967295
 800786e:	bd30      	pop	{r4, r5, pc}
 8007870:	42a3      	cmp	r3, r4
 8007872:	d3f3      	bcc.n	800785c <__mcmp+0x18>
 8007874:	e7fb      	b.n	800786e <__mcmp+0x2a>
 8007876:	2001      	movs	r0, #1
 8007878:	e7f9      	b.n	800786e <__mcmp+0x2a>
	...

0800787c <__mdiff>:
 800787c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007880:	4689      	mov	r9, r1
 8007882:	4606      	mov	r6, r0
 8007884:	4611      	mov	r1, r2
 8007886:	4648      	mov	r0, r9
 8007888:	4614      	mov	r4, r2
 800788a:	f7ff ffdb 	bl	8007844 <__mcmp>
 800788e:	1e05      	subs	r5, r0, #0
 8007890:	d112      	bne.n	80078b8 <__mdiff+0x3c>
 8007892:	4629      	mov	r1, r5
 8007894:	4630      	mov	r0, r6
 8007896:	f7ff fd63 	bl	8007360 <_Balloc>
 800789a:	4602      	mov	r2, r0
 800789c:	b928      	cbnz	r0, 80078aa <__mdiff+0x2e>
 800789e:	4b3f      	ldr	r3, [pc, #252]	@ (800799c <__mdiff+0x120>)
 80078a0:	f240 2137 	movw	r1, #567	@ 0x237
 80078a4:	483e      	ldr	r0, [pc, #248]	@ (80079a0 <__mdiff+0x124>)
 80078a6:	f7fe fde5 	bl	8006474 <__assert_func>
 80078aa:	2301      	movs	r3, #1
 80078ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078b0:	4610      	mov	r0, r2
 80078b2:	b003      	add	sp, #12
 80078b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b8:	bfbc      	itt	lt
 80078ba:	464b      	movlt	r3, r9
 80078bc:	46a1      	movlt	r9, r4
 80078be:	4630      	mov	r0, r6
 80078c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80078c4:	bfba      	itte	lt
 80078c6:	461c      	movlt	r4, r3
 80078c8:	2501      	movlt	r5, #1
 80078ca:	2500      	movge	r5, #0
 80078cc:	f7ff fd48 	bl	8007360 <_Balloc>
 80078d0:	4602      	mov	r2, r0
 80078d2:	b918      	cbnz	r0, 80078dc <__mdiff+0x60>
 80078d4:	4b31      	ldr	r3, [pc, #196]	@ (800799c <__mdiff+0x120>)
 80078d6:	f240 2145 	movw	r1, #581	@ 0x245
 80078da:	e7e3      	b.n	80078a4 <__mdiff+0x28>
 80078dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80078e0:	6926      	ldr	r6, [r4, #16]
 80078e2:	60c5      	str	r5, [r0, #12]
 80078e4:	f109 0310 	add.w	r3, r9, #16
 80078e8:	f109 0514 	add.w	r5, r9, #20
 80078ec:	f104 0e14 	add.w	lr, r4, #20
 80078f0:	f100 0b14 	add.w	fp, r0, #20
 80078f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80078f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80078fc:	9301      	str	r3, [sp, #4]
 80078fe:	46d9      	mov	r9, fp
 8007900:	f04f 0c00 	mov.w	ip, #0
 8007904:	9b01      	ldr	r3, [sp, #4]
 8007906:	f85e 0b04 	ldr.w	r0, [lr], #4
 800790a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800790e:	9301      	str	r3, [sp, #4]
 8007910:	fa1f f38a 	uxth.w	r3, sl
 8007914:	4619      	mov	r1, r3
 8007916:	b283      	uxth	r3, r0
 8007918:	1acb      	subs	r3, r1, r3
 800791a:	0c00      	lsrs	r0, r0, #16
 800791c:	4463      	add	r3, ip
 800791e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007922:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007926:	b29b      	uxth	r3, r3
 8007928:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800792c:	4576      	cmp	r6, lr
 800792e:	f849 3b04 	str.w	r3, [r9], #4
 8007932:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007936:	d8e5      	bhi.n	8007904 <__mdiff+0x88>
 8007938:	1b33      	subs	r3, r6, r4
 800793a:	3b15      	subs	r3, #21
 800793c:	f023 0303 	bic.w	r3, r3, #3
 8007940:	3415      	adds	r4, #21
 8007942:	3304      	adds	r3, #4
 8007944:	42a6      	cmp	r6, r4
 8007946:	bf38      	it	cc
 8007948:	2304      	movcc	r3, #4
 800794a:	441d      	add	r5, r3
 800794c:	445b      	add	r3, fp
 800794e:	461e      	mov	r6, r3
 8007950:	462c      	mov	r4, r5
 8007952:	4544      	cmp	r4, r8
 8007954:	d30e      	bcc.n	8007974 <__mdiff+0xf8>
 8007956:	f108 0103 	add.w	r1, r8, #3
 800795a:	1b49      	subs	r1, r1, r5
 800795c:	f021 0103 	bic.w	r1, r1, #3
 8007960:	3d03      	subs	r5, #3
 8007962:	45a8      	cmp	r8, r5
 8007964:	bf38      	it	cc
 8007966:	2100      	movcc	r1, #0
 8007968:	440b      	add	r3, r1
 800796a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800796e:	b191      	cbz	r1, 8007996 <__mdiff+0x11a>
 8007970:	6117      	str	r7, [r2, #16]
 8007972:	e79d      	b.n	80078b0 <__mdiff+0x34>
 8007974:	f854 1b04 	ldr.w	r1, [r4], #4
 8007978:	46e6      	mov	lr, ip
 800797a:	0c08      	lsrs	r0, r1, #16
 800797c:	fa1c fc81 	uxtah	ip, ip, r1
 8007980:	4471      	add	r1, lr
 8007982:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007986:	b289      	uxth	r1, r1
 8007988:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800798c:	f846 1b04 	str.w	r1, [r6], #4
 8007990:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007994:	e7dd      	b.n	8007952 <__mdiff+0xd6>
 8007996:	3f01      	subs	r7, #1
 8007998:	e7e7      	b.n	800796a <__mdiff+0xee>
 800799a:	bf00      	nop
 800799c:	0800896c 	.word	0x0800896c
 80079a0:	0800897d 	.word	0x0800897d

080079a4 <__d2b>:
 80079a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079a8:	460f      	mov	r7, r1
 80079aa:	2101      	movs	r1, #1
 80079ac:	ec59 8b10 	vmov	r8, r9, d0
 80079b0:	4616      	mov	r6, r2
 80079b2:	f7ff fcd5 	bl	8007360 <_Balloc>
 80079b6:	4604      	mov	r4, r0
 80079b8:	b930      	cbnz	r0, 80079c8 <__d2b+0x24>
 80079ba:	4602      	mov	r2, r0
 80079bc:	4b23      	ldr	r3, [pc, #140]	@ (8007a4c <__d2b+0xa8>)
 80079be:	4824      	ldr	r0, [pc, #144]	@ (8007a50 <__d2b+0xac>)
 80079c0:	f240 310f 	movw	r1, #783	@ 0x30f
 80079c4:	f7fe fd56 	bl	8006474 <__assert_func>
 80079c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80079cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079d0:	b10d      	cbz	r5, 80079d6 <__d2b+0x32>
 80079d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079d6:	9301      	str	r3, [sp, #4]
 80079d8:	f1b8 0300 	subs.w	r3, r8, #0
 80079dc:	d023      	beq.n	8007a26 <__d2b+0x82>
 80079de:	4668      	mov	r0, sp
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	f7ff fd84 	bl	80074ee <__lo0bits>
 80079e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80079ea:	b1d0      	cbz	r0, 8007a22 <__d2b+0x7e>
 80079ec:	f1c0 0320 	rsb	r3, r0, #32
 80079f0:	fa02 f303 	lsl.w	r3, r2, r3
 80079f4:	430b      	orrs	r3, r1
 80079f6:	40c2      	lsrs	r2, r0
 80079f8:	6163      	str	r3, [r4, #20]
 80079fa:	9201      	str	r2, [sp, #4]
 80079fc:	9b01      	ldr	r3, [sp, #4]
 80079fe:	61a3      	str	r3, [r4, #24]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	bf0c      	ite	eq
 8007a04:	2201      	moveq	r2, #1
 8007a06:	2202      	movne	r2, #2
 8007a08:	6122      	str	r2, [r4, #16]
 8007a0a:	b1a5      	cbz	r5, 8007a36 <__d2b+0x92>
 8007a0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007a10:	4405      	add	r5, r0
 8007a12:	603d      	str	r5, [r7, #0]
 8007a14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007a18:	6030      	str	r0, [r6, #0]
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	b003      	add	sp, #12
 8007a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a22:	6161      	str	r1, [r4, #20]
 8007a24:	e7ea      	b.n	80079fc <__d2b+0x58>
 8007a26:	a801      	add	r0, sp, #4
 8007a28:	f7ff fd61 	bl	80074ee <__lo0bits>
 8007a2c:	9b01      	ldr	r3, [sp, #4]
 8007a2e:	6163      	str	r3, [r4, #20]
 8007a30:	3020      	adds	r0, #32
 8007a32:	2201      	movs	r2, #1
 8007a34:	e7e8      	b.n	8007a08 <__d2b+0x64>
 8007a36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007a3e:	6038      	str	r0, [r7, #0]
 8007a40:	6918      	ldr	r0, [r3, #16]
 8007a42:	f7ff fd35 	bl	80074b0 <__hi0bits>
 8007a46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a4a:	e7e5      	b.n	8007a18 <__d2b+0x74>
 8007a4c:	0800896c 	.word	0x0800896c
 8007a50:	0800897d 	.word	0x0800897d

08007a54 <__ssputs_r>:
 8007a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a58:	688e      	ldr	r6, [r1, #8]
 8007a5a:	461f      	mov	r7, r3
 8007a5c:	42be      	cmp	r6, r7
 8007a5e:	680b      	ldr	r3, [r1, #0]
 8007a60:	4682      	mov	sl, r0
 8007a62:	460c      	mov	r4, r1
 8007a64:	4690      	mov	r8, r2
 8007a66:	d82d      	bhi.n	8007ac4 <__ssputs_r+0x70>
 8007a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a70:	d026      	beq.n	8007ac0 <__ssputs_r+0x6c>
 8007a72:	6965      	ldr	r5, [r4, #20]
 8007a74:	6909      	ldr	r1, [r1, #16]
 8007a76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a7a:	eba3 0901 	sub.w	r9, r3, r1
 8007a7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a82:	1c7b      	adds	r3, r7, #1
 8007a84:	444b      	add	r3, r9
 8007a86:	106d      	asrs	r5, r5, #1
 8007a88:	429d      	cmp	r5, r3
 8007a8a:	bf38      	it	cc
 8007a8c:	461d      	movcc	r5, r3
 8007a8e:	0553      	lsls	r3, r2, #21
 8007a90:	d527      	bpl.n	8007ae2 <__ssputs_r+0x8e>
 8007a92:	4629      	mov	r1, r5
 8007a94:	f7ff fbd8 	bl	8007248 <_malloc_r>
 8007a98:	4606      	mov	r6, r0
 8007a9a:	b360      	cbz	r0, 8007af6 <__ssputs_r+0xa2>
 8007a9c:	6921      	ldr	r1, [r4, #16]
 8007a9e:	464a      	mov	r2, r9
 8007aa0:	f7fe fcd9 	bl	8006456 <memcpy>
 8007aa4:	89a3      	ldrh	r3, [r4, #12]
 8007aa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aae:	81a3      	strh	r3, [r4, #12]
 8007ab0:	6126      	str	r6, [r4, #16]
 8007ab2:	6165      	str	r5, [r4, #20]
 8007ab4:	444e      	add	r6, r9
 8007ab6:	eba5 0509 	sub.w	r5, r5, r9
 8007aba:	6026      	str	r6, [r4, #0]
 8007abc:	60a5      	str	r5, [r4, #8]
 8007abe:	463e      	mov	r6, r7
 8007ac0:	42be      	cmp	r6, r7
 8007ac2:	d900      	bls.n	8007ac6 <__ssputs_r+0x72>
 8007ac4:	463e      	mov	r6, r7
 8007ac6:	6820      	ldr	r0, [r4, #0]
 8007ac8:	4632      	mov	r2, r6
 8007aca:	4641      	mov	r1, r8
 8007acc:	f000 fb7c 	bl	80081c8 <memmove>
 8007ad0:	68a3      	ldr	r3, [r4, #8]
 8007ad2:	1b9b      	subs	r3, r3, r6
 8007ad4:	60a3      	str	r3, [r4, #8]
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	4433      	add	r3, r6
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	2000      	movs	r0, #0
 8007ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae2:	462a      	mov	r2, r5
 8007ae4:	f000 fbe9 	bl	80082ba <_realloc_r>
 8007ae8:	4606      	mov	r6, r0
 8007aea:	2800      	cmp	r0, #0
 8007aec:	d1e0      	bne.n	8007ab0 <__ssputs_r+0x5c>
 8007aee:	6921      	ldr	r1, [r4, #16]
 8007af0:	4650      	mov	r0, sl
 8007af2:	f7ff fb35 	bl	8007160 <_free_r>
 8007af6:	230c      	movs	r3, #12
 8007af8:	f8ca 3000 	str.w	r3, [sl]
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b02:	81a3      	strh	r3, [r4, #12]
 8007b04:	f04f 30ff 	mov.w	r0, #4294967295
 8007b08:	e7e9      	b.n	8007ade <__ssputs_r+0x8a>
	...

08007b0c <_svfiprintf_r>:
 8007b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b10:	4698      	mov	r8, r3
 8007b12:	898b      	ldrh	r3, [r1, #12]
 8007b14:	061b      	lsls	r3, r3, #24
 8007b16:	b09d      	sub	sp, #116	@ 0x74
 8007b18:	4607      	mov	r7, r0
 8007b1a:	460d      	mov	r5, r1
 8007b1c:	4614      	mov	r4, r2
 8007b1e:	d510      	bpl.n	8007b42 <_svfiprintf_r+0x36>
 8007b20:	690b      	ldr	r3, [r1, #16]
 8007b22:	b973      	cbnz	r3, 8007b42 <_svfiprintf_r+0x36>
 8007b24:	2140      	movs	r1, #64	@ 0x40
 8007b26:	f7ff fb8f 	bl	8007248 <_malloc_r>
 8007b2a:	6028      	str	r0, [r5, #0]
 8007b2c:	6128      	str	r0, [r5, #16]
 8007b2e:	b930      	cbnz	r0, 8007b3e <_svfiprintf_r+0x32>
 8007b30:	230c      	movs	r3, #12
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	f04f 30ff 	mov.w	r0, #4294967295
 8007b38:	b01d      	add	sp, #116	@ 0x74
 8007b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3e:	2340      	movs	r3, #64	@ 0x40
 8007b40:	616b      	str	r3, [r5, #20]
 8007b42:	2300      	movs	r3, #0
 8007b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b46:	2320      	movs	r3, #32
 8007b48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b50:	2330      	movs	r3, #48	@ 0x30
 8007b52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007cf0 <_svfiprintf_r+0x1e4>
 8007b56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b5a:	f04f 0901 	mov.w	r9, #1
 8007b5e:	4623      	mov	r3, r4
 8007b60:	469a      	mov	sl, r3
 8007b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b66:	b10a      	cbz	r2, 8007b6c <_svfiprintf_r+0x60>
 8007b68:	2a25      	cmp	r2, #37	@ 0x25
 8007b6a:	d1f9      	bne.n	8007b60 <_svfiprintf_r+0x54>
 8007b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b70:	d00b      	beq.n	8007b8a <_svfiprintf_r+0x7e>
 8007b72:	465b      	mov	r3, fp
 8007b74:	4622      	mov	r2, r4
 8007b76:	4629      	mov	r1, r5
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f7ff ff6b 	bl	8007a54 <__ssputs_r>
 8007b7e:	3001      	adds	r0, #1
 8007b80:	f000 80a7 	beq.w	8007cd2 <_svfiprintf_r+0x1c6>
 8007b84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b86:	445a      	add	r2, fp
 8007b88:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 809f 	beq.w	8007cd2 <_svfiprintf_r+0x1c6>
 8007b94:	2300      	movs	r3, #0
 8007b96:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b9e:	f10a 0a01 	add.w	sl, sl, #1
 8007ba2:	9304      	str	r3, [sp, #16]
 8007ba4:	9307      	str	r3, [sp, #28]
 8007ba6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007baa:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bac:	4654      	mov	r4, sl
 8007bae:	2205      	movs	r2, #5
 8007bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb4:	484e      	ldr	r0, [pc, #312]	@ (8007cf0 <_svfiprintf_r+0x1e4>)
 8007bb6:	f7f8 fb23 	bl	8000200 <memchr>
 8007bba:	9a04      	ldr	r2, [sp, #16]
 8007bbc:	b9d8      	cbnz	r0, 8007bf6 <_svfiprintf_r+0xea>
 8007bbe:	06d0      	lsls	r0, r2, #27
 8007bc0:	bf44      	itt	mi
 8007bc2:	2320      	movmi	r3, #32
 8007bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bc8:	0711      	lsls	r1, r2, #28
 8007bca:	bf44      	itt	mi
 8007bcc:	232b      	movmi	r3, #43	@ 0x2b
 8007bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bd8:	d015      	beq.n	8007c06 <_svfiprintf_r+0xfa>
 8007bda:	9a07      	ldr	r2, [sp, #28]
 8007bdc:	4654      	mov	r4, sl
 8007bde:	2000      	movs	r0, #0
 8007be0:	f04f 0c0a 	mov.w	ip, #10
 8007be4:	4621      	mov	r1, r4
 8007be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bea:	3b30      	subs	r3, #48	@ 0x30
 8007bec:	2b09      	cmp	r3, #9
 8007bee:	d94b      	bls.n	8007c88 <_svfiprintf_r+0x17c>
 8007bf0:	b1b0      	cbz	r0, 8007c20 <_svfiprintf_r+0x114>
 8007bf2:	9207      	str	r2, [sp, #28]
 8007bf4:	e014      	b.n	8007c20 <_svfiprintf_r+0x114>
 8007bf6:	eba0 0308 	sub.w	r3, r0, r8
 8007bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	9304      	str	r3, [sp, #16]
 8007c02:	46a2      	mov	sl, r4
 8007c04:	e7d2      	b.n	8007bac <_svfiprintf_r+0xa0>
 8007c06:	9b03      	ldr	r3, [sp, #12]
 8007c08:	1d19      	adds	r1, r3, #4
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	9103      	str	r1, [sp, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bfbb      	ittet	lt
 8007c12:	425b      	neglt	r3, r3
 8007c14:	f042 0202 	orrlt.w	r2, r2, #2
 8007c18:	9307      	strge	r3, [sp, #28]
 8007c1a:	9307      	strlt	r3, [sp, #28]
 8007c1c:	bfb8      	it	lt
 8007c1e:	9204      	strlt	r2, [sp, #16]
 8007c20:	7823      	ldrb	r3, [r4, #0]
 8007c22:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c24:	d10a      	bne.n	8007c3c <_svfiprintf_r+0x130>
 8007c26:	7863      	ldrb	r3, [r4, #1]
 8007c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c2a:	d132      	bne.n	8007c92 <_svfiprintf_r+0x186>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	1d1a      	adds	r2, r3, #4
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	9203      	str	r2, [sp, #12]
 8007c34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c38:	3402      	adds	r4, #2
 8007c3a:	9305      	str	r3, [sp, #20]
 8007c3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d00 <_svfiprintf_r+0x1f4>
 8007c40:	7821      	ldrb	r1, [r4, #0]
 8007c42:	2203      	movs	r2, #3
 8007c44:	4650      	mov	r0, sl
 8007c46:	f7f8 fadb 	bl	8000200 <memchr>
 8007c4a:	b138      	cbz	r0, 8007c5c <_svfiprintf_r+0x150>
 8007c4c:	9b04      	ldr	r3, [sp, #16]
 8007c4e:	eba0 000a 	sub.w	r0, r0, sl
 8007c52:	2240      	movs	r2, #64	@ 0x40
 8007c54:	4082      	lsls	r2, r0
 8007c56:	4313      	orrs	r3, r2
 8007c58:	3401      	adds	r4, #1
 8007c5a:	9304      	str	r3, [sp, #16]
 8007c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c60:	4824      	ldr	r0, [pc, #144]	@ (8007cf4 <_svfiprintf_r+0x1e8>)
 8007c62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c66:	2206      	movs	r2, #6
 8007c68:	f7f8 faca 	bl	8000200 <memchr>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d036      	beq.n	8007cde <_svfiprintf_r+0x1d2>
 8007c70:	4b21      	ldr	r3, [pc, #132]	@ (8007cf8 <_svfiprintf_r+0x1ec>)
 8007c72:	bb1b      	cbnz	r3, 8007cbc <_svfiprintf_r+0x1b0>
 8007c74:	9b03      	ldr	r3, [sp, #12]
 8007c76:	3307      	adds	r3, #7
 8007c78:	f023 0307 	bic.w	r3, r3, #7
 8007c7c:	3308      	adds	r3, #8
 8007c7e:	9303      	str	r3, [sp, #12]
 8007c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c82:	4433      	add	r3, r6
 8007c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c86:	e76a      	b.n	8007b5e <_svfiprintf_r+0x52>
 8007c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	2001      	movs	r0, #1
 8007c90:	e7a8      	b.n	8007be4 <_svfiprintf_r+0xd8>
 8007c92:	2300      	movs	r3, #0
 8007c94:	3401      	adds	r4, #1
 8007c96:	9305      	str	r3, [sp, #20]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	f04f 0c0a 	mov.w	ip, #10
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ca4:	3a30      	subs	r2, #48	@ 0x30
 8007ca6:	2a09      	cmp	r2, #9
 8007ca8:	d903      	bls.n	8007cb2 <_svfiprintf_r+0x1a6>
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0c6      	beq.n	8007c3c <_svfiprintf_r+0x130>
 8007cae:	9105      	str	r1, [sp, #20]
 8007cb0:	e7c4      	b.n	8007c3c <_svfiprintf_r+0x130>
 8007cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e7f0      	b.n	8007c9e <_svfiprintf_r+0x192>
 8007cbc:	ab03      	add	r3, sp, #12
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	462a      	mov	r2, r5
 8007cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8007cfc <_svfiprintf_r+0x1f0>)
 8007cc4:	a904      	add	r1, sp, #16
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	f7fd fdd4 	bl	8005874 <_printf_float>
 8007ccc:	1c42      	adds	r2, r0, #1
 8007cce:	4606      	mov	r6, r0
 8007cd0:	d1d6      	bne.n	8007c80 <_svfiprintf_r+0x174>
 8007cd2:	89ab      	ldrh	r3, [r5, #12]
 8007cd4:	065b      	lsls	r3, r3, #25
 8007cd6:	f53f af2d 	bmi.w	8007b34 <_svfiprintf_r+0x28>
 8007cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cdc:	e72c      	b.n	8007b38 <_svfiprintf_r+0x2c>
 8007cde:	ab03      	add	r3, sp, #12
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	462a      	mov	r2, r5
 8007ce4:	4b05      	ldr	r3, [pc, #20]	@ (8007cfc <_svfiprintf_r+0x1f0>)
 8007ce6:	a904      	add	r1, sp, #16
 8007ce8:	4638      	mov	r0, r7
 8007cea:	f7fe f85b 	bl	8005da4 <_printf_i>
 8007cee:	e7ed      	b.n	8007ccc <_svfiprintf_r+0x1c0>
 8007cf0:	080089d6 	.word	0x080089d6
 8007cf4:	080089e0 	.word	0x080089e0
 8007cf8:	08005875 	.word	0x08005875
 8007cfc:	08007a55 	.word	0x08007a55
 8007d00:	080089dc 	.word	0x080089dc

08007d04 <__sfputc_r>:
 8007d04:	6893      	ldr	r3, [r2, #8]
 8007d06:	3b01      	subs	r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	b410      	push	{r4}
 8007d0c:	6093      	str	r3, [r2, #8]
 8007d0e:	da08      	bge.n	8007d22 <__sfputc_r+0x1e>
 8007d10:	6994      	ldr	r4, [r2, #24]
 8007d12:	42a3      	cmp	r3, r4
 8007d14:	db01      	blt.n	8007d1a <__sfputc_r+0x16>
 8007d16:	290a      	cmp	r1, #10
 8007d18:	d103      	bne.n	8007d22 <__sfputc_r+0x1e>
 8007d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d1e:	f7fe ba86 	b.w	800622e <__swbuf_r>
 8007d22:	6813      	ldr	r3, [r2, #0]
 8007d24:	1c58      	adds	r0, r3, #1
 8007d26:	6010      	str	r0, [r2, #0]
 8007d28:	7019      	strb	r1, [r3, #0]
 8007d2a:	4608      	mov	r0, r1
 8007d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <__sfputs_r>:
 8007d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d34:	4606      	mov	r6, r0
 8007d36:	460f      	mov	r7, r1
 8007d38:	4614      	mov	r4, r2
 8007d3a:	18d5      	adds	r5, r2, r3
 8007d3c:	42ac      	cmp	r4, r5
 8007d3e:	d101      	bne.n	8007d44 <__sfputs_r+0x12>
 8007d40:	2000      	movs	r0, #0
 8007d42:	e007      	b.n	8007d54 <__sfputs_r+0x22>
 8007d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d48:	463a      	mov	r2, r7
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	f7ff ffda 	bl	8007d04 <__sfputc_r>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	d1f3      	bne.n	8007d3c <__sfputs_r+0xa>
 8007d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d58 <_vfiprintf_r>:
 8007d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5c:	460d      	mov	r5, r1
 8007d5e:	b09d      	sub	sp, #116	@ 0x74
 8007d60:	4614      	mov	r4, r2
 8007d62:	4698      	mov	r8, r3
 8007d64:	4606      	mov	r6, r0
 8007d66:	b118      	cbz	r0, 8007d70 <_vfiprintf_r+0x18>
 8007d68:	6a03      	ldr	r3, [r0, #32]
 8007d6a:	b90b      	cbnz	r3, 8007d70 <_vfiprintf_r+0x18>
 8007d6c:	f7fe f9c4 	bl	80060f8 <__sinit>
 8007d70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d72:	07d9      	lsls	r1, r3, #31
 8007d74:	d405      	bmi.n	8007d82 <_vfiprintf_r+0x2a>
 8007d76:	89ab      	ldrh	r3, [r5, #12]
 8007d78:	059a      	lsls	r2, r3, #22
 8007d7a:	d402      	bmi.n	8007d82 <_vfiprintf_r+0x2a>
 8007d7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d7e:	f7fe fb68 	bl	8006452 <__retarget_lock_acquire_recursive>
 8007d82:	89ab      	ldrh	r3, [r5, #12]
 8007d84:	071b      	lsls	r3, r3, #28
 8007d86:	d501      	bpl.n	8007d8c <_vfiprintf_r+0x34>
 8007d88:	692b      	ldr	r3, [r5, #16]
 8007d8a:	b99b      	cbnz	r3, 8007db4 <_vfiprintf_r+0x5c>
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	4630      	mov	r0, r6
 8007d90:	f7fe fa8c 	bl	80062ac <__swsetup_r>
 8007d94:	b170      	cbz	r0, 8007db4 <_vfiprintf_r+0x5c>
 8007d96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d98:	07dc      	lsls	r4, r3, #31
 8007d9a:	d504      	bpl.n	8007da6 <_vfiprintf_r+0x4e>
 8007d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007da0:	b01d      	add	sp, #116	@ 0x74
 8007da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da6:	89ab      	ldrh	r3, [r5, #12]
 8007da8:	0598      	lsls	r0, r3, #22
 8007daa:	d4f7      	bmi.n	8007d9c <_vfiprintf_r+0x44>
 8007dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dae:	f7fe fb51 	bl	8006454 <__retarget_lock_release_recursive>
 8007db2:	e7f3      	b.n	8007d9c <_vfiprintf_r+0x44>
 8007db4:	2300      	movs	r3, #0
 8007db6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007db8:	2320      	movs	r3, #32
 8007dba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007dbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dc2:	2330      	movs	r3, #48	@ 0x30
 8007dc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007f74 <_vfiprintf_r+0x21c>
 8007dc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dcc:	f04f 0901 	mov.w	r9, #1
 8007dd0:	4623      	mov	r3, r4
 8007dd2:	469a      	mov	sl, r3
 8007dd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dd8:	b10a      	cbz	r2, 8007dde <_vfiprintf_r+0x86>
 8007dda:	2a25      	cmp	r2, #37	@ 0x25
 8007ddc:	d1f9      	bne.n	8007dd2 <_vfiprintf_r+0x7a>
 8007dde:	ebba 0b04 	subs.w	fp, sl, r4
 8007de2:	d00b      	beq.n	8007dfc <_vfiprintf_r+0xa4>
 8007de4:	465b      	mov	r3, fp
 8007de6:	4622      	mov	r2, r4
 8007de8:	4629      	mov	r1, r5
 8007dea:	4630      	mov	r0, r6
 8007dec:	f7ff ffa1 	bl	8007d32 <__sfputs_r>
 8007df0:	3001      	adds	r0, #1
 8007df2:	f000 80a7 	beq.w	8007f44 <_vfiprintf_r+0x1ec>
 8007df6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007df8:	445a      	add	r2, fp
 8007dfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 809f 	beq.w	8007f44 <_vfiprintf_r+0x1ec>
 8007e06:	2300      	movs	r3, #0
 8007e08:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e10:	f10a 0a01 	add.w	sl, sl, #1
 8007e14:	9304      	str	r3, [sp, #16]
 8007e16:	9307      	str	r3, [sp, #28]
 8007e18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e1e:	4654      	mov	r4, sl
 8007e20:	2205      	movs	r2, #5
 8007e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e26:	4853      	ldr	r0, [pc, #332]	@ (8007f74 <_vfiprintf_r+0x21c>)
 8007e28:	f7f8 f9ea 	bl	8000200 <memchr>
 8007e2c:	9a04      	ldr	r2, [sp, #16]
 8007e2e:	b9d8      	cbnz	r0, 8007e68 <_vfiprintf_r+0x110>
 8007e30:	06d1      	lsls	r1, r2, #27
 8007e32:	bf44      	itt	mi
 8007e34:	2320      	movmi	r3, #32
 8007e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e3a:	0713      	lsls	r3, r2, #28
 8007e3c:	bf44      	itt	mi
 8007e3e:	232b      	movmi	r3, #43	@ 0x2b
 8007e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e44:	f89a 3000 	ldrb.w	r3, [sl]
 8007e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e4a:	d015      	beq.n	8007e78 <_vfiprintf_r+0x120>
 8007e4c:	9a07      	ldr	r2, [sp, #28]
 8007e4e:	4654      	mov	r4, sl
 8007e50:	2000      	movs	r0, #0
 8007e52:	f04f 0c0a 	mov.w	ip, #10
 8007e56:	4621      	mov	r1, r4
 8007e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e5c:	3b30      	subs	r3, #48	@ 0x30
 8007e5e:	2b09      	cmp	r3, #9
 8007e60:	d94b      	bls.n	8007efa <_vfiprintf_r+0x1a2>
 8007e62:	b1b0      	cbz	r0, 8007e92 <_vfiprintf_r+0x13a>
 8007e64:	9207      	str	r2, [sp, #28]
 8007e66:	e014      	b.n	8007e92 <_vfiprintf_r+0x13a>
 8007e68:	eba0 0308 	sub.w	r3, r0, r8
 8007e6c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e70:	4313      	orrs	r3, r2
 8007e72:	9304      	str	r3, [sp, #16]
 8007e74:	46a2      	mov	sl, r4
 8007e76:	e7d2      	b.n	8007e1e <_vfiprintf_r+0xc6>
 8007e78:	9b03      	ldr	r3, [sp, #12]
 8007e7a:	1d19      	adds	r1, r3, #4
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	9103      	str	r1, [sp, #12]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	bfbb      	ittet	lt
 8007e84:	425b      	neglt	r3, r3
 8007e86:	f042 0202 	orrlt.w	r2, r2, #2
 8007e8a:	9307      	strge	r3, [sp, #28]
 8007e8c:	9307      	strlt	r3, [sp, #28]
 8007e8e:	bfb8      	it	lt
 8007e90:	9204      	strlt	r2, [sp, #16]
 8007e92:	7823      	ldrb	r3, [r4, #0]
 8007e94:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e96:	d10a      	bne.n	8007eae <_vfiprintf_r+0x156>
 8007e98:	7863      	ldrb	r3, [r4, #1]
 8007e9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e9c:	d132      	bne.n	8007f04 <_vfiprintf_r+0x1ac>
 8007e9e:	9b03      	ldr	r3, [sp, #12]
 8007ea0:	1d1a      	adds	r2, r3, #4
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	9203      	str	r2, [sp, #12]
 8007ea6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007eaa:	3402      	adds	r4, #2
 8007eac:	9305      	str	r3, [sp, #20]
 8007eae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007f84 <_vfiprintf_r+0x22c>
 8007eb2:	7821      	ldrb	r1, [r4, #0]
 8007eb4:	2203      	movs	r2, #3
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	f7f8 f9a2 	bl	8000200 <memchr>
 8007ebc:	b138      	cbz	r0, 8007ece <_vfiprintf_r+0x176>
 8007ebe:	9b04      	ldr	r3, [sp, #16]
 8007ec0:	eba0 000a 	sub.w	r0, r0, sl
 8007ec4:	2240      	movs	r2, #64	@ 0x40
 8007ec6:	4082      	lsls	r2, r0
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	3401      	adds	r4, #1
 8007ecc:	9304      	str	r3, [sp, #16]
 8007ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ed2:	4829      	ldr	r0, [pc, #164]	@ (8007f78 <_vfiprintf_r+0x220>)
 8007ed4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ed8:	2206      	movs	r2, #6
 8007eda:	f7f8 f991 	bl	8000200 <memchr>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	d03f      	beq.n	8007f62 <_vfiprintf_r+0x20a>
 8007ee2:	4b26      	ldr	r3, [pc, #152]	@ (8007f7c <_vfiprintf_r+0x224>)
 8007ee4:	bb1b      	cbnz	r3, 8007f2e <_vfiprintf_r+0x1d6>
 8007ee6:	9b03      	ldr	r3, [sp, #12]
 8007ee8:	3307      	adds	r3, #7
 8007eea:	f023 0307 	bic.w	r3, r3, #7
 8007eee:	3308      	adds	r3, #8
 8007ef0:	9303      	str	r3, [sp, #12]
 8007ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef4:	443b      	add	r3, r7
 8007ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ef8:	e76a      	b.n	8007dd0 <_vfiprintf_r+0x78>
 8007efa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007efe:	460c      	mov	r4, r1
 8007f00:	2001      	movs	r0, #1
 8007f02:	e7a8      	b.n	8007e56 <_vfiprintf_r+0xfe>
 8007f04:	2300      	movs	r3, #0
 8007f06:	3401      	adds	r4, #1
 8007f08:	9305      	str	r3, [sp, #20]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	f04f 0c0a 	mov.w	ip, #10
 8007f10:	4620      	mov	r0, r4
 8007f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f16:	3a30      	subs	r2, #48	@ 0x30
 8007f18:	2a09      	cmp	r2, #9
 8007f1a:	d903      	bls.n	8007f24 <_vfiprintf_r+0x1cc>
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d0c6      	beq.n	8007eae <_vfiprintf_r+0x156>
 8007f20:	9105      	str	r1, [sp, #20]
 8007f22:	e7c4      	b.n	8007eae <_vfiprintf_r+0x156>
 8007f24:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f28:	4604      	mov	r4, r0
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e7f0      	b.n	8007f10 <_vfiprintf_r+0x1b8>
 8007f2e:	ab03      	add	r3, sp, #12
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	462a      	mov	r2, r5
 8007f34:	4b12      	ldr	r3, [pc, #72]	@ (8007f80 <_vfiprintf_r+0x228>)
 8007f36:	a904      	add	r1, sp, #16
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f7fd fc9b 	bl	8005874 <_printf_float>
 8007f3e:	4607      	mov	r7, r0
 8007f40:	1c78      	adds	r0, r7, #1
 8007f42:	d1d6      	bne.n	8007ef2 <_vfiprintf_r+0x19a>
 8007f44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f46:	07d9      	lsls	r1, r3, #31
 8007f48:	d405      	bmi.n	8007f56 <_vfiprintf_r+0x1fe>
 8007f4a:	89ab      	ldrh	r3, [r5, #12]
 8007f4c:	059a      	lsls	r2, r3, #22
 8007f4e:	d402      	bmi.n	8007f56 <_vfiprintf_r+0x1fe>
 8007f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f52:	f7fe fa7f 	bl	8006454 <__retarget_lock_release_recursive>
 8007f56:	89ab      	ldrh	r3, [r5, #12]
 8007f58:	065b      	lsls	r3, r3, #25
 8007f5a:	f53f af1f 	bmi.w	8007d9c <_vfiprintf_r+0x44>
 8007f5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f60:	e71e      	b.n	8007da0 <_vfiprintf_r+0x48>
 8007f62:	ab03      	add	r3, sp, #12
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	462a      	mov	r2, r5
 8007f68:	4b05      	ldr	r3, [pc, #20]	@ (8007f80 <_vfiprintf_r+0x228>)
 8007f6a:	a904      	add	r1, sp, #16
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f7fd ff19 	bl	8005da4 <_printf_i>
 8007f72:	e7e4      	b.n	8007f3e <_vfiprintf_r+0x1e6>
 8007f74:	080089d6 	.word	0x080089d6
 8007f78:	080089e0 	.word	0x080089e0
 8007f7c:	08005875 	.word	0x08005875
 8007f80:	08007d33 	.word	0x08007d33
 8007f84:	080089dc 	.word	0x080089dc

08007f88 <__sflush_r>:
 8007f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f90:	0716      	lsls	r6, r2, #28
 8007f92:	4605      	mov	r5, r0
 8007f94:	460c      	mov	r4, r1
 8007f96:	d454      	bmi.n	8008042 <__sflush_r+0xba>
 8007f98:	684b      	ldr	r3, [r1, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	dc02      	bgt.n	8007fa4 <__sflush_r+0x1c>
 8007f9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	dd48      	ble.n	8008036 <__sflush_r+0xae>
 8007fa4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fa6:	2e00      	cmp	r6, #0
 8007fa8:	d045      	beq.n	8008036 <__sflush_r+0xae>
 8007faa:	2300      	movs	r3, #0
 8007fac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007fb0:	682f      	ldr	r7, [r5, #0]
 8007fb2:	6a21      	ldr	r1, [r4, #32]
 8007fb4:	602b      	str	r3, [r5, #0]
 8007fb6:	d030      	beq.n	800801a <__sflush_r+0x92>
 8007fb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	0759      	lsls	r1, r3, #29
 8007fbe:	d505      	bpl.n	8007fcc <__sflush_r+0x44>
 8007fc0:	6863      	ldr	r3, [r4, #4]
 8007fc2:	1ad2      	subs	r2, r2, r3
 8007fc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007fc6:	b10b      	cbz	r3, 8007fcc <__sflush_r+0x44>
 8007fc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fca:	1ad2      	subs	r2, r2, r3
 8007fcc:	2300      	movs	r3, #0
 8007fce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fd0:	6a21      	ldr	r1, [r4, #32]
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	47b0      	blx	r6
 8007fd6:	1c43      	adds	r3, r0, #1
 8007fd8:	89a3      	ldrh	r3, [r4, #12]
 8007fda:	d106      	bne.n	8007fea <__sflush_r+0x62>
 8007fdc:	6829      	ldr	r1, [r5, #0]
 8007fde:	291d      	cmp	r1, #29
 8007fe0:	d82b      	bhi.n	800803a <__sflush_r+0xb2>
 8007fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800808c <__sflush_r+0x104>)
 8007fe4:	40ca      	lsrs	r2, r1
 8007fe6:	07d6      	lsls	r6, r2, #31
 8007fe8:	d527      	bpl.n	800803a <__sflush_r+0xb2>
 8007fea:	2200      	movs	r2, #0
 8007fec:	6062      	str	r2, [r4, #4]
 8007fee:	04d9      	lsls	r1, r3, #19
 8007ff0:	6922      	ldr	r2, [r4, #16]
 8007ff2:	6022      	str	r2, [r4, #0]
 8007ff4:	d504      	bpl.n	8008000 <__sflush_r+0x78>
 8007ff6:	1c42      	adds	r2, r0, #1
 8007ff8:	d101      	bne.n	8007ffe <__sflush_r+0x76>
 8007ffa:	682b      	ldr	r3, [r5, #0]
 8007ffc:	b903      	cbnz	r3, 8008000 <__sflush_r+0x78>
 8007ffe:	6560      	str	r0, [r4, #84]	@ 0x54
 8008000:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008002:	602f      	str	r7, [r5, #0]
 8008004:	b1b9      	cbz	r1, 8008036 <__sflush_r+0xae>
 8008006:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800800a:	4299      	cmp	r1, r3
 800800c:	d002      	beq.n	8008014 <__sflush_r+0x8c>
 800800e:	4628      	mov	r0, r5
 8008010:	f7ff f8a6 	bl	8007160 <_free_r>
 8008014:	2300      	movs	r3, #0
 8008016:	6363      	str	r3, [r4, #52]	@ 0x34
 8008018:	e00d      	b.n	8008036 <__sflush_r+0xae>
 800801a:	2301      	movs	r3, #1
 800801c:	4628      	mov	r0, r5
 800801e:	47b0      	blx	r6
 8008020:	4602      	mov	r2, r0
 8008022:	1c50      	adds	r0, r2, #1
 8008024:	d1c9      	bne.n	8007fba <__sflush_r+0x32>
 8008026:	682b      	ldr	r3, [r5, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d0c6      	beq.n	8007fba <__sflush_r+0x32>
 800802c:	2b1d      	cmp	r3, #29
 800802e:	d001      	beq.n	8008034 <__sflush_r+0xac>
 8008030:	2b16      	cmp	r3, #22
 8008032:	d11e      	bne.n	8008072 <__sflush_r+0xea>
 8008034:	602f      	str	r7, [r5, #0]
 8008036:	2000      	movs	r0, #0
 8008038:	e022      	b.n	8008080 <__sflush_r+0xf8>
 800803a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800803e:	b21b      	sxth	r3, r3
 8008040:	e01b      	b.n	800807a <__sflush_r+0xf2>
 8008042:	690f      	ldr	r7, [r1, #16]
 8008044:	2f00      	cmp	r7, #0
 8008046:	d0f6      	beq.n	8008036 <__sflush_r+0xae>
 8008048:	0793      	lsls	r3, r2, #30
 800804a:	680e      	ldr	r6, [r1, #0]
 800804c:	bf08      	it	eq
 800804e:	694b      	ldreq	r3, [r1, #20]
 8008050:	600f      	str	r7, [r1, #0]
 8008052:	bf18      	it	ne
 8008054:	2300      	movne	r3, #0
 8008056:	eba6 0807 	sub.w	r8, r6, r7
 800805a:	608b      	str	r3, [r1, #8]
 800805c:	f1b8 0f00 	cmp.w	r8, #0
 8008060:	dde9      	ble.n	8008036 <__sflush_r+0xae>
 8008062:	6a21      	ldr	r1, [r4, #32]
 8008064:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008066:	4643      	mov	r3, r8
 8008068:	463a      	mov	r2, r7
 800806a:	4628      	mov	r0, r5
 800806c:	47b0      	blx	r6
 800806e:	2800      	cmp	r0, #0
 8008070:	dc08      	bgt.n	8008084 <__sflush_r+0xfc>
 8008072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800807a:	81a3      	strh	r3, [r4, #12]
 800807c:	f04f 30ff 	mov.w	r0, #4294967295
 8008080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008084:	4407      	add	r7, r0
 8008086:	eba8 0800 	sub.w	r8, r8, r0
 800808a:	e7e7      	b.n	800805c <__sflush_r+0xd4>
 800808c:	20400001 	.word	0x20400001

08008090 <_fflush_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	690b      	ldr	r3, [r1, #16]
 8008094:	4605      	mov	r5, r0
 8008096:	460c      	mov	r4, r1
 8008098:	b913      	cbnz	r3, 80080a0 <_fflush_r+0x10>
 800809a:	2500      	movs	r5, #0
 800809c:	4628      	mov	r0, r5
 800809e:	bd38      	pop	{r3, r4, r5, pc}
 80080a0:	b118      	cbz	r0, 80080aa <_fflush_r+0x1a>
 80080a2:	6a03      	ldr	r3, [r0, #32]
 80080a4:	b90b      	cbnz	r3, 80080aa <_fflush_r+0x1a>
 80080a6:	f7fe f827 	bl	80060f8 <__sinit>
 80080aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0f3      	beq.n	800809a <_fflush_r+0xa>
 80080b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80080b4:	07d0      	lsls	r0, r2, #31
 80080b6:	d404      	bmi.n	80080c2 <_fflush_r+0x32>
 80080b8:	0599      	lsls	r1, r3, #22
 80080ba:	d402      	bmi.n	80080c2 <_fflush_r+0x32>
 80080bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080be:	f7fe f9c8 	bl	8006452 <__retarget_lock_acquire_recursive>
 80080c2:	4628      	mov	r0, r5
 80080c4:	4621      	mov	r1, r4
 80080c6:	f7ff ff5f 	bl	8007f88 <__sflush_r>
 80080ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080cc:	07da      	lsls	r2, r3, #31
 80080ce:	4605      	mov	r5, r0
 80080d0:	d4e4      	bmi.n	800809c <_fflush_r+0xc>
 80080d2:	89a3      	ldrh	r3, [r4, #12]
 80080d4:	059b      	lsls	r3, r3, #22
 80080d6:	d4e1      	bmi.n	800809c <_fflush_r+0xc>
 80080d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080da:	f7fe f9bb 	bl	8006454 <__retarget_lock_release_recursive>
 80080de:	e7dd      	b.n	800809c <_fflush_r+0xc>

080080e0 <fiprintf>:
 80080e0:	b40e      	push	{r1, r2, r3}
 80080e2:	b503      	push	{r0, r1, lr}
 80080e4:	4601      	mov	r1, r0
 80080e6:	ab03      	add	r3, sp, #12
 80080e8:	4805      	ldr	r0, [pc, #20]	@ (8008100 <fiprintf+0x20>)
 80080ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ee:	6800      	ldr	r0, [r0, #0]
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	f7ff fe31 	bl	8007d58 <_vfiprintf_r>
 80080f6:	b002      	add	sp, #8
 80080f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080fc:	b003      	add	sp, #12
 80080fe:	4770      	bx	lr
 8008100:	20000108 	.word	0x20000108

08008104 <__swhatbuf_r>:
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	460c      	mov	r4, r1
 8008108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800810c:	2900      	cmp	r1, #0
 800810e:	b096      	sub	sp, #88	@ 0x58
 8008110:	4615      	mov	r5, r2
 8008112:	461e      	mov	r6, r3
 8008114:	da0d      	bge.n	8008132 <__swhatbuf_r+0x2e>
 8008116:	89a3      	ldrh	r3, [r4, #12]
 8008118:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800811c:	f04f 0100 	mov.w	r1, #0
 8008120:	bf14      	ite	ne
 8008122:	2340      	movne	r3, #64	@ 0x40
 8008124:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008128:	2000      	movs	r0, #0
 800812a:	6031      	str	r1, [r6, #0]
 800812c:	602b      	str	r3, [r5, #0]
 800812e:	b016      	add	sp, #88	@ 0x58
 8008130:	bd70      	pop	{r4, r5, r6, pc}
 8008132:	466a      	mov	r2, sp
 8008134:	f000 f862 	bl	80081fc <_fstat_r>
 8008138:	2800      	cmp	r0, #0
 800813a:	dbec      	blt.n	8008116 <__swhatbuf_r+0x12>
 800813c:	9901      	ldr	r1, [sp, #4]
 800813e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008142:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008146:	4259      	negs	r1, r3
 8008148:	4159      	adcs	r1, r3
 800814a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800814e:	e7eb      	b.n	8008128 <__swhatbuf_r+0x24>

08008150 <__smakebuf_r>:
 8008150:	898b      	ldrh	r3, [r1, #12]
 8008152:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008154:	079d      	lsls	r5, r3, #30
 8008156:	4606      	mov	r6, r0
 8008158:	460c      	mov	r4, r1
 800815a:	d507      	bpl.n	800816c <__smakebuf_r+0x1c>
 800815c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	6123      	str	r3, [r4, #16]
 8008164:	2301      	movs	r3, #1
 8008166:	6163      	str	r3, [r4, #20]
 8008168:	b003      	add	sp, #12
 800816a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800816c:	ab01      	add	r3, sp, #4
 800816e:	466a      	mov	r2, sp
 8008170:	f7ff ffc8 	bl	8008104 <__swhatbuf_r>
 8008174:	9f00      	ldr	r7, [sp, #0]
 8008176:	4605      	mov	r5, r0
 8008178:	4639      	mov	r1, r7
 800817a:	4630      	mov	r0, r6
 800817c:	f7ff f864 	bl	8007248 <_malloc_r>
 8008180:	b948      	cbnz	r0, 8008196 <__smakebuf_r+0x46>
 8008182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008186:	059a      	lsls	r2, r3, #22
 8008188:	d4ee      	bmi.n	8008168 <__smakebuf_r+0x18>
 800818a:	f023 0303 	bic.w	r3, r3, #3
 800818e:	f043 0302 	orr.w	r3, r3, #2
 8008192:	81a3      	strh	r3, [r4, #12]
 8008194:	e7e2      	b.n	800815c <__smakebuf_r+0xc>
 8008196:	89a3      	ldrh	r3, [r4, #12]
 8008198:	6020      	str	r0, [r4, #0]
 800819a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800819e:	81a3      	strh	r3, [r4, #12]
 80081a0:	9b01      	ldr	r3, [sp, #4]
 80081a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80081a6:	b15b      	cbz	r3, 80081c0 <__smakebuf_r+0x70>
 80081a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ac:	4630      	mov	r0, r6
 80081ae:	f000 f837 	bl	8008220 <_isatty_r>
 80081b2:	b128      	cbz	r0, 80081c0 <__smakebuf_r+0x70>
 80081b4:	89a3      	ldrh	r3, [r4, #12]
 80081b6:	f023 0303 	bic.w	r3, r3, #3
 80081ba:	f043 0301 	orr.w	r3, r3, #1
 80081be:	81a3      	strh	r3, [r4, #12]
 80081c0:	89a3      	ldrh	r3, [r4, #12]
 80081c2:	431d      	orrs	r5, r3
 80081c4:	81a5      	strh	r5, [r4, #12]
 80081c6:	e7cf      	b.n	8008168 <__smakebuf_r+0x18>

080081c8 <memmove>:
 80081c8:	4288      	cmp	r0, r1
 80081ca:	b510      	push	{r4, lr}
 80081cc:	eb01 0402 	add.w	r4, r1, r2
 80081d0:	d902      	bls.n	80081d8 <memmove+0x10>
 80081d2:	4284      	cmp	r4, r0
 80081d4:	4623      	mov	r3, r4
 80081d6:	d807      	bhi.n	80081e8 <memmove+0x20>
 80081d8:	1e43      	subs	r3, r0, #1
 80081da:	42a1      	cmp	r1, r4
 80081dc:	d008      	beq.n	80081f0 <memmove+0x28>
 80081de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081e6:	e7f8      	b.n	80081da <memmove+0x12>
 80081e8:	4402      	add	r2, r0
 80081ea:	4601      	mov	r1, r0
 80081ec:	428a      	cmp	r2, r1
 80081ee:	d100      	bne.n	80081f2 <memmove+0x2a>
 80081f0:	bd10      	pop	{r4, pc}
 80081f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081fa:	e7f7      	b.n	80081ec <memmove+0x24>

080081fc <_fstat_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	4d07      	ldr	r5, [pc, #28]	@ (800821c <_fstat_r+0x20>)
 8008200:	2300      	movs	r3, #0
 8008202:	4604      	mov	r4, r0
 8008204:	4608      	mov	r0, r1
 8008206:	4611      	mov	r1, r2
 8008208:	602b      	str	r3, [r5, #0]
 800820a:	f7fd fa68 	bl	80056de <_fstat>
 800820e:	1c43      	adds	r3, r0, #1
 8008210:	d102      	bne.n	8008218 <_fstat_r+0x1c>
 8008212:	682b      	ldr	r3, [r5, #0]
 8008214:	b103      	cbz	r3, 8008218 <_fstat_r+0x1c>
 8008216:	6023      	str	r3, [r4, #0]
 8008218:	bd38      	pop	{r3, r4, r5, pc}
 800821a:	bf00      	nop
 800821c:	20000684 	.word	0x20000684

08008220 <_isatty_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	4d06      	ldr	r5, [pc, #24]	@ (800823c <_isatty_r+0x1c>)
 8008224:	2300      	movs	r3, #0
 8008226:	4604      	mov	r4, r0
 8008228:	4608      	mov	r0, r1
 800822a:	602b      	str	r3, [r5, #0]
 800822c:	f7fd fa65 	bl	80056fa <_isatty>
 8008230:	1c43      	adds	r3, r0, #1
 8008232:	d102      	bne.n	800823a <_isatty_r+0x1a>
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	b103      	cbz	r3, 800823a <_isatty_r+0x1a>
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	bd38      	pop	{r3, r4, r5, pc}
 800823c:	20000684 	.word	0x20000684

08008240 <_sbrk_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	4d06      	ldr	r5, [pc, #24]	@ (800825c <_sbrk_r+0x1c>)
 8008244:	2300      	movs	r3, #0
 8008246:	4604      	mov	r4, r0
 8008248:	4608      	mov	r0, r1
 800824a:	602b      	str	r3, [r5, #0]
 800824c:	f7fa f840 	bl	80022d0 <_sbrk>
 8008250:	1c43      	adds	r3, r0, #1
 8008252:	d102      	bne.n	800825a <_sbrk_r+0x1a>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	b103      	cbz	r3, 800825a <_sbrk_r+0x1a>
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	bd38      	pop	{r3, r4, r5, pc}
 800825c:	20000684 	.word	0x20000684

08008260 <abort>:
 8008260:	b508      	push	{r3, lr}
 8008262:	2006      	movs	r0, #6
 8008264:	f000 f88c 	bl	8008380 <raise>
 8008268:	2001      	movs	r0, #1
 800826a:	f000 f8d7 	bl	800841c <_exit>

0800826e <_calloc_r>:
 800826e:	b570      	push	{r4, r5, r6, lr}
 8008270:	fba1 5402 	umull	r5, r4, r1, r2
 8008274:	b934      	cbnz	r4, 8008284 <_calloc_r+0x16>
 8008276:	4629      	mov	r1, r5
 8008278:	f7fe ffe6 	bl	8007248 <_malloc_r>
 800827c:	4606      	mov	r6, r0
 800827e:	b928      	cbnz	r0, 800828c <_calloc_r+0x1e>
 8008280:	4630      	mov	r0, r6
 8008282:	bd70      	pop	{r4, r5, r6, pc}
 8008284:	220c      	movs	r2, #12
 8008286:	6002      	str	r2, [r0, #0]
 8008288:	2600      	movs	r6, #0
 800828a:	e7f9      	b.n	8008280 <_calloc_r+0x12>
 800828c:	462a      	mov	r2, r5
 800828e:	4621      	mov	r1, r4
 8008290:	f7fe f862 	bl	8006358 <memset>
 8008294:	e7f4      	b.n	8008280 <_calloc_r+0x12>

08008296 <__ascii_mbtowc>:
 8008296:	b082      	sub	sp, #8
 8008298:	b901      	cbnz	r1, 800829c <__ascii_mbtowc+0x6>
 800829a:	a901      	add	r1, sp, #4
 800829c:	b142      	cbz	r2, 80082b0 <__ascii_mbtowc+0x1a>
 800829e:	b14b      	cbz	r3, 80082b4 <__ascii_mbtowc+0x1e>
 80082a0:	7813      	ldrb	r3, [r2, #0]
 80082a2:	600b      	str	r3, [r1, #0]
 80082a4:	7812      	ldrb	r2, [r2, #0]
 80082a6:	1e10      	subs	r0, r2, #0
 80082a8:	bf18      	it	ne
 80082aa:	2001      	movne	r0, #1
 80082ac:	b002      	add	sp, #8
 80082ae:	4770      	bx	lr
 80082b0:	4610      	mov	r0, r2
 80082b2:	e7fb      	b.n	80082ac <__ascii_mbtowc+0x16>
 80082b4:	f06f 0001 	mvn.w	r0, #1
 80082b8:	e7f8      	b.n	80082ac <__ascii_mbtowc+0x16>

080082ba <_realloc_r>:
 80082ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082be:	4607      	mov	r7, r0
 80082c0:	4614      	mov	r4, r2
 80082c2:	460d      	mov	r5, r1
 80082c4:	b921      	cbnz	r1, 80082d0 <_realloc_r+0x16>
 80082c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082ca:	4611      	mov	r1, r2
 80082cc:	f7fe bfbc 	b.w	8007248 <_malloc_r>
 80082d0:	b92a      	cbnz	r2, 80082de <_realloc_r+0x24>
 80082d2:	f7fe ff45 	bl	8007160 <_free_r>
 80082d6:	4625      	mov	r5, r4
 80082d8:	4628      	mov	r0, r5
 80082da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082de:	f000 f86b 	bl	80083b8 <_malloc_usable_size_r>
 80082e2:	4284      	cmp	r4, r0
 80082e4:	4606      	mov	r6, r0
 80082e6:	d802      	bhi.n	80082ee <_realloc_r+0x34>
 80082e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082ec:	d8f4      	bhi.n	80082d8 <_realloc_r+0x1e>
 80082ee:	4621      	mov	r1, r4
 80082f0:	4638      	mov	r0, r7
 80082f2:	f7fe ffa9 	bl	8007248 <_malloc_r>
 80082f6:	4680      	mov	r8, r0
 80082f8:	b908      	cbnz	r0, 80082fe <_realloc_r+0x44>
 80082fa:	4645      	mov	r5, r8
 80082fc:	e7ec      	b.n	80082d8 <_realloc_r+0x1e>
 80082fe:	42b4      	cmp	r4, r6
 8008300:	4622      	mov	r2, r4
 8008302:	4629      	mov	r1, r5
 8008304:	bf28      	it	cs
 8008306:	4632      	movcs	r2, r6
 8008308:	f7fe f8a5 	bl	8006456 <memcpy>
 800830c:	4629      	mov	r1, r5
 800830e:	4638      	mov	r0, r7
 8008310:	f7fe ff26 	bl	8007160 <_free_r>
 8008314:	e7f1      	b.n	80082fa <_realloc_r+0x40>

08008316 <__ascii_wctomb>:
 8008316:	4603      	mov	r3, r0
 8008318:	4608      	mov	r0, r1
 800831a:	b141      	cbz	r1, 800832e <__ascii_wctomb+0x18>
 800831c:	2aff      	cmp	r2, #255	@ 0xff
 800831e:	d904      	bls.n	800832a <__ascii_wctomb+0x14>
 8008320:	228a      	movs	r2, #138	@ 0x8a
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	f04f 30ff 	mov.w	r0, #4294967295
 8008328:	4770      	bx	lr
 800832a:	700a      	strb	r2, [r1, #0]
 800832c:	2001      	movs	r0, #1
 800832e:	4770      	bx	lr

08008330 <_raise_r>:
 8008330:	291f      	cmp	r1, #31
 8008332:	b538      	push	{r3, r4, r5, lr}
 8008334:	4605      	mov	r5, r0
 8008336:	460c      	mov	r4, r1
 8008338:	d904      	bls.n	8008344 <_raise_r+0x14>
 800833a:	2316      	movs	r3, #22
 800833c:	6003      	str	r3, [r0, #0]
 800833e:	f04f 30ff 	mov.w	r0, #4294967295
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008346:	b112      	cbz	r2, 800834e <_raise_r+0x1e>
 8008348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800834c:	b94b      	cbnz	r3, 8008362 <_raise_r+0x32>
 800834e:	4628      	mov	r0, r5
 8008350:	f000 f830 	bl	80083b4 <_getpid_r>
 8008354:	4622      	mov	r2, r4
 8008356:	4601      	mov	r1, r0
 8008358:	4628      	mov	r0, r5
 800835a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800835e:	f000 b817 	b.w	8008390 <_kill_r>
 8008362:	2b01      	cmp	r3, #1
 8008364:	d00a      	beq.n	800837c <_raise_r+0x4c>
 8008366:	1c59      	adds	r1, r3, #1
 8008368:	d103      	bne.n	8008372 <_raise_r+0x42>
 800836a:	2316      	movs	r3, #22
 800836c:	6003      	str	r3, [r0, #0]
 800836e:	2001      	movs	r0, #1
 8008370:	e7e7      	b.n	8008342 <_raise_r+0x12>
 8008372:	2100      	movs	r1, #0
 8008374:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008378:	4620      	mov	r0, r4
 800837a:	4798      	blx	r3
 800837c:	2000      	movs	r0, #0
 800837e:	e7e0      	b.n	8008342 <_raise_r+0x12>

08008380 <raise>:
 8008380:	4b02      	ldr	r3, [pc, #8]	@ (800838c <raise+0xc>)
 8008382:	4601      	mov	r1, r0
 8008384:	6818      	ldr	r0, [r3, #0]
 8008386:	f7ff bfd3 	b.w	8008330 <_raise_r>
 800838a:	bf00      	nop
 800838c:	20000108 	.word	0x20000108

08008390 <_kill_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4d07      	ldr	r5, [pc, #28]	@ (80083b0 <_kill_r+0x20>)
 8008394:	2300      	movs	r3, #0
 8008396:	4604      	mov	r4, r0
 8008398:	4608      	mov	r0, r1
 800839a:	4611      	mov	r1, r2
 800839c:	602b      	str	r3, [r5, #0]
 800839e:	f000 f835 	bl	800840c <_kill>
 80083a2:	1c43      	adds	r3, r0, #1
 80083a4:	d102      	bne.n	80083ac <_kill_r+0x1c>
 80083a6:	682b      	ldr	r3, [r5, #0]
 80083a8:	b103      	cbz	r3, 80083ac <_kill_r+0x1c>
 80083aa:	6023      	str	r3, [r4, #0]
 80083ac:	bd38      	pop	{r3, r4, r5, pc}
 80083ae:	bf00      	nop
 80083b0:	20000684 	.word	0x20000684

080083b4 <_getpid_r>:
 80083b4:	f7fd b970 	b.w	8005698 <_getpid>

080083b8 <_malloc_usable_size_r>:
 80083b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083bc:	1f18      	subs	r0, r3, #4
 80083be:	2b00      	cmp	r3, #0
 80083c0:	bfbc      	itt	lt
 80083c2:	580b      	ldrlt	r3, [r1, r0]
 80083c4:	18c0      	addlt	r0, r0, r3
 80083c6:	4770      	bx	lr

080083c8 <sqrtf>:
 80083c8:	b508      	push	{r3, lr}
 80083ca:	ed2d 8b02 	vpush	{d8}
 80083ce:	eeb0 8a40 	vmov.f32	s16, s0
 80083d2:	f000 f817 	bl	8008404 <__ieee754_sqrtf>
 80083d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80083da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083de:	d60c      	bvs.n	80083fa <sqrtf+0x32>
 80083e0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8008400 <sqrtf+0x38>
 80083e4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80083e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ec:	d505      	bpl.n	80083fa <sqrtf+0x32>
 80083ee:	f7fe f805 	bl	80063fc <__errno>
 80083f2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80083f6:	2321      	movs	r3, #33	@ 0x21
 80083f8:	6003      	str	r3, [r0, #0]
 80083fa:	ecbd 8b02 	vpop	{d8}
 80083fe:	bd08      	pop	{r3, pc}
 8008400:	00000000 	.word	0x00000000

08008404 <__ieee754_sqrtf>:
 8008404:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008408:	4770      	bx	lr
	...

0800840c <_kill>:
 800840c:	4b02      	ldr	r3, [pc, #8]	@ (8008418 <_kill+0xc>)
 800840e:	2258      	movs	r2, #88	@ 0x58
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	f04f 30ff 	mov.w	r0, #4294967295
 8008416:	4770      	bx	lr
 8008418:	20000684 	.word	0x20000684

0800841c <_exit>:
 800841c:	e7fe      	b.n	800841c <_exit>
	...

08008420 <_init>:
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	bf00      	nop
 8008424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008426:	bc08      	pop	{r3}
 8008428:	469e      	mov	lr, r3
 800842a:	4770      	bx	lr

0800842c <_fini>:
 800842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842e:	bf00      	nop
 8008430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008432:	bc08      	pop	{r3}
 8008434:	469e      	mov	lr, r3
 8008436:	4770      	bx	lr
